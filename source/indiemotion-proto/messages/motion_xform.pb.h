// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indiemotion-proto/messages/motion_xform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto;
namespace indiemotion {
namespace messages {
class MotionXForm;
struct MotionXFormDefaultTypeInternal;
extern MotionXFormDefaultTypeInternal _MotionXForm_default_instance_;
class XFormOrientation;
struct XFormOrientationDefaultTypeInternal;
extern XFormOrientationDefaultTypeInternal _XFormOrientation_default_instance_;
class XFormTranslation;
struct XFormTranslationDefaultTypeInternal;
extern XFormTranslationDefaultTypeInternal _XFormTranslation_default_instance_;
}  // namespace messages
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotion::messages::MotionXForm* Arena::CreateMaybeMessage<::indiemotion::messages::MotionXForm>(Arena*);
template<> ::indiemotion::messages::XFormOrientation* Arena::CreateMaybeMessage<::indiemotion::messages::XFormOrientation>(Arena*);
template<> ::indiemotion::messages::XFormTranslation* Arena::CreateMaybeMessage<::indiemotion::messages::XFormTranslation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotion {
namespace messages {

// ===================================================================

class XFormTranslation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.messages.XFormTranslation) */ {
 public:
  inline XFormTranslation() : XFormTranslation(nullptr) {}
  ~XFormTranslation() override;
  explicit constexpr XFormTranslation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XFormTranslation(const XFormTranslation& from);
  XFormTranslation(XFormTranslation&& from) noexcept
    : XFormTranslation() {
    *this = ::std::move(from);
  }

  inline XFormTranslation& operator=(const XFormTranslation& from) {
    CopyFrom(from);
    return *this;
  }
  inline XFormTranslation& operator=(XFormTranslation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XFormTranslation& default_instance() {
    return *internal_default_instance();
  }
  static inline const XFormTranslation* internal_default_instance() {
    return reinterpret_cast<const XFormTranslation*>(
               &_XFormTranslation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XFormTranslation& a, XFormTranslation& b) {
    a.Swap(&b);
  }
  inline void Swap(XFormTranslation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XFormTranslation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XFormTranslation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XFormTranslation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XFormTranslation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XFormTranslation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XFormTranslation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.messages.XFormTranslation";
  }
  protected:
  explicit XFormTranslation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.messages.XFormTranslation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto;
};
// -------------------------------------------------------------------

class XFormOrientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.messages.XFormOrientation) */ {
 public:
  inline XFormOrientation() : XFormOrientation(nullptr) {}
  ~XFormOrientation() override;
  explicit constexpr XFormOrientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XFormOrientation(const XFormOrientation& from);
  XFormOrientation(XFormOrientation&& from) noexcept
    : XFormOrientation() {
    *this = ::std::move(from);
  }

  inline XFormOrientation& operator=(const XFormOrientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline XFormOrientation& operator=(XFormOrientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XFormOrientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const XFormOrientation* internal_default_instance() {
    return reinterpret_cast<const XFormOrientation*>(
               &_XFormOrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XFormOrientation& a, XFormOrientation& b) {
    a.Swap(&b);
  }
  inline void Swap(XFormOrientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XFormOrientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XFormOrientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XFormOrientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XFormOrientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XFormOrientation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XFormOrientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.messages.XFormOrientation";
  }
  protected:
  explicit XFormOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.messages.XFormOrientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto;
};
// -------------------------------------------------------------------

class MotionXForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.messages.MotionXForm) */ {
 public:
  inline MotionXForm() : MotionXForm(nullptr) {}
  ~MotionXForm() override;
  explicit constexpr MotionXForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionXForm(const MotionXForm& from);
  MotionXForm(MotionXForm&& from) noexcept
    : MotionXForm() {
    *this = ::std::move(from);
  }

  inline MotionXForm& operator=(const MotionXForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionXForm& operator=(MotionXForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionXForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionXForm* internal_default_instance() {
    return reinterpret_cast<const MotionXForm*>(
               &_MotionXForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionXForm& a, MotionXForm& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionXForm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionXForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionXForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionXForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionXForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionXForm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionXForm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.messages.MotionXForm";
  }
  protected:
  explicit MotionXForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .indiemotion.messages.XFormTranslation translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::indiemotion::messages::XFormTranslation& translation() const;
  PROTOBUF_NODISCARD ::indiemotion::messages::XFormTranslation* release_translation();
  ::indiemotion::messages::XFormTranslation* mutable_translation();
  void set_allocated_translation(::indiemotion::messages::XFormTranslation* translation);
  private:
  const ::indiemotion::messages::XFormTranslation& _internal_translation() const;
  ::indiemotion::messages::XFormTranslation* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::indiemotion::messages::XFormTranslation* translation);
  ::indiemotion::messages::XFormTranslation* unsafe_arena_release_translation();

  // .indiemotion.messages.XFormOrientation orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::indiemotion::messages::XFormOrientation& orientation() const;
  PROTOBUF_NODISCARD ::indiemotion::messages::XFormOrientation* release_orientation();
  ::indiemotion::messages::XFormOrientation* mutable_orientation();
  void set_allocated_orientation(::indiemotion::messages::XFormOrientation* orientation);
  private:
  const ::indiemotion::messages::XFormOrientation& _internal_orientation() const;
  ::indiemotion::messages::XFormOrientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::indiemotion::messages::XFormOrientation* orientation);
  ::indiemotion::messages::XFormOrientation* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:indiemotion.messages.MotionXForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::messages::XFormTranslation* translation_;
  ::indiemotion::messages::XFormOrientation* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XFormTranslation

// double x = 1;
inline void XFormTranslation::clear_x() {
  x_ = 0;
}
inline double XFormTranslation::_internal_x() const {
  return x_;
}
inline double XFormTranslation::x() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.XFormTranslation.x)
  return _internal_x();
}
inline void XFormTranslation::_internal_set_x(double value) {
  
  x_ = value;
}
inline void XFormTranslation::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:indiemotion.messages.XFormTranslation.x)
}

// double y = 2;
inline void XFormTranslation::clear_y() {
  y_ = 0;
}
inline double XFormTranslation::_internal_y() const {
  return y_;
}
inline double XFormTranslation::y() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.XFormTranslation.y)
  return _internal_y();
}
inline void XFormTranslation::_internal_set_y(double value) {
  
  y_ = value;
}
inline void XFormTranslation::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:indiemotion.messages.XFormTranslation.y)
}

// double z = 3;
inline void XFormTranslation::clear_z() {
  z_ = 0;
}
inline double XFormTranslation::_internal_z() const {
  return z_;
}
inline double XFormTranslation::z() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.XFormTranslation.z)
  return _internal_z();
}
inline void XFormTranslation::_internal_set_z(double value) {
  
  z_ = value;
}
inline void XFormTranslation::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:indiemotion.messages.XFormTranslation.z)
}

// -------------------------------------------------------------------

// XFormOrientation

// double x = 1;
inline void XFormOrientation::clear_x() {
  x_ = 0;
}
inline double XFormOrientation::_internal_x() const {
  return x_;
}
inline double XFormOrientation::x() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.XFormOrientation.x)
  return _internal_x();
}
inline void XFormOrientation::_internal_set_x(double value) {
  
  x_ = value;
}
inline void XFormOrientation::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:indiemotion.messages.XFormOrientation.x)
}

// double y = 2;
inline void XFormOrientation::clear_y() {
  y_ = 0;
}
inline double XFormOrientation::_internal_y() const {
  return y_;
}
inline double XFormOrientation::y() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.XFormOrientation.y)
  return _internal_y();
}
inline void XFormOrientation::_internal_set_y(double value) {
  
  y_ = value;
}
inline void XFormOrientation::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:indiemotion.messages.XFormOrientation.y)
}

// double z = 3;
inline void XFormOrientation::clear_z() {
  z_ = 0;
}
inline double XFormOrientation::_internal_z() const {
  return z_;
}
inline double XFormOrientation::z() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.XFormOrientation.z)
  return _internal_z();
}
inline void XFormOrientation::_internal_set_z(double value) {
  
  z_ = value;
}
inline void XFormOrientation::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:indiemotion.messages.XFormOrientation.z)
}

// -------------------------------------------------------------------

// MotionXForm

// .indiemotion.messages.XFormTranslation translation = 1;
inline bool MotionXForm::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool MotionXForm::has_translation() const {
  return _internal_has_translation();
}
inline void MotionXForm::clear_translation() {
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::indiemotion::messages::XFormTranslation& MotionXForm::_internal_translation() const {
  const ::indiemotion::messages::XFormTranslation* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::messages::XFormTranslation&>(
      ::indiemotion::messages::_XFormTranslation_default_instance_);
}
inline const ::indiemotion::messages::XFormTranslation& MotionXForm::translation() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.MotionXForm.translation)
  return _internal_translation();
}
inline void MotionXForm::unsafe_arena_set_allocated_translation(
    ::indiemotion::messages::XFormTranslation* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.messages.MotionXForm.translation)
}
inline ::indiemotion::messages::XFormTranslation* MotionXForm::release_translation() {
  
  ::indiemotion::messages::XFormTranslation* temp = translation_;
  translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::messages::XFormTranslation* MotionXForm::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:indiemotion.messages.MotionXForm.translation)
  
  ::indiemotion::messages::XFormTranslation* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::indiemotion::messages::XFormTranslation* MotionXForm::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::messages::XFormTranslation>(GetArenaForAllocation());
    translation_ = p;
  }
  return translation_;
}
inline ::indiemotion::messages::XFormTranslation* MotionXForm::mutable_translation() {
  ::indiemotion::messages::XFormTranslation* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:indiemotion.messages.MotionXForm.translation)
  return _msg;
}
inline void MotionXForm::set_allocated_translation(::indiemotion::messages::XFormTranslation* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::messages::XFormTranslation>::GetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.MotionXForm.translation)
}

// .indiemotion.messages.XFormOrientation orientation = 2;
inline bool MotionXForm::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool MotionXForm::has_orientation() const {
  return _internal_has_orientation();
}
inline void MotionXForm::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::indiemotion::messages::XFormOrientation& MotionXForm::_internal_orientation() const {
  const ::indiemotion::messages::XFormOrientation* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::messages::XFormOrientation&>(
      ::indiemotion::messages::_XFormOrientation_default_instance_);
}
inline const ::indiemotion::messages::XFormOrientation& MotionXForm::orientation() const {
  // @@protoc_insertion_point(field_get:indiemotion.messages.MotionXForm.orientation)
  return _internal_orientation();
}
inline void MotionXForm::unsafe_arena_set_allocated_orientation(
    ::indiemotion::messages::XFormOrientation* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.messages.MotionXForm.orientation)
}
inline ::indiemotion::messages::XFormOrientation* MotionXForm::release_orientation() {
  
  ::indiemotion::messages::XFormOrientation* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::messages::XFormOrientation* MotionXForm::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:indiemotion.messages.MotionXForm.orientation)
  
  ::indiemotion::messages::XFormOrientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::indiemotion::messages::XFormOrientation* MotionXForm::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::messages::XFormOrientation>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::indiemotion::messages::XFormOrientation* MotionXForm::mutable_orientation() {
  ::indiemotion::messages::XFormOrientation* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:indiemotion.messages.MotionXForm.orientation)
  return _msg;
}
inline void MotionXForm::set_allocated_orientation(::indiemotion::messages::XFormOrientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::messages::XFormOrientation>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.MotionXForm.orientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace indiemotion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto
