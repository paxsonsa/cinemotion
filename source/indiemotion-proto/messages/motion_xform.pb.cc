// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indiemotion-proto/messages/motion_xform.proto

#include "indiemotion-proto/messages/motion_xform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace indiemotion {
namespace messages {
constexpr XFormTranslation::XFormTranslation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct XFormTranslationDefaultTypeInternal {
  constexpr XFormTranslationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XFormTranslationDefaultTypeInternal() {}
  union {
    XFormTranslation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XFormTranslationDefaultTypeInternal _XFormTranslation_default_instance_;
constexpr XFormOrientation::XFormOrientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct XFormOrientationDefaultTypeInternal {
  constexpr XFormOrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XFormOrientationDefaultTypeInternal() {}
  union {
    XFormOrientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XFormOrientationDefaultTypeInternal _XFormOrientation_default_instance_;
constexpr MotionXForm::MotionXForm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : translation_(nullptr)
  , orientation_(nullptr){}
struct MotionXFormDefaultTypeInternal {
  constexpr MotionXFormDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionXFormDefaultTypeInternal() {}
  union {
    MotionXForm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionXFormDefaultTypeInternal _MotionXForm_default_instance_;
}  // namespace messages
}  // namespace indiemotion
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto = nullptr;

const uint32_t TableStruct_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormTranslation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormTranslation, x_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormTranslation, y_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormTranslation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormOrientation, x_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormOrientation, y_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::XFormOrientation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::MotionXForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::MotionXForm, translation_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::MotionXForm, orientation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::indiemotion::messages::XFormTranslation)},
  { 9, -1, -1, sizeof(::indiemotion::messages::XFormOrientation)},
  { 18, -1, -1, sizeof(::indiemotion::messages::MotionXForm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::messages::_XFormTranslation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::messages::_XFormOrientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::messages::_MotionXForm_default_instance_),
};

const char descriptor_table_protodef_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-indiemotion-proto/messages/motion_xfor"
  "m.proto\022\024indiemotion.messages\"3\n\020XFormTr"
  "anslation\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001"
  "(\001\"3\n\020XFormOrientation\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002"
  " \001(\001\022\t\n\001z\030\003 \001(\001\"\207\001\n\013MotionXForm\022;\n\013trans"
  "lation\030\001 \001(\0132&.indiemotion.messages.XFor"
  "mTranslation\022;\n\013orientation\030\002 \001(\0132&.indi"
  "emotion.messages.XFormOrientationb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto = {
  false, false, 321, descriptor_table_protodef_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto, "indiemotion-proto/messages/motion_xform.proto", 
  &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto::offsets,
  file_level_metadata_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto, file_level_enum_descriptors_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto, file_level_service_descriptors_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_getter() {
  return &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto(&descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto);
namespace indiemotion {
namespace messages {

// ===================================================================

class XFormTranslation::_Internal {
 public:
};

XFormTranslation::XFormTranslation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.messages.XFormTranslation)
}
XFormTranslation::XFormTranslation(const XFormTranslation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:indiemotion.messages.XFormTranslation)
}

inline void XFormTranslation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

XFormTranslation::~XFormTranslation() {
  // @@protoc_insertion_point(destructor:indiemotion.messages.XFormTranslation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XFormTranslation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XFormTranslation::ArenaDtor(void* object) {
  XFormTranslation* _this = reinterpret_cast< XFormTranslation* >(object);
  (void)_this;
}
void XFormTranslation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XFormTranslation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XFormTranslation::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.messages.XFormTranslation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XFormTranslation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XFormTranslation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.messages.XFormTranslation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.messages.XFormTranslation)
  return target;
}

size_t XFormTranslation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.messages.XFormTranslation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XFormTranslation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XFormTranslation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XFormTranslation::GetClassData() const { return &_class_data_; }

void XFormTranslation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XFormTranslation *>(to)->MergeFrom(
      static_cast<const XFormTranslation &>(from));
}


void XFormTranslation::MergeFrom(const XFormTranslation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.messages.XFormTranslation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XFormTranslation::CopyFrom(const XFormTranslation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.messages.XFormTranslation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XFormTranslation::IsInitialized() const {
  return true;
}

void XFormTranslation::InternalSwap(XFormTranslation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XFormTranslation, z_)
      + sizeof(XFormTranslation::z_)
      - PROTOBUF_FIELD_OFFSET(XFormTranslation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XFormTranslation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_getter, &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_once,
      file_level_metadata_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto[0]);
}

// ===================================================================

class XFormOrientation::_Internal {
 public:
};

XFormOrientation::XFormOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.messages.XFormOrientation)
}
XFormOrientation::XFormOrientation(const XFormOrientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:indiemotion.messages.XFormOrientation)
}

inline void XFormOrientation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

XFormOrientation::~XFormOrientation() {
  // @@protoc_insertion_point(destructor:indiemotion.messages.XFormOrientation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XFormOrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XFormOrientation::ArenaDtor(void* object) {
  XFormOrientation* _this = reinterpret_cast< XFormOrientation* >(object);
  (void)_this;
}
void XFormOrientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XFormOrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XFormOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.messages.XFormOrientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XFormOrientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XFormOrientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.messages.XFormOrientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.messages.XFormOrientation)
  return target;
}

size_t XFormOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.messages.XFormOrientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XFormOrientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XFormOrientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XFormOrientation::GetClassData() const { return &_class_data_; }

void XFormOrientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XFormOrientation *>(to)->MergeFrom(
      static_cast<const XFormOrientation &>(from));
}


void XFormOrientation::MergeFrom(const XFormOrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.messages.XFormOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XFormOrientation::CopyFrom(const XFormOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.messages.XFormOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XFormOrientation::IsInitialized() const {
  return true;
}

void XFormOrientation::InternalSwap(XFormOrientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XFormOrientation, z_)
      + sizeof(XFormOrientation::z_)
      - PROTOBUF_FIELD_OFFSET(XFormOrientation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XFormOrientation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_getter, &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_once,
      file_level_metadata_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto[1]);
}

// ===================================================================

class MotionXForm::_Internal {
 public:
  static const ::indiemotion::messages::XFormTranslation& translation(const MotionXForm* msg);
  static const ::indiemotion::messages::XFormOrientation& orientation(const MotionXForm* msg);
};

const ::indiemotion::messages::XFormTranslation&
MotionXForm::_Internal::translation(const MotionXForm* msg) {
  return *msg->translation_;
}
const ::indiemotion::messages::XFormOrientation&
MotionXForm::_Internal::orientation(const MotionXForm* msg) {
  return *msg->orientation_;
}
MotionXForm::MotionXForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.messages.MotionXForm)
}
MotionXForm::MotionXForm(const MotionXForm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::indiemotion::messages::XFormTranslation(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::indiemotion::messages::XFormOrientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:indiemotion.messages.MotionXForm)
}

inline void MotionXForm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(orientation_));
}

MotionXForm::~MotionXForm() {
  // @@protoc_insertion_point(destructor:indiemotion.messages.MotionXForm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotionXForm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete orientation_;
}

void MotionXForm::ArenaDtor(void* object) {
  MotionXForm* _this = reinterpret_cast< MotionXForm* >(object);
  (void)_this;
}
void MotionXForm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionXForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionXForm::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.messages.MotionXForm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionXForm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotion.messages.XFormTranslation translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.messages.XFormOrientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionXForm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.messages.MotionXForm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotion.messages.XFormTranslation translation = 1;
  if (this->_internal_has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translation(this), target, stream);
  }

  // .indiemotion.messages.XFormOrientation orientation = 2;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.messages.MotionXForm)
  return target;
}

size_t MotionXForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.messages.MotionXForm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotion.messages.XFormTranslation translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .indiemotion.messages.XFormOrientation orientation = 2;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionXForm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionXForm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionXForm::GetClassData() const { return &_class_data_; }

void MotionXForm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotionXForm *>(to)->MergeFrom(
      static_cast<const MotionXForm &>(from));
}


void MotionXForm::MergeFrom(const MotionXForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.messages.MotionXForm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _internal_mutable_translation()->::indiemotion::messages::XFormTranslation::MergeFrom(from._internal_translation());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::indiemotion::messages::XFormOrientation::MergeFrom(from._internal_orientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionXForm::CopyFrom(const MotionXForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.messages.MotionXForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionXForm::IsInitialized() const {
  return true;
}

void MotionXForm::InternalSwap(MotionXForm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionXForm, orientation_)
      + sizeof(MotionXForm::orientation_)
      - PROTOBUF_FIELD_OFFSET(MotionXForm, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionXForm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_getter, &descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto_once,
      file_level_metadata_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::indiemotion::messages::XFormTranslation* Arena::CreateMaybeMessage< ::indiemotion::messages::XFormTranslation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::messages::XFormTranslation >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::messages::XFormOrientation* Arena::CreateMaybeMessage< ::indiemotion::messages::XFormOrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::messages::XFormOrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::messages::MotionXForm* Arena::CreateMaybeMessage< ::indiemotion::messages::MotionXForm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::messages::MotionXForm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
