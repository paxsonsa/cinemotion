// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indiemotion-proto/message.proto

#include "indiemotion-proto/message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace indiemotion {
namespace messages {
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , responseid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr ClientMessage::ClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct ClientMessageDefaultTypeInternal {
  constexpr ClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientMessageDefaultTypeInternal() {}
  union {
    ClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
}  // namespace messages
}  // namespace indiemotion
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_indiemotion_2dproto_2fmessage_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_indiemotion_2dproto_2fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_indiemotion_2dproto_2fmessage_2eproto = nullptr;

const uint32_t TableStruct_indiemotion_2dproto_2fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::Header, timestamp_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::Header, id_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::Header, responseid_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::ClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::ClientMessage, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::indiemotion::messages::ClientMessage, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::indiemotion::messages::Header)},
  { 12, -1, -1, sizeof(::indiemotion::messages::ClientMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::messages::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::messages::_ClientMessage_default_instance_),
};

const char descriptor_table_protodef_indiemotion_2dproto_2fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037indiemotion-proto/message.proto\022\024indie"
  "motion.messages\032\037google/protobuf/timesta"
  "mp.proto\032,indiemotion-proto/messages/ack"
  "nowledge.proto\032(indiemotion-proto/messag"
  "es/cameras.proto\032,indiemotion-proto/mess"
  "ages/motion_mode.proto\032-indiemotion-prot"
  "o/messages/motion_xform.proto\"k\n\006Header\022"
  "-\n\ttimestamp\030\001 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\n\n\002id\030\002 \001(\t\022\027\n\nresponseId\030\003 \001(\tH\000"
  "\210\001\001B\r\n\013_responseId\"\370\002\n\rClientMessage\022,\n\006"
  "header\030\001 \001(\0132\034.indiemotion.messages.Head"
  "er\0228\n\013acknowledge\030\024 \001(\0132!.indiemotion.me"
  "ssages.AcknowledgeH\000\0229\n\014list_cameras\030\036 \001"
  "(\0132!.indiemotion.messages.ListCamerasH\000\022"
  ">\n\017motion_set_mode\030( \001(\0132#.indiemotion.m"
  "essages.MotionSetModeH\000\022>\n\017motion_get_mo"
  "de\0302 \001(\0132#.indiemotion.messages.MotionGe"
  "tModeH\000\0229\n\014motion_xform\030< \001(\0132!.indiemot"
  "ion.messages.MotionXFormH\000B\t\n\007payloadb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_indiemotion_2dproto_2fmessage_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_indiemotion_2dproto_2fmessages_2facknowledge_2eproto,
  &::descriptor_table_indiemotion_2dproto_2fmessages_2fcameras_2eproto,
  &::descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fmode_2eproto,
  &::descriptor_table_indiemotion_2dproto_2fmessages_2fmotion_5fxform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_indiemotion_2dproto_2fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_indiemotion_2dproto_2fmessage_2eproto = {
  false, false, 765, descriptor_table_protodef_indiemotion_2dproto_2fmessage_2eproto, "indiemotion-proto/message.proto", 
  &descriptor_table_indiemotion_2dproto_2fmessage_2eproto_once, descriptor_table_indiemotion_2dproto_2fmessage_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_indiemotion_2dproto_2fmessage_2eproto::offsets,
  file_level_metadata_indiemotion_2dproto_2fmessage_2eproto, file_level_enum_descriptors_indiemotion_2dproto_2fmessage_2eproto, file_level_service_descriptors_indiemotion_2dproto_2fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_indiemotion_2dproto_2fmessage_2eproto_getter() {
  return &descriptor_table_indiemotion_2dproto_2fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_indiemotion_2dproto_2fmessage_2eproto(&descriptor_table_indiemotion_2dproto_2fmessage_2eproto);
namespace indiemotion {
namespace messages {

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Header* msg);
  static void set_has_responseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::timestamp(const Header* msg) {
  return *msg->timestamp_;
}
void Header::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.messages.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  responseid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    responseid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_responseid()) {
    responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responseid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:indiemotion.messages.Header)
}

inline void Header::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
responseid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  responseid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = nullptr;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:indiemotion.messages.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responseid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.messages.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    responseid_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.messages.Header.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string responseId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_responseid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.messages.Header.responseId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.messages.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.messages.Header.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional string responseId = 3;
  if (_internal_has_responseid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responseid().data(), static_cast<int>(this->_internal_responseid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.messages.Header.responseId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_responseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.messages.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.messages.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // optional string responseId = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responseid());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.messages.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_responseid()) {
    _internal_set_responseid(from._internal_responseid());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.messages.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &responseid_, lhs_arena,
      &other->responseid_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_indiemotion_2dproto_2fmessage_2eproto_getter, &descriptor_table_indiemotion_2dproto_2fmessage_2eproto_once,
      file_level_metadata_indiemotion_2dproto_2fmessage_2eproto[0]);
}

// ===================================================================

class ClientMessage::_Internal {
 public:
  static const ::indiemotion::messages::Header& header(const ClientMessage* msg);
  static const ::indiemotion::messages::Acknowledge& acknowledge(const ClientMessage* msg);
  static const ::indiemotion::messages::ListCameras& list_cameras(const ClientMessage* msg);
  static const ::indiemotion::messages::MotionSetMode& motion_set_mode(const ClientMessage* msg);
  static const ::indiemotion::messages::MotionGetMode& motion_get_mode(const ClientMessage* msg);
  static const ::indiemotion::messages::MotionXForm& motion_xform(const ClientMessage* msg);
};

const ::indiemotion::messages::Header&
ClientMessage::_Internal::header(const ClientMessage* msg) {
  return *msg->header_;
}
const ::indiemotion::messages::Acknowledge&
ClientMessage::_Internal::acknowledge(const ClientMessage* msg) {
  return *msg->payload_.acknowledge_;
}
const ::indiemotion::messages::ListCameras&
ClientMessage::_Internal::list_cameras(const ClientMessage* msg) {
  return *msg->payload_.list_cameras_;
}
const ::indiemotion::messages::MotionSetMode&
ClientMessage::_Internal::motion_set_mode(const ClientMessage* msg) {
  return *msg->payload_.motion_set_mode_;
}
const ::indiemotion::messages::MotionGetMode&
ClientMessage::_Internal::motion_get_mode(const ClientMessage* msg) {
  return *msg->payload_.motion_get_mode_;
}
const ::indiemotion::messages::MotionXForm&
ClientMessage::_Internal::motion_xform(const ClientMessage* msg) {
  return *msg->payload_.motion_xform_;
}
void ClientMessage::set_allocated_acknowledge(::indiemotion::messages::Acknowledge* acknowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (acknowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acknowledge));
    if (message_arena != submessage_arena) {
      acknowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acknowledge, submessage_arena);
    }
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.ClientMessage.acknowledge)
}
void ClientMessage::clear_acknowledge() {
  if (_internal_has_acknowledge()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.acknowledge_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_list_cameras(::indiemotion::messages::ListCameras* list_cameras) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (list_cameras) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_cameras));
    if (message_arena != submessage_arena) {
      list_cameras = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_cameras, submessage_arena);
    }
    set_has_list_cameras();
    payload_.list_cameras_ = list_cameras;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.ClientMessage.list_cameras)
}
void ClientMessage::clear_list_cameras() {
  if (_internal_has_list_cameras()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.list_cameras_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_motion_set_mode(::indiemotion::messages::MotionSetMode* motion_set_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_set_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_set_mode));
    if (message_arena != submessage_arena) {
      motion_set_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_set_mode, submessage_arena);
    }
    set_has_motion_set_mode();
    payload_.motion_set_mode_ = motion_set_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.ClientMessage.motion_set_mode)
}
void ClientMessage::clear_motion_set_mode() {
  if (_internal_has_motion_set_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_set_mode_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_motion_get_mode(::indiemotion::messages::MotionGetMode* motion_get_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_get_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_get_mode));
    if (message_arena != submessage_arena) {
      motion_get_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_get_mode, submessage_arena);
    }
    set_has_motion_get_mode();
    payload_.motion_get_mode_ = motion_get_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.ClientMessage.motion_get_mode)
}
void ClientMessage::clear_motion_get_mode() {
  if (_internal_has_motion_get_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_get_mode_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_motion_xform(::indiemotion::messages::MotionXForm* motion_xform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_xform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_xform));
    if (message_arena != submessage_arena) {
      motion_xform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_xform, submessage_arena);
    }
    set_has_motion_xform();
    payload_.motion_xform_ = motion_xform;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.messages.ClientMessage.motion_xform)
}
void ClientMessage::clear_motion_xform() {
  if (_internal_has_motion_xform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_xform_;
    }
    clear_has_payload();
  }
}
ClientMessage::ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.messages.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::indiemotion::messages::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kAcknowledge: {
      _internal_mutable_acknowledge()->::indiemotion::messages::Acknowledge::MergeFrom(from._internal_acknowledge());
      break;
    }
    case kListCameras: {
      _internal_mutable_list_cameras()->::indiemotion::messages::ListCameras::MergeFrom(from._internal_list_cameras());
      break;
    }
    case kMotionSetMode: {
      _internal_mutable_motion_set_mode()->::indiemotion::messages::MotionSetMode::MergeFrom(from._internal_motion_set_mode());
      break;
    }
    case kMotionGetMode: {
      _internal_mutable_motion_get_mode()->::indiemotion::messages::MotionGetMode::MergeFrom(from._internal_motion_get_mode());
      break;
    }
    case kMotionXform: {
      _internal_mutable_motion_xform()->::indiemotion::messages::MotionXForm::MergeFrom(from._internal_motion_xform());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:indiemotion.messages.ClientMessage)
}

inline void ClientMessage::SharedCtor() {
header_ = nullptr;
clear_has_payload();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:indiemotion.messages.ClientMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void ClientMessage::ArenaDtor(void* object) {
  ClientMessage* _this = reinterpret_cast< ClientMessage* >(object);
  (void)_this;
}
void ClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:indiemotion.messages.ClientMessage)
  switch (payload_case()) {
    case kAcknowledge: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.acknowledge_;
      }
      break;
    }
    case kListCameras: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.list_cameras_;
      }
      break;
    }
    case kMotionSetMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_set_mode_;
      }
      break;
    }
    case kMotionGetMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_get_mode_;
      }
      break;
    }
    case kMotionXform: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_xform_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.messages.ClientMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotion.messages.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.messages.Acknowledge acknowledge = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_acknowledge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.messages.ListCameras list_cameras = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_cameras(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.messages.MotionSetMode motion_set_mode = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_set_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.messages.MotionGetMode motion_get_mode = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_get_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.messages.MotionXForm motion_xform = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_xform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.messages.ClientMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotion.messages.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .indiemotion.messages.Acknowledge acknowledge = 20;
  if (_internal_has_acknowledge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::acknowledge(this), target, stream);
  }

  // .indiemotion.messages.ListCameras list_cameras = 30;
  if (_internal_has_list_cameras()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::list_cameras(this), target, stream);
  }

  // .indiemotion.messages.MotionSetMode motion_set_mode = 40;
  if (_internal_has_motion_set_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::motion_set_mode(this), target, stream);
  }

  // .indiemotion.messages.MotionGetMode motion_get_mode = 50;
  if (_internal_has_motion_get_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::motion_get_mode(this), target, stream);
  }

  // .indiemotion.messages.MotionXForm motion_xform = 60;
  if (_internal_has_motion_xform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::motion_xform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.messages.ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.messages.ClientMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotion.messages.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (payload_case()) {
    // .indiemotion.messages.Acknowledge acknowledge = 20;
    case kAcknowledge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.acknowledge_);
      break;
    }
    // .indiemotion.messages.ListCameras list_cameras = 30;
    case kListCameras: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.list_cameras_);
      break;
    }
    // .indiemotion.messages.MotionSetMode motion_set_mode = 40;
    case kMotionSetMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_set_mode_);
      break;
    }
    // .indiemotion.messages.MotionGetMode motion_get_mode = 50;
    case kMotionGetMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_get_mode_);
      break;
    }
    // .indiemotion.messages.MotionXForm motion_xform = 60;
    case kMotionXform: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_xform_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage::GetClassData() const { return &_class_data_; }

void ClientMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientMessage *>(to)->MergeFrom(
      static_cast<const ClientMessage &>(from));
}


void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.messages.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::indiemotion::messages::Header::MergeFrom(from._internal_header());
  }
  switch (from.payload_case()) {
    case kAcknowledge: {
      _internal_mutable_acknowledge()->::indiemotion::messages::Acknowledge::MergeFrom(from._internal_acknowledge());
      break;
    }
    case kListCameras: {
      _internal_mutable_list_cameras()->::indiemotion::messages::ListCameras::MergeFrom(from._internal_list_cameras());
      break;
    }
    case kMotionSetMode: {
      _internal_mutable_motion_set_mode()->::indiemotion::messages::MotionSetMode::MergeFrom(from._internal_motion_set_mode());
      break;
    }
    case kMotionGetMode: {
      _internal_mutable_motion_get_mode()->::indiemotion::messages::MotionGetMode::MergeFrom(from._internal_motion_get_mode());
      break;
    }
    case kMotionXform: {
      _internal_mutable_motion_xform()->::indiemotion::messages::MotionXForm::MergeFrom(from._internal_motion_xform());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.messages.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_indiemotion_2dproto_2fmessage_2eproto_getter, &descriptor_table_indiemotion_2dproto_2fmessage_2eproto_once,
      file_level_metadata_indiemotion_2dproto_2fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::indiemotion::messages::Header* Arena::CreateMaybeMessage< ::indiemotion::messages::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::messages::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::messages::ClientMessage* Arena::CreateMaybeMessage< ::indiemotion::messages::ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::messages::ClientMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
