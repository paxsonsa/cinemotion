// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payload_2ev1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payload_2ev1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payload_2ev1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payload_2ev1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2ev1_2eproto;
namespace indiemotion {
namespace protobuf {
namespace payloads {
namespace v1 {
class Acknowledge;
struct AcknowledgeDefaultTypeInternal;
extern AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class CameraList;
struct CameraListDefaultTypeInternal;
extern CameraListDefaultTypeInternal _CameraList_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class GetCameraList;
struct GetCameraListDefaultTypeInternal;
extern GetCameraListDefaultTypeInternal _GetCameraList_default_instance_;
class MotionActiveMode;
struct MotionActiveModeDefaultTypeInternal;
extern MotionActiveModeDefaultTypeInternal _MotionActiveMode_default_instance_;
class MotionGetMode;
struct MotionGetModeDefaultTypeInternal;
extern MotionGetModeDefaultTypeInternal _MotionGetMode_default_instance_;
class MotionSetMode;
struct MotionSetModeDefaultTypeInternal;
extern MotionSetModeDefaultTypeInternal _MotionSetMode_default_instance_;
class MotionXForm;
struct MotionXFormDefaultTypeInternal;
extern MotionXFormDefaultTypeInternal _MotionXForm_default_instance_;
class SessionProperties;
struct SessionPropertiesDefaultTypeInternal;
extern SessionPropertiesDefaultTypeInternal _SessionProperties_default_instance_;
class SessionServerInfo;
struct SessionServerInfoDefaultTypeInternal;
extern SessionServerInfoDefaultTypeInternal _SessionServerInfo_default_instance_;
class SessionShutdown;
struct SessionShutdownDefaultTypeInternal;
extern SessionShutdownDefaultTypeInternal _SessionShutdown_default_instance_;
class SessionStart;
struct SessionStartDefaultTypeInternal;
extern SessionStartDefaultTypeInternal _SessionStart_default_instance_;
class SetActiveCamera;
struct SetActiveCameraDefaultTypeInternal;
extern SetActiveCameraDefaultTypeInternal _SetActiveCamera_default_instance_;
class XFormData;
struct XFormDataDefaultTypeInternal;
extern XFormDataDefaultTypeInternal _XFormData_default_instance_;
}  // namespace v1
}  // namespace payloads
}  // namespace protobuf
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotion::protobuf::payloads::v1::Acknowledge* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::Acknowledge>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::Camera* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::Camera>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::CameraList* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::CameraList>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::Error* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::Error>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::GetCameraList* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::GetCameraList>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::MotionActiveMode* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::MotionActiveMode>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::MotionGetMode* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::MotionGetMode>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::MotionSetMode* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::MotionSetMode>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::MotionXForm* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::MotionXForm>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::SessionProperties* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::SessionProperties>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::SessionServerInfo* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::SessionServerInfo>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::SessionShutdown* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::SessionShutdown>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::SessionStart* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::SessionStart>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::SetActiveCamera* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::SetActiveCamera>(Arena*);
template<> ::indiemotion::protobuf::payloads::v1::XFormData* Arena::CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::XFormData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotion {
namespace protobuf {
namespace payloads {
namespace v1 {

enum MotionMode : int {
  Off = 0,
  Live = 1,
  Recording = 2,
  MotionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MotionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MotionMode_IsValid(int value);
constexpr MotionMode MotionMode_MIN = Off;
constexpr MotionMode MotionMode_MAX = Recording;
constexpr int MotionMode_ARRAYSIZE = MotionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionMode_descriptor();
template<typename T>
inline const std::string& MotionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionMode_descriptor(), enum_t_value);
}
inline bool MotionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionMode>(
    MotionMode_descriptor(), name, value);
}
// ===================================================================

class Acknowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.Acknowledge) */ {
 public:
  inline Acknowledge() : Acknowledge(nullptr) {}
  ~Acknowledge() override;
  explicit constexpr Acknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Acknowledge(const Acknowledge& from);
  Acknowledge(Acknowledge&& from) noexcept
    : Acknowledge() {
    *this = ::std::move(from);
  }

  inline Acknowledge& operator=(const Acknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledge& operator=(Acknowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Acknowledge* internal_default_instance() {
    return reinterpret_cast<const Acknowledge*>(
               &_Acknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Acknowledge& a, Acknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acknowledge* New() const final {
    return new Acknowledge();
  }

  Acknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acknowledge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Acknowledge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Acknowledge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.Acknowledge";
  }
  protected:
  explicit Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.Acknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return new Error();
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 10,
    kMessageFieldNumber = 11,
    kIsFatalFieldNumber = 12,
  };
  // string type = 10;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string message = 11;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool is_fatal = 12;
  void clear_is_fatal();
  bool is_fatal() const;
  void set_is_fatal(bool value);
  private:
  bool _internal_is_fatal() const;
  void _internal_set_is_fatal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool is_fatal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class GetCameraList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.GetCameraList) */ {
 public:
  inline GetCameraList() : GetCameraList(nullptr) {}
  ~GetCameraList() override;
  explicit constexpr GetCameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCameraList(const GetCameraList& from);
  GetCameraList(GetCameraList&& from) noexcept
    : GetCameraList() {
    *this = ::std::move(from);
  }

  inline GetCameraList& operator=(const GetCameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCameraList& operator=(GetCameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCameraList* internal_default_instance() {
    return reinterpret_cast<const GetCameraList*>(
               &_GetCameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetCameraList& a, GetCameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCameraList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCameraList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCameraList* New() const final {
    return new GetCameraList();
  }

  GetCameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCameraList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCameraList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCameraList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCameraList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.GetCameraList";
  }
  protected:
  explicit GetCameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.GetCameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SetActiveCamera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.SetActiveCamera) */ {
 public:
  inline SetActiveCamera() : SetActiveCamera(nullptr) {}
  ~SetActiveCamera() override;
  explicit constexpr SetActiveCamera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetActiveCamera(const SetActiveCamera& from);
  SetActiveCamera(SetActiveCamera&& from) noexcept
    : SetActiveCamera() {
    *this = ::std::move(from);
  }

  inline SetActiveCamera& operator=(const SetActiveCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActiveCamera& operator=(SetActiveCamera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActiveCamera& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActiveCamera* internal_default_instance() {
    return reinterpret_cast<const SetActiveCamera*>(
               &_SetActiveCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetActiveCamera& a, SetActiveCamera& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActiveCamera* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActiveCamera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetActiveCamera* New() const final {
    return new SetActiveCamera();
  }

  SetActiveCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetActiveCamera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetActiveCamera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetActiveCamera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActiveCamera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.SetActiveCamera";
  }
  protected:
  explicit SetActiveCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 10,
  };
  // string camera_id = 10;
  void clear_camera_id();
  const std::string& camera_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_camera_id();
  void set_allocated_camera_id(std::string* camera_id);
  private:
  const std::string& _internal_camera_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_id(const std::string& value);
  std::string* _internal_mutable_camera_id();
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.SetActiveCamera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return new Camera();
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Camera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 10,
  };
  // string id = 10;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class CameraList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.CameraList) */ {
 public:
  inline CameraList() : CameraList(nullptr) {}
  ~CameraList() override;
  explicit constexpr CameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraList(const CameraList& from);
  CameraList(CameraList&& from) noexcept
    : CameraList() {
    *this = ::std::move(from);
  }

  inline CameraList& operator=(const CameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraList& operator=(CameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraList* internal_default_instance() {
    return reinterpret_cast<const CameraList*>(
               &_CameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CameraList& a, CameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraList* New() const final {
    return new CameraList();
  }

  CameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.CameraList";
  }
  protected:
  explicit CameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 1,
  };
  // repeated .indiemotion.protobuf.payloads.v1.Camera cameras = 1;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::indiemotion::protobuf::payloads::v1::Camera* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotion::protobuf::payloads::v1::Camera >*
      mutable_cameras();
  private:
  const ::indiemotion::protobuf::payloads::v1::Camera& _internal_cameras(int index) const;
  ::indiemotion::protobuf::payloads::v1::Camera* _internal_add_cameras();
  public:
  const ::indiemotion::protobuf::payloads::v1::Camera& cameras(int index) const;
  ::indiemotion::protobuf::payloads::v1::Camera* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotion::protobuf::payloads::v1::Camera >&
      cameras() const;

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.CameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotion::protobuf::payloads::v1::Camera > cameras_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SessionServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.SessionServerInfo) */ {
 public:
  inline SessionServerInfo() : SessionServerInfo(nullptr) {}
  ~SessionServerInfo() override;
  explicit constexpr SessionServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionServerInfo(const SessionServerInfo& from);
  SessionServerInfo(SessionServerInfo&& from) noexcept
    : SessionServerInfo() {
    *this = ::std::move(from);
  }

  inline SessionServerInfo& operator=(const SessionServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionServerInfo& operator=(SessionServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionServerInfo* internal_default_instance() {
    return reinterpret_cast<const SessionServerInfo*>(
               &_SessionServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SessionServerInfo& a, SessionServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionServerInfo* New() const final {
    return new SessionServerInfo();
  }

  SessionServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionServerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.SessionServerInfo";
  }
  protected:
  explicit SessionServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 10,
    kApiVersionFieldNumber = 20,
    kFeaturesFieldNumber = 30,
  };
  // string id = 10;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string api_version = 20;
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // uint32 features = 30;
  void clear_features();
  ::PROTOBUF_NAMESPACE_ID::uint32 features() const;
  void set_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_features() const;
  void _internal_set_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.SessionServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SessionProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.SessionProperties) */ {
 public:
  inline SessionProperties() : SessionProperties(nullptr) {}
  ~SessionProperties() override;
  explicit constexpr SessionProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionProperties(const SessionProperties& from);
  SessionProperties(SessionProperties&& from) noexcept
    : SessionProperties() {
    *this = ::std::move(from);
  }

  inline SessionProperties& operator=(const SessionProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionProperties& operator=(SessionProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionProperties* internal_default_instance() {
    return reinterpret_cast<const SessionProperties*>(
               &_SessionProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SessionProperties& a, SessionProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionProperties* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionProperties* New() const final {
    return new SessionProperties();
  }

  SessionProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionProperties& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.SessionProperties";
  }
  protected:
  explicit SessionProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 10,
    kApiVersionFieldNumber = 20,
  };
  // string session_id = 10;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string api_version = 20;
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.SessionProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SessionStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.SessionStart) */ {
 public:
  inline SessionStart() : SessionStart(nullptr) {}
  ~SessionStart() override;
  explicit constexpr SessionStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionStart(const SessionStart& from);
  SessionStart(SessionStart&& from) noexcept
    : SessionStart() {
    *this = ::std::move(from);
  }

  inline SessionStart& operator=(const SessionStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionStart& operator=(SessionStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionStart* internal_default_instance() {
    return reinterpret_cast<const SessionStart*>(
               &_SessionStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SessionStart& a, SessionStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionStart* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionStart* New() const final {
    return new SessionStart();
  }

  SessionStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.SessionStart";
  }
  protected:
  explicit SessionStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionPropertiesFieldNumber = 10,
  };
  // .indiemotion.protobuf.payloads.v1.SessionProperties session_properties = 10;
  bool has_session_properties() const;
  private:
  bool _internal_has_session_properties() const;
  public:
  void clear_session_properties();
  const ::indiemotion::protobuf::payloads::v1::SessionProperties& session_properties() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::SessionProperties* release_session_properties();
  ::indiemotion::protobuf::payloads::v1::SessionProperties* mutable_session_properties();
  void set_allocated_session_properties(::indiemotion::protobuf::payloads::v1::SessionProperties* session_properties);
  private:
  const ::indiemotion::protobuf::payloads::v1::SessionProperties& _internal_session_properties() const;
  ::indiemotion::protobuf::payloads::v1::SessionProperties* _internal_mutable_session_properties();
  public:
  void unsafe_arena_set_allocated_session_properties(
      ::indiemotion::protobuf::payloads::v1::SessionProperties* session_properties);
  ::indiemotion::protobuf::payloads::v1::SessionProperties* unsafe_arena_release_session_properties();

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.SessionStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::protobuf::payloads::v1::SessionProperties* session_properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SessionShutdown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.SessionShutdown) */ {
 public:
  inline SessionShutdown() : SessionShutdown(nullptr) {}
  ~SessionShutdown() override;
  explicit constexpr SessionShutdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionShutdown(const SessionShutdown& from);
  SessionShutdown(SessionShutdown&& from) noexcept
    : SessionShutdown() {
    *this = ::std::move(from);
  }

  inline SessionShutdown& operator=(const SessionShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionShutdown& operator=(SessionShutdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionShutdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionShutdown* internal_default_instance() {
    return reinterpret_cast<const SessionShutdown*>(
               &_SessionShutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SessionShutdown& a, SessionShutdown& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionShutdown* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionShutdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionShutdown* New() const final {
    return new SessionShutdown();
  }

  SessionShutdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionShutdown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionShutdown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionShutdown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionShutdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.SessionShutdown";
  }
  protected:
  explicit SessionShutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.SessionShutdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class MotionActiveMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.MotionActiveMode) */ {
 public:
  inline MotionActiveMode() : MotionActiveMode(nullptr) {}
  ~MotionActiveMode() override;
  explicit constexpr MotionActiveMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionActiveMode(const MotionActiveMode& from);
  MotionActiveMode(MotionActiveMode&& from) noexcept
    : MotionActiveMode() {
    *this = ::std::move(from);
  }

  inline MotionActiveMode& operator=(const MotionActiveMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionActiveMode& operator=(MotionActiveMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionActiveMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionActiveMode* internal_default_instance() {
    return reinterpret_cast<const MotionActiveMode*>(
               &_MotionActiveMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MotionActiveMode& a, MotionActiveMode& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionActiveMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionActiveMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionActiveMode* New() const final {
    return new MotionActiveMode();
  }

  MotionActiveMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionActiveMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionActiveMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionActiveMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionActiveMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.MotionActiveMode";
  }
  protected:
  explicit MotionActiveMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .indiemotion.protobuf.payloads.v1.MotionMode mode = 1;
  void clear_mode();
  ::indiemotion::protobuf::payloads::v1::MotionMode mode() const;
  void set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value);
  private:
  ::indiemotion::protobuf::payloads::v1::MotionMode _internal_mode() const;
  void _internal_set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.MotionActiveMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class MotionSetMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.MotionSetMode) */ {
 public:
  inline MotionSetMode() : MotionSetMode(nullptr) {}
  ~MotionSetMode() override;
  explicit constexpr MotionSetMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionSetMode(const MotionSetMode& from);
  MotionSetMode(MotionSetMode&& from) noexcept
    : MotionSetMode() {
    *this = ::std::move(from);
  }

  inline MotionSetMode& operator=(const MotionSetMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionSetMode& operator=(MotionSetMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionSetMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionSetMode* internal_default_instance() {
    return reinterpret_cast<const MotionSetMode*>(
               &_MotionSetMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MotionSetMode& a, MotionSetMode& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionSetMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionSetMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionSetMode* New() const final {
    return new MotionSetMode();
  }

  MotionSetMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionSetMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionSetMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionSetMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionSetMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.MotionSetMode";
  }
  protected:
  explicit MotionSetMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .indiemotion.protobuf.payloads.v1.MotionMode mode = 1;
  void clear_mode();
  ::indiemotion::protobuf::payloads::v1::MotionMode mode() const;
  void set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value);
  private:
  ::indiemotion::protobuf::payloads::v1::MotionMode _internal_mode() const;
  void _internal_set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.MotionSetMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class MotionGetMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.MotionGetMode) */ {
 public:
  inline MotionGetMode() : MotionGetMode(nullptr) {}
  ~MotionGetMode() override;
  explicit constexpr MotionGetMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionGetMode(const MotionGetMode& from);
  MotionGetMode(MotionGetMode&& from) noexcept
    : MotionGetMode() {
    *this = ::std::move(from);
  }

  inline MotionGetMode& operator=(const MotionGetMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionGetMode& operator=(MotionGetMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionGetMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionGetMode* internal_default_instance() {
    return reinterpret_cast<const MotionGetMode*>(
               &_MotionGetMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MotionGetMode& a, MotionGetMode& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionGetMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionGetMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionGetMode* New() const final {
    return new MotionGetMode();
  }

  MotionGetMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionGetMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionGetMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionGetMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionGetMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.MotionGetMode";
  }
  protected:
  explicit MotionGetMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.MotionGetMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class XFormData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.XFormData) */ {
 public:
  inline XFormData() : XFormData(nullptr) {}
  ~XFormData() override;
  explicit constexpr XFormData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XFormData(const XFormData& from);
  XFormData(XFormData&& from) noexcept
    : XFormData() {
    *this = ::std::move(from);
  }

  inline XFormData& operator=(const XFormData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XFormData& operator=(XFormData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XFormData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XFormData* internal_default_instance() {
    return reinterpret_cast<const XFormData*>(
               &_XFormData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(XFormData& a, XFormData& b) {
    a.Swap(&b);
  }
  inline void Swap(XFormData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XFormData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XFormData* New() const final {
    return new XFormData();
  }

  XFormData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XFormData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XFormData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XFormData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XFormData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.XFormData";
  }
  protected:
  explicit XFormData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.XFormData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// -------------------------------------------------------------------

class MotionXForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.payloads.v1.MotionXForm) */ {
 public:
  inline MotionXForm() : MotionXForm(nullptr) {}
  ~MotionXForm() override;
  explicit constexpr MotionXForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionXForm(const MotionXForm& from);
  MotionXForm(MotionXForm&& from) noexcept
    : MotionXForm() {
    *this = ::std::move(from);
  }

  inline MotionXForm& operator=(const MotionXForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionXForm& operator=(MotionXForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionXForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionXForm* internal_default_instance() {
    return reinterpret_cast<const MotionXForm*>(
               &_MotionXForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MotionXForm& a, MotionXForm& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionXForm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionXForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionXForm* New() const final {
    return new MotionXForm();
  }

  MotionXForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionXForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionXForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionXForm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionXForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.payloads.v1.MotionXForm";
  }
  protected:
  explicit MotionXForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .indiemotion.protobuf.payloads.v1.XFormData translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::indiemotion::protobuf::payloads::v1::XFormData& translation() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::XFormData* release_translation();
  ::indiemotion::protobuf::payloads::v1::XFormData* mutable_translation();
  void set_allocated_translation(::indiemotion::protobuf::payloads::v1::XFormData* translation);
  private:
  const ::indiemotion::protobuf::payloads::v1::XFormData& _internal_translation() const;
  ::indiemotion::protobuf::payloads::v1::XFormData* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::indiemotion::protobuf::payloads::v1::XFormData* translation);
  ::indiemotion::protobuf::payloads::v1::XFormData* unsafe_arena_release_translation();

  // .indiemotion.protobuf.payloads.v1.XFormData orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::indiemotion::protobuf::payloads::v1::XFormData& orientation() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::XFormData* release_orientation();
  ::indiemotion::protobuf::payloads::v1::XFormData* mutable_orientation();
  void set_allocated_orientation(::indiemotion::protobuf::payloads::v1::XFormData* orientation);
  private:
  const ::indiemotion::protobuf::payloads::v1::XFormData& _internal_orientation() const;
  ::indiemotion::protobuf::payloads::v1::XFormData* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::indiemotion::protobuf::payloads::v1::XFormData* orientation);
  ::indiemotion::protobuf::payloads::v1::XFormData* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.payloads.v1.MotionXForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::protobuf::payloads::v1::XFormData* translation_;
  ::indiemotion::protobuf::payloads::v1::XFormData* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2ev1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Acknowledge

// bool ok = 1;
inline void Acknowledge::clear_ok() {
  ok_ = false;
}
inline bool Acknowledge::_internal_ok() const {
  return ok_;
}
inline bool Acknowledge::ok() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.Acknowledge.ok)
  return _internal_ok();
}
inline void Acknowledge::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Acknowledge::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.Acknowledge.ok)
}

// string message = 2;
inline void Acknowledge::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Acknowledge::message() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.Acknowledge.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Acknowledge::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.Acknowledge.message)
}
inline std::string* Acknowledge::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.Acknowledge.message)
  return _s;
}
inline const std::string& Acknowledge::_internal_message() const {
  return message_.Get();
}
inline void Acknowledge::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Acknowledge::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Acknowledge::release_message() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.Acknowledge.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Acknowledge::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.Acknowledge.message)
}

// -------------------------------------------------------------------

// Error

// string type = 10;
inline void Error::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Error::type() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.Error.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.Error.type)
}
inline std::string* Error::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.Error.type)
  return _s;
}
inline const std::string& Error::_internal_type() const {
  return type_.Get();
}
inline void Error::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_type() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.Error.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.Error.type)
}

// string message = 11;
inline void Error::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.Error.message)
}
inline std::string* Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.Error.message)
  return _s;
}
inline const std::string& Error::_internal_message() const {
  return message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.Error.message)
}

// bool is_fatal = 12;
inline void Error::clear_is_fatal() {
  is_fatal_ = false;
}
inline bool Error::_internal_is_fatal() const {
  return is_fatal_;
}
inline bool Error::is_fatal() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.Error.is_fatal)
  return _internal_is_fatal();
}
inline void Error::_internal_set_is_fatal(bool value) {
  
  is_fatal_ = value;
}
inline void Error::set_is_fatal(bool value) {
  _internal_set_is_fatal(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.Error.is_fatal)
}

// -------------------------------------------------------------------

// GetCameraList

// -------------------------------------------------------------------

// SetActiveCamera

// string camera_id = 10;
inline void SetActiveCamera::clear_camera_id() {
  camera_id_.ClearToEmpty();
}
inline const std::string& SetActiveCamera::camera_id() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SetActiveCamera.camera_id)
  return _internal_camera_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetActiveCamera::set_camera_id(ArgT0&& arg0, ArgT... args) {
 
 camera_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.SetActiveCamera.camera_id)
}
inline std::string* SetActiveCamera::mutable_camera_id() {
  std::string* _s = _internal_mutable_camera_id();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.SetActiveCamera.camera_id)
  return _s;
}
inline const std::string& SetActiveCamera::_internal_camera_id() const {
  return camera_id_.Get();
}
inline void SetActiveCamera::_internal_set_camera_id(const std::string& value) {
  
  camera_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetActiveCamera::_internal_mutable_camera_id() {
  
  return camera_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetActiveCamera::release_camera_id() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.SetActiveCamera.camera_id)
  return camera_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetActiveCamera::set_allocated_camera_id(std::string* camera_id) {
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.SetActiveCamera.camera_id)
}

// -------------------------------------------------------------------

// Camera

// string id = 10;
inline void Camera::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Camera::id() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.Camera.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.Camera.id)
}
inline std::string* Camera::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.Camera.id)
  return _s;
}
inline const std::string& Camera::_internal_id() const {
  return id_.Get();
}
inline void Camera::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_id() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.Camera.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Camera::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.Camera.id)
}

// -------------------------------------------------------------------

// CameraList

// repeated .indiemotion.protobuf.payloads.v1.Camera cameras = 1;
inline int CameraList::_internal_cameras_size() const {
  return cameras_.size();
}
inline int CameraList::cameras_size() const {
  return _internal_cameras_size();
}
inline void CameraList::clear_cameras() {
  cameras_.Clear();
}
inline ::indiemotion::protobuf::payloads::v1::Camera* CameraList::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.CameraList.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotion::protobuf::payloads::v1::Camera >*
CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:indiemotion.protobuf.payloads.v1.CameraList.cameras)
  return &cameras_;
}
inline const ::indiemotion::protobuf::payloads::v1::Camera& CameraList::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::indiemotion::protobuf::payloads::v1::Camera& CameraList::cameras(int index) const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.CameraList.cameras)
  return _internal_cameras(index);
}
inline ::indiemotion::protobuf::payloads::v1::Camera* CameraList::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::indiemotion::protobuf::payloads::v1::Camera* CameraList::add_cameras() {
  ::indiemotion::protobuf::payloads::v1::Camera* _add = _internal_add_cameras();
  // @@protoc_insertion_point(field_add:indiemotion.protobuf.payloads.v1.CameraList.cameras)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotion::protobuf::payloads::v1::Camera >&
CameraList::cameras() const {
  // @@protoc_insertion_point(field_list:indiemotion.protobuf.payloads.v1.CameraList.cameras)
  return cameras_;
}

// -------------------------------------------------------------------

// SessionServerInfo

// string id = 10;
inline void SessionServerInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SessionServerInfo::id() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SessionServerInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionServerInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.SessionServerInfo.id)
}
inline std::string* SessionServerInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.SessionServerInfo.id)
  return _s;
}
inline const std::string& SessionServerInfo::_internal_id() const {
  return id_.Get();
}
inline void SessionServerInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionServerInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionServerInfo::release_id() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.SessionServerInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionServerInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.SessionServerInfo.id)
}

// string api_version = 20;
inline void SessionServerInfo::clear_api_version() {
  api_version_.ClearToEmpty();
}
inline const std::string& SessionServerInfo::api_version() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SessionServerInfo.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionServerInfo::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.SessionServerInfo.api_version)
}
inline std::string* SessionServerInfo::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.SessionServerInfo.api_version)
  return _s;
}
inline const std::string& SessionServerInfo::_internal_api_version() const {
  return api_version_.Get();
}
inline void SessionServerInfo::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionServerInfo::_internal_mutable_api_version() {
  
  return api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionServerInfo::release_api_version() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.SessionServerInfo.api_version)
  return api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionServerInfo::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.SessionServerInfo.api_version)
}

// uint32 features = 30;
inline void SessionServerInfo::clear_features() {
  features_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionServerInfo::_internal_features() const {
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionServerInfo::features() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SessionServerInfo.features)
  return _internal_features();
}
inline void SessionServerInfo::_internal_set_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  features_ = value;
}
inline void SessionServerInfo::set_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_features(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.SessionServerInfo.features)
}

// -------------------------------------------------------------------

// SessionProperties

// string session_id = 10;
inline void SessionProperties::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& SessionProperties::session_id() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SessionProperties.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionProperties::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.SessionProperties.session_id)
}
inline std::string* SessionProperties::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.SessionProperties.session_id)
  return _s;
}
inline const std::string& SessionProperties::_internal_session_id() const {
  return session_id_.Get();
}
inline void SessionProperties::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionProperties::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionProperties::release_session_id() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.SessionProperties.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionProperties::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.SessionProperties.session_id)
}

// string api_version = 20;
inline void SessionProperties::clear_api_version() {
  api_version_.ClearToEmpty();
}
inline const std::string& SessionProperties::api_version() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SessionProperties.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionProperties::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.SessionProperties.api_version)
}
inline std::string* SessionProperties::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.SessionProperties.api_version)
  return _s;
}
inline const std::string& SessionProperties::_internal_api_version() const {
  return api_version_.Get();
}
inline void SessionProperties::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionProperties::_internal_mutable_api_version() {
  
  return api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionProperties::release_api_version() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.SessionProperties.api_version)
  return api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionProperties::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.SessionProperties.api_version)
}

// -------------------------------------------------------------------

// SessionStart

// .indiemotion.protobuf.payloads.v1.SessionProperties session_properties = 10;
inline bool SessionStart::_internal_has_session_properties() const {
  return this != internal_default_instance() && session_properties_ != nullptr;
}
inline bool SessionStart::has_session_properties() const {
  return _internal_has_session_properties();
}
inline void SessionStart::clear_session_properties() {
  if (GetArenaForAllocation() == nullptr && session_properties_ != nullptr) {
    delete session_properties_;
  }
  session_properties_ = nullptr;
}
inline const ::indiemotion::protobuf::payloads::v1::SessionProperties& SessionStart::_internal_session_properties() const {
  const ::indiemotion::protobuf::payloads::v1::SessionProperties* p = session_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::payloads::v1::SessionProperties&>(
      ::indiemotion::protobuf::payloads::v1::_SessionProperties_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::SessionProperties& SessionStart::session_properties() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.SessionStart.session_properties)
  return _internal_session_properties();
}
inline void SessionStart::unsafe_arena_set_allocated_session_properties(
    ::indiemotion::protobuf::payloads::v1::SessionProperties* session_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_properties_);
  }
  session_properties_ = session_properties;
  if (session_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.payloads.v1.SessionStart.session_properties)
}
inline ::indiemotion::protobuf::payloads::v1::SessionProperties* SessionStart::release_session_properties() {
  
  ::indiemotion::protobuf::payloads::v1::SessionProperties* temp = session_properties_;
  session_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::payloads::v1::SessionProperties* SessionStart::unsafe_arena_release_session_properties() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.SessionStart.session_properties)
  
  ::indiemotion::protobuf::payloads::v1::SessionProperties* temp = session_properties_;
  session_properties_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::payloads::v1::SessionProperties* SessionStart::_internal_mutable_session_properties() {
  
  if (session_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::SessionProperties>(GetArenaForAllocation());
    session_properties_ = p;
  }
  return session_properties_;
}
inline ::indiemotion::protobuf::payloads::v1::SessionProperties* SessionStart::mutable_session_properties() {
  ::indiemotion::protobuf::payloads::v1::SessionProperties* _msg = _internal_mutable_session_properties();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.SessionStart.session_properties)
  return _msg;
}
inline void SessionStart::set_allocated_session_properties(::indiemotion::protobuf::payloads::v1::SessionProperties* session_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete session_properties_;
  }
  if (session_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::payloads::v1::SessionProperties>::GetOwningArena(session_properties);
    if (message_arena != submessage_arena) {
      session_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_properties, submessage_arena);
    }
    
  } else {
    
  }
  session_properties_ = session_properties;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.SessionStart.session_properties)
}

// -------------------------------------------------------------------

// SessionShutdown

// -------------------------------------------------------------------

// MotionActiveMode

// .indiemotion.protobuf.payloads.v1.MotionMode mode = 1;
inline void MotionActiveMode::clear_mode() {
  mode_ = 0;
}
inline ::indiemotion::protobuf::payloads::v1::MotionMode MotionActiveMode::_internal_mode() const {
  return static_cast< ::indiemotion::protobuf::payloads::v1::MotionMode >(mode_);
}
inline ::indiemotion::protobuf::payloads::v1::MotionMode MotionActiveMode::mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.MotionActiveMode.mode)
  return _internal_mode();
}
inline void MotionActiveMode::_internal_set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value) {
  
  mode_ = value;
}
inline void MotionActiveMode::set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.MotionActiveMode.mode)
}

// -------------------------------------------------------------------

// MotionSetMode

// .indiemotion.protobuf.payloads.v1.MotionMode mode = 1;
inline void MotionSetMode::clear_mode() {
  mode_ = 0;
}
inline ::indiemotion::protobuf::payloads::v1::MotionMode MotionSetMode::_internal_mode() const {
  return static_cast< ::indiemotion::protobuf::payloads::v1::MotionMode >(mode_);
}
inline ::indiemotion::protobuf::payloads::v1::MotionMode MotionSetMode::mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.MotionSetMode.mode)
  return _internal_mode();
}
inline void MotionSetMode::_internal_set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value) {
  
  mode_ = value;
}
inline void MotionSetMode::set_mode(::indiemotion::protobuf::payloads::v1::MotionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.MotionSetMode.mode)
}

// -------------------------------------------------------------------

// MotionGetMode

// -------------------------------------------------------------------

// XFormData

// double x = 1;
inline void XFormData::clear_x() {
  x_ = 0;
}
inline double XFormData::_internal_x() const {
  return x_;
}
inline double XFormData::x() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.XFormData.x)
  return _internal_x();
}
inline void XFormData::_internal_set_x(double value) {
  
  x_ = value;
}
inline void XFormData::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.XFormData.x)
}

// double y = 2;
inline void XFormData::clear_y() {
  y_ = 0;
}
inline double XFormData::_internal_y() const {
  return y_;
}
inline double XFormData::y() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.XFormData.y)
  return _internal_y();
}
inline void XFormData::_internal_set_y(double value) {
  
  y_ = value;
}
inline void XFormData::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.XFormData.y)
}

// double z = 3;
inline void XFormData::clear_z() {
  z_ = 0;
}
inline double XFormData::_internal_z() const {
  return z_;
}
inline double XFormData::z() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.XFormData.z)
  return _internal_z();
}
inline void XFormData::_internal_set_z(double value) {
  
  z_ = value;
}
inline void XFormData::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.payloads.v1.XFormData.z)
}

// -------------------------------------------------------------------

// MotionXForm

// .indiemotion.protobuf.payloads.v1.XFormData translation = 1;
inline bool MotionXForm::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool MotionXForm::has_translation() const {
  return _internal_has_translation();
}
inline void MotionXForm::clear_translation() {
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::indiemotion::protobuf::payloads::v1::XFormData& MotionXForm::_internal_translation() const {
  const ::indiemotion::protobuf::payloads::v1::XFormData* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::payloads::v1::XFormData&>(
      ::indiemotion::protobuf::payloads::v1::_XFormData_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::XFormData& MotionXForm::translation() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.MotionXForm.translation)
  return _internal_translation();
}
inline void MotionXForm::unsafe_arena_set_allocated_translation(
    ::indiemotion::protobuf::payloads::v1::XFormData* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.payloads.v1.MotionXForm.translation)
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::release_translation() {
  
  ::indiemotion::protobuf::payloads::v1::XFormData* temp = translation_;
  translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.MotionXForm.translation)
  
  ::indiemotion::protobuf::payloads::v1::XFormData* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::XFormData>(GetArenaForAllocation());
    translation_ = p;
  }
  return translation_;
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::mutable_translation() {
  ::indiemotion::protobuf::payloads::v1::XFormData* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.MotionXForm.translation)
  return _msg;
}
inline void MotionXForm::set_allocated_translation(::indiemotion::protobuf::payloads::v1::XFormData* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::payloads::v1::XFormData>::GetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.MotionXForm.translation)
}

// .indiemotion.protobuf.payloads.v1.XFormData orientation = 2;
inline bool MotionXForm::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool MotionXForm::has_orientation() const {
  return _internal_has_orientation();
}
inline void MotionXForm::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::indiemotion::protobuf::payloads::v1::XFormData& MotionXForm::_internal_orientation() const {
  const ::indiemotion::protobuf::payloads::v1::XFormData* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::payloads::v1::XFormData&>(
      ::indiemotion::protobuf::payloads::v1::_XFormData_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::XFormData& MotionXForm::orientation() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.payloads.v1.MotionXForm.orientation)
  return _internal_orientation();
}
inline void MotionXForm::unsafe_arena_set_allocated_orientation(
    ::indiemotion::protobuf::payloads::v1::XFormData* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.payloads.v1.MotionXForm.orientation)
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::release_orientation() {
  
  ::indiemotion::protobuf::payloads::v1::XFormData* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.payloads.v1.MotionXForm.orientation)
  
  ::indiemotion::protobuf::payloads::v1::XFormData* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::payloads::v1::XFormData>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::indiemotion::protobuf::payloads::v1::XFormData* MotionXForm::mutable_orientation() {
  ::indiemotion::protobuf::payloads::v1::XFormData* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.payloads.v1.MotionXForm.orientation)
  return _msg;
}
inline void MotionXForm::set_allocated_orientation(::indiemotion::protobuf::payloads::v1::XFormData* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::payloads::v1::XFormData>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.payloads.v1.MotionXForm.orientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace payloads
}  // namespace protobuf
}  // namespace indiemotion

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::indiemotion::protobuf::payloads::v1::MotionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::indiemotion::protobuf::payloads::v1::MotionMode>() {
  return ::indiemotion::protobuf::payloads::v1::MotionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payload_2ev1_2eproto
