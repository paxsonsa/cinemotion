// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: responses.proto

#include "responses.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace indiemotion {
namespace protobuf {
namespace reponses {
constexpr ServerResponse::ServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct ServerResponseDefaultTypeInternal {
  constexpr ServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerResponseDefaultTypeInternal() {}
  union {
    ServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
constexpr Acknowledge::Acknowledge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ok_(false){}
struct AcknowledgeDefaultTypeInternal {
  constexpr AcknowledgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcknowledgeDefaultTypeInternal() {}
  union {
    Acknowledge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
constexpr CameraList::CameraList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camera_(){}
struct CameraListDefaultTypeInternal {
  constexpr CameraListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraListDefaultTypeInternal() {}
  union {
    CameraList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraListDefaultTypeInternal _CameraList_default_instance_;
constexpr InitializeSession::InitializeSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , apiversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , features_(0u){}
struct InitializeSessionDefaultTypeInternal {
  constexpr InitializeSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeSessionDefaultTypeInternal() {}
  union {
    InitializeSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeSessionDefaultTypeInternal _InitializeSession_default_instance_;
constexpr MotionMode::MotionMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MotionModeDefaultTypeInternal {
  constexpr MotionModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionModeDefaultTypeInternal() {}
  union {
    MotionMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionModeDefaultTypeInternal _MotionMode_default_instance_;
}  // namespace reponses
}  // namespace protobuf
}  // namespace indiemotion
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_responses_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_responses_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_responses_2eproto = nullptr;

const uint32_t TableStruct_responses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::ServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::ServerResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::ServerResponse, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::ServerResponse, payload_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::Acknowledge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::Acknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::Acknowledge, ok_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::Acknowledge, message_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::CameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::CameraList, camera_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::InitializeSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::InitializeSession, name_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::InitializeSession, apiversion_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::InitializeSession, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::MotionMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::reponses::MotionMode, mode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::indiemotion::protobuf::reponses::ServerResponse)},
  { 9, 17, -1, sizeof(::indiemotion::protobuf::reponses::Acknowledge)},
  { 19, -1, -1, sizeof(::indiemotion::protobuf::reponses::CameraList)},
  { 26, -1, -1, sizeof(::indiemotion::protobuf::reponses::InitializeSession)},
  { 35, -1, -1, sizeof(::indiemotion::protobuf::reponses::MotionMode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::reponses::_ServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::reponses::_Acknowledge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::reponses::_CameraList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::reponses::_InitializeSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::reponses::_MotionMode_default_instance_),
};

const char descriptor_table_protodef_responses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017responses.proto\022\035indiemotion.protobuf."
  "reponses\032\020transports.proto\"\226\001\n\016ServerRes"
  "ponse\0226\n\006header\030\001 \001(\0132&.indiemotion.prot"
  "obuf.transport.Header\022A\n\013acknowledge\030\024 \001"
  "(\0132*.indiemotion.protobuf.reponses.Ackno"
  "wledgeH\000B\t\n\007payload\";\n\013Acknowledge\022\n\n\002ok"
  "\030\001 \001(\010\022\024\n\007message\030\002 \001(\tH\000\210\001\001B\n\n\010_message"
  "\"\034\n\nCameraList\022\016\n\006camera\030\001 \003(\t\"G\n\021Initia"
  "lizeSession\022\014\n\004name\030\n \001(\t\022\022\n\napiVersion\030"
  "\024 \001(\t\022\020\n\010features\030\036 \001(\r\"\032\n\nMotionMode\022\014\n"
  "\004mode\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_responses_2eproto_deps[1] = {
  &::descriptor_table_transports_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_responses_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_responses_2eproto = {
  false, false, 419, descriptor_table_protodef_responses_2eproto, "responses.proto", 
  &descriptor_table_responses_2eproto_once, descriptor_table_responses_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_responses_2eproto::offsets,
  file_level_metadata_responses_2eproto, file_level_enum_descriptors_responses_2eproto, file_level_service_descriptors_responses_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_responses_2eproto_getter() {
  return &descriptor_table_responses_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_responses_2eproto(&descriptor_table_responses_2eproto);
namespace indiemotion {
namespace protobuf {
namespace reponses {

// ===================================================================

class ServerResponse::_Internal {
 public:
  static const ::indiemotion::protobuf::transport::Header& header(const ServerResponse* msg);
  static const ::indiemotion::protobuf::reponses::Acknowledge& acknowledge(const ServerResponse* msg);
};

const ::indiemotion::protobuf::transport::Header&
ServerResponse::_Internal::header(const ServerResponse* msg) {
  return *msg->header_;
}
const ::indiemotion::protobuf::reponses::Acknowledge&
ServerResponse::_Internal::acknowledge(const ServerResponse* msg) {
  return *msg->payload_.acknowledge_;
}
void ServerResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ServerResponse::set_allocated_acknowledge(::indiemotion::protobuf::reponses::Acknowledge* acknowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (acknowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::reponses::Acknowledge>::GetOwningArena(acknowledge);
    if (message_arena != submessage_arena) {
      acknowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acknowledge, submessage_arena);
    }
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.reponses.ServerResponse.acknowledge)
}
ServerResponse::ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.reponses.ServerResponse)
}
ServerResponse::ServerResponse(const ServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::indiemotion::protobuf::transport::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kAcknowledge: {
      _internal_mutable_acknowledge()->::indiemotion::protobuf::reponses::Acknowledge::MergeFrom(from._internal_acknowledge());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.reponses.ServerResponse)
}

inline void ServerResponse::SharedCtor() {
header_ = nullptr;
clear_has_payload();
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.reponses.ServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void ServerResponse::ArenaDtor(void* object) {
  ServerResponse* _this = reinterpret_cast< ServerResponse* >(object);
  (void)_this;
}
void ServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:indiemotion.protobuf.reponses.ServerResponse)
  switch (payload_case()) {
    case kAcknowledge: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.acknowledge_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.reponses.ServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotion.protobuf.transport.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .indiemotion.protobuf.reponses.Acknowledge acknowledge = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_acknowledge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.reponses.ServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotion.protobuf.transport.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .indiemotion.protobuf.reponses.Acknowledge acknowledge = 20;
  if (_internal_has_acknowledge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::acknowledge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.reponses.ServerResponse)
  return target;
}

size_t ServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.reponses.ServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotion.protobuf.transport.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (payload_case()) {
    // .indiemotion.protobuf.reponses.Acknowledge acknowledge = 20;
    case kAcknowledge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.acknowledge_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerResponse::GetClassData() const { return &_class_data_; }

void ServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerResponse *>(to)->MergeFrom(
      static_cast<const ServerResponse &>(from));
}


void ServerResponse::MergeFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.reponses.ServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::indiemotion::protobuf::transport::Header::MergeFrom(from._internal_header());
  }
  switch (from.payload_case()) {
    case kAcknowledge: {
      _internal_mutable_acknowledge()->::indiemotion::protobuf::reponses::Acknowledge::MergeFrom(from._internal_acknowledge());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.reponses.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {
  return true;
}

void ServerResponse::InternalSwap(ServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_responses_2eproto_getter, &descriptor_table_responses_2eproto_once,
      file_level_metadata_responses_2eproto[0]);
}

// ===================================================================

class Acknowledge::_Internal {
 public:
  using HasBits = decltype(std::declval<Acknowledge>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Acknowledge::Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.reponses.Acknowledge)
}
Acknowledge::Acknowledge(const Acknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.reponses.Acknowledge)
}

inline void Acknowledge::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ok_ = false;
}

Acknowledge::~Acknowledge() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.reponses.Acknowledge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Acknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Acknowledge::ArenaDtor(void* object) {
  Acknowledge* _this = reinterpret_cast< Acknowledge* >(object);
  (void)_this;
}
void Acknowledge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Acknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Acknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.reponses.Acknowledge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  ok_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.reponses.Acknowledge.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Acknowledge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.reponses.Acknowledge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // optional string message = 2;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.reponses.Acknowledge.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.reponses.Acknowledge)
  return target;
}

size_t Acknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.reponses.Acknowledge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Acknowledge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Acknowledge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Acknowledge::GetClassData() const { return &_class_data_; }

void Acknowledge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Acknowledge *>(to)->MergeFrom(
      static_cast<const Acknowledge &>(from));
}


void Acknowledge::MergeFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.reponses.Acknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Acknowledge::CopyFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.reponses.Acknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledge::IsInitialized() const {
  return true;
}

void Acknowledge::InternalSwap(Acknowledge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_responses_2eproto_getter, &descriptor_table_responses_2eproto_once,
      file_level_metadata_responses_2eproto[1]);
}

// ===================================================================

class CameraList::_Internal {
 public:
};

CameraList::CameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  camera_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.reponses.CameraList)
}
CameraList::CameraList(const CameraList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      camera_(from.camera_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.reponses.CameraList)
}

inline void CameraList::SharedCtor() {
}

CameraList::~CameraList() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.reponses.CameraList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraList::ArenaDtor(void* object) {
  CameraList* _this = reinterpret_cast< CameraList* >(object);
  (void)_this;
}
void CameraList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.reponses.CameraList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string camera = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_camera();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.reponses.CameraList.camera"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.reponses.CameraList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string camera = 1;
  for (int i = 0, n = this->_internal_camera_size(); i < n; i++) {
    const auto& s = this->_internal_camera(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.reponses.CameraList.camera");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.reponses.CameraList)
  return target;
}

size_t CameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.reponses.CameraList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string camera = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(camera_.size());
  for (int i = 0, n = camera_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      camera_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraList::GetClassData() const { return &_class_data_; }

void CameraList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraList *>(to)->MergeFrom(
      static_cast<const CameraList &>(from));
}


void CameraList::MergeFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.reponses.CameraList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  camera_.MergeFrom(from.camera_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraList::CopyFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.reponses.CameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraList::IsInitialized() const {
  return true;
}

void CameraList::InternalSwap(CameraList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  camera_.InternalSwap(&other->camera_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_responses_2eproto_getter, &descriptor_table_responses_2eproto_once,
      file_level_metadata_responses_2eproto[2]);
}

// ===================================================================

class InitializeSession::_Internal {
 public:
};

InitializeSession::InitializeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.reponses.InitializeSession)
}
InitializeSession::InitializeSession(const InitializeSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  apiversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    apiversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apiversion().empty()) {
    apiversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apiversion(), 
      GetArenaForAllocation());
  }
  features_ = from.features_;
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.reponses.InitializeSession)
}

inline void InitializeSession::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
apiversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  apiversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
features_ = 0u;
}

InitializeSession::~InitializeSession() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.reponses.InitializeSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apiversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitializeSession::ArenaDtor(void* object) {
  InitializeSession* _this = reinterpret_cast< InitializeSession* >(object);
  (void)_this;
}
void InitializeSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeSession::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.reponses.InitializeSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  apiversion_.ClearToEmpty();
  features_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.reponses.InitializeSession.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string apiVersion = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_apiversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.reponses.InitializeSession.apiVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 features = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.reponses.InitializeSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 10;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.reponses.InitializeSession.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // string apiVersion = 20;
  if (!this->_internal_apiversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apiversion().data(), static_cast<int>(this->_internal_apiversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.reponses.InitializeSession.apiVersion");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_apiversion(), target);
  }

  // uint32 features = 30;
  if (this->_internal_features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_features(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.reponses.InitializeSession)
  return target;
}

size_t InitializeSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.reponses.InitializeSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 10;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string apiVersion = 20;
  if (!this->_internal_apiversion().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apiversion());
  }

  // uint32 features = 30;
  if (this->_internal_features() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_features());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeSession::GetClassData() const { return &_class_data_; }

void InitializeSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeSession *>(to)->MergeFrom(
      static_cast<const InitializeSession &>(from));
}


void InitializeSession::MergeFrom(const InitializeSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.reponses.InitializeSession)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_apiversion().empty()) {
    _internal_set_apiversion(from._internal_apiversion());
  }
  if (from._internal_features() != 0) {
    _internal_set_features(from._internal_features());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeSession::CopyFrom(const InitializeSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.reponses.InitializeSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeSession::IsInitialized() const {
  return true;
}

void InitializeSession::InternalSwap(InitializeSession* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &apiversion_, lhs_arena,
      &other->apiversion_, rhs_arena
  );
  swap(features_, other->features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_responses_2eproto_getter, &descriptor_table_responses_2eproto_once,
      file_level_metadata_responses_2eproto[3]);
}

// ===================================================================

class MotionMode::_Internal {
 public:
};

MotionMode::MotionMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.reponses.MotionMode)
}
MotionMode::MotionMode(const MotionMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mode(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.reponses.MotionMode)
}

inline void MotionMode::SharedCtor() {
mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MotionMode::~MotionMode() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.reponses.MotionMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotionMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MotionMode::ArenaDtor(void* object) {
  MotionMode* _this = reinterpret_cast< MotionMode* >(object);
  (void)_this;
}
void MotionMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionMode::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.reponses.MotionMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.reponses.MotionMode.mode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.reponses.MotionMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.reponses.MotionMode.mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.reponses.MotionMode)
  return target;
}

size_t MotionMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.reponses.MotionMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mode = 1;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionMode::GetClassData() const { return &_class_data_; }

void MotionMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotionMode *>(to)->MergeFrom(
      static_cast<const MotionMode &>(from));
}


void MotionMode::MergeFrom(const MotionMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.reponses.MotionMode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mode().empty()) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionMode::CopyFrom(const MotionMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.reponses.MotionMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionMode::IsInitialized() const {
  return true;
}

void MotionMode::InternalSwap(MotionMode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mode_, lhs_arena,
      &other->mode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_responses_2eproto_getter, &descriptor_table_responses_2eproto_once,
      file_level_metadata_responses_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace reponses
}  // namespace protobuf
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::reponses::ServerResponse* Arena::CreateMaybeMessage< ::indiemotion::protobuf::reponses::ServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::reponses::ServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::reponses::Acknowledge* Arena::CreateMaybeMessage< ::indiemotion::protobuf::reponses::Acknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::reponses::Acknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::reponses::CameraList* Arena::CreateMaybeMessage< ::indiemotion::protobuf::reponses::CameraList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::reponses::CameraList >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::reponses::InitializeSession* Arena::CreateMaybeMessage< ::indiemotion::protobuf::reponses::InitializeSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::reponses::InitializeSession >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::reponses::MotionMode* Arena::CreateMaybeMessage< ::indiemotion::protobuf::reponses::MotionMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::reponses::MotionMode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
