// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: responses.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_responses_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_responses_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transports.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_responses_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_responses_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_responses_2eproto;
namespace indiemotion {
namespace protobuf {
namespace reponses {
class Acknowledge;
struct AcknowledgeDefaultTypeInternal;
extern AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
class CameraList;
struct CameraListDefaultTypeInternal;
extern CameraListDefaultTypeInternal _CameraList_default_instance_;
class InitializeSession;
struct InitializeSessionDefaultTypeInternal;
extern InitializeSessionDefaultTypeInternal _InitializeSession_default_instance_;
class MotionMode;
struct MotionModeDefaultTypeInternal;
extern MotionModeDefaultTypeInternal _MotionMode_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace reponses
}  // namespace protobuf
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotion::protobuf::reponses::Acknowledge* Arena::CreateMaybeMessage<::indiemotion::protobuf::reponses::Acknowledge>(Arena*);
template<> ::indiemotion::protobuf::reponses::CameraList* Arena::CreateMaybeMessage<::indiemotion::protobuf::reponses::CameraList>(Arena*);
template<> ::indiemotion::protobuf::reponses::InitializeSession* Arena::CreateMaybeMessage<::indiemotion::protobuf::reponses::InitializeSession>(Arena*);
template<> ::indiemotion::protobuf::reponses::MotionMode* Arena::CreateMaybeMessage<::indiemotion::protobuf::reponses::MotionMode>(Arena*);
template<> ::indiemotion::protobuf::reponses::ServerResponse* Arena::CreateMaybeMessage<::indiemotion::protobuf::reponses::ServerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotion {
namespace protobuf {
namespace reponses {

// ===================================================================

class ServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.reponses.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  explicit constexpr ServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAcknowledge = 20,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.reponses.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAcknowledgeFieldNumber = 20,
  };
  // .indiemotion.protobuf.transport.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::indiemotion::protobuf::transport::Header& header() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::transport::Header* release_header();
  ::indiemotion::protobuf::transport::Header* mutable_header();
  void set_allocated_header(::indiemotion::protobuf::transport::Header* header);
  private:
  const ::indiemotion::protobuf::transport::Header& _internal_header() const;
  ::indiemotion::protobuf::transport::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::indiemotion::protobuf::transport::Header* header);
  ::indiemotion::protobuf::transport::Header* unsafe_arena_release_header();

  // .indiemotion.protobuf.reponses.Acknowledge acknowledge = 20;
  bool has_acknowledge() const;
  private:
  bool _internal_has_acknowledge() const;
  public:
  void clear_acknowledge();
  const ::indiemotion::protobuf::reponses::Acknowledge& acknowledge() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::reponses::Acknowledge* release_acknowledge();
  ::indiemotion::protobuf::reponses::Acknowledge* mutable_acknowledge();
  void set_allocated_acknowledge(::indiemotion::protobuf::reponses::Acknowledge* acknowledge);
  private:
  const ::indiemotion::protobuf::reponses::Acknowledge& _internal_acknowledge() const;
  ::indiemotion::protobuf::reponses::Acknowledge* _internal_mutable_acknowledge();
  public:
  void unsafe_arena_set_allocated_acknowledge(
      ::indiemotion::protobuf::reponses::Acknowledge* acknowledge);
  ::indiemotion::protobuf::reponses::Acknowledge* unsafe_arena_release_acknowledge();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.reponses.ServerResponse)
 private:
  class _Internal;
  void set_has_acknowledge();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::protobuf::transport::Header* header_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::indiemotion::protobuf::reponses::Acknowledge* acknowledge_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_responses_2eproto;
};
// -------------------------------------------------------------------

class Acknowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.reponses.Acknowledge) */ {
 public:
  inline Acknowledge() : Acknowledge(nullptr) {}
  ~Acknowledge() override;
  explicit constexpr Acknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Acknowledge(const Acknowledge& from);
  Acknowledge(Acknowledge&& from) noexcept
    : Acknowledge() {
    *this = ::std::move(from);
  }

  inline Acknowledge& operator=(const Acknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledge& operator=(Acknowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Acknowledge* internal_default_instance() {
    return reinterpret_cast<const Acknowledge*>(
               &_Acknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Acknowledge& a, Acknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Acknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Acknowledge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Acknowledge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Acknowledge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.reponses.Acknowledge";
  }
  protected:
  explicit Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.reponses.Acknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool ok_;
  friend struct ::TableStruct_responses_2eproto;
};
// -------------------------------------------------------------------

class CameraList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.reponses.CameraList) */ {
 public:
  inline CameraList() : CameraList(nullptr) {}
  ~CameraList() override;
  explicit constexpr CameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraList(const CameraList& from);
  CameraList(CameraList&& from) noexcept
    : CameraList() {
    *this = ::std::move(from);
  }

  inline CameraList& operator=(const CameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraList& operator=(CameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraList* internal_default_instance() {
    return reinterpret_cast<const CameraList*>(
               &_CameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CameraList& a, CameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.reponses.CameraList";
  }
  protected:
  explicit CameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraFieldNumber = 1,
  };
  // repeated string camera = 1;
  int camera_size() const;
  private:
  int _internal_camera_size() const;
  public:
  void clear_camera();
  const std::string& camera(int index) const;
  std::string* mutable_camera(int index);
  void set_camera(int index, const std::string& value);
  void set_camera(int index, std::string&& value);
  void set_camera(int index, const char* value);
  void set_camera(int index, const char* value, size_t size);
  std::string* add_camera();
  void add_camera(const std::string& value);
  void add_camera(std::string&& value);
  void add_camera(const char* value);
  void add_camera(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& camera() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_camera();
  private:
  const std::string& _internal_camera(int index) const;
  std::string* _internal_add_camera();
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.reponses.CameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> camera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responses_2eproto;
};
// -------------------------------------------------------------------

class InitializeSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.reponses.InitializeSession) */ {
 public:
  inline InitializeSession() : InitializeSession(nullptr) {}
  ~InitializeSession() override;
  explicit constexpr InitializeSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeSession(const InitializeSession& from);
  InitializeSession(InitializeSession&& from) noexcept
    : InitializeSession() {
    *this = ::std::move(from);
  }

  inline InitializeSession& operator=(const InitializeSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeSession& operator=(InitializeSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeSession* internal_default_instance() {
    return reinterpret_cast<const InitializeSession*>(
               &_InitializeSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitializeSession& a, InitializeSession& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.reponses.InitializeSession";
  }
  protected:
  explicit InitializeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kApiVersionFieldNumber = 20,
    kFeaturesFieldNumber = 30,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string apiVersion = 20;
  void clear_apiversion();
  const std::string& apiversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apiversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apiversion();
  PROTOBUF_NODISCARD std::string* release_apiversion();
  void set_allocated_apiversion(std::string* apiversion);
  private:
  const std::string& _internal_apiversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apiversion(const std::string& value);
  std::string* _internal_mutable_apiversion();
  public:

  // uint32 features = 30;
  void clear_features();
  uint32_t features() const;
  void set_features(uint32_t value);
  private:
  uint32_t _internal_features() const;
  void _internal_set_features(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.reponses.InitializeSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apiversion_;
  uint32_t features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responses_2eproto;
};
// -------------------------------------------------------------------

class MotionMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.reponses.MotionMode) */ {
 public:
  inline MotionMode() : MotionMode(nullptr) {}
  ~MotionMode() override;
  explicit constexpr MotionMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionMode(const MotionMode& from);
  MotionMode(MotionMode&& from) noexcept
    : MotionMode() {
    *this = ::std::move(from);
  }

  inline MotionMode& operator=(const MotionMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionMode& operator=(MotionMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionMode* internal_default_instance() {
    return reinterpret_cast<const MotionMode*>(
               &_MotionMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MotionMode& a, MotionMode& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.reponses.MotionMode";
  }
  protected:
  explicit MotionMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // string mode = 1;
  void clear_mode();
  const std::string& mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.reponses.MotionMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responses_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerResponse

// .indiemotion.protobuf.transport.Header header = 1;
inline bool ServerResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ServerResponse::has_header() const {
  return _internal_has_header();
}
inline const ::indiemotion::protobuf::transport::Header& ServerResponse::_internal_header() const {
  const ::indiemotion::protobuf::transport::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::transport::Header&>(
      ::indiemotion::protobuf::transport::_Header_default_instance_);
}
inline const ::indiemotion::protobuf::transport::Header& ServerResponse::header() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.ServerResponse.header)
  return _internal_header();
}
inline void ServerResponse::unsafe_arena_set_allocated_header(
    ::indiemotion::protobuf::transport::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.reponses.ServerResponse.header)
}
inline ::indiemotion::protobuf::transport::Header* ServerResponse::release_header() {
  
  ::indiemotion::protobuf::transport::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::transport::Header* ServerResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.reponses.ServerResponse.header)
  
  ::indiemotion::protobuf::transport::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::transport::Header* ServerResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::transport::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::indiemotion::protobuf::transport::Header* ServerResponse::mutable_header() {
  ::indiemotion::protobuf::transport::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.ServerResponse.header)
  return _msg;
}
inline void ServerResponse::set_allocated_header(::indiemotion::protobuf::transport::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.reponses.ServerResponse.header)
}

// .indiemotion.protobuf.reponses.Acknowledge acknowledge = 20;
inline bool ServerResponse::_internal_has_acknowledge() const {
  return payload_case() == kAcknowledge;
}
inline bool ServerResponse::has_acknowledge() const {
  return _internal_has_acknowledge();
}
inline void ServerResponse::set_has_acknowledge() {
  _oneof_case_[0] = kAcknowledge;
}
inline void ServerResponse::clear_acknowledge() {
  if (_internal_has_acknowledge()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.acknowledge_;
    }
    clear_has_payload();
  }
}
inline ::indiemotion::protobuf::reponses::Acknowledge* ServerResponse::release_acknowledge() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.reponses.ServerResponse.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
      ::indiemotion::protobuf::reponses::Acknowledge* temp = payload_.acknowledge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::reponses::Acknowledge& ServerResponse::_internal_acknowledge() const {
  return _internal_has_acknowledge()
      ? *payload_.acknowledge_
      : reinterpret_cast< ::indiemotion::protobuf::reponses::Acknowledge&>(::indiemotion::protobuf::reponses::_Acknowledge_default_instance_);
}
inline const ::indiemotion::protobuf::reponses::Acknowledge& ServerResponse::acknowledge() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.ServerResponse.acknowledge)
  return _internal_acknowledge();
}
inline ::indiemotion::protobuf::reponses::Acknowledge* ServerResponse::unsafe_arena_release_acknowledge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.reponses.ServerResponse.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
    ::indiemotion::protobuf::reponses::Acknowledge* temp = payload_.acknowledge_;
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerResponse::unsafe_arena_set_allocated_acknowledge(::indiemotion::protobuf::reponses::Acknowledge* acknowledge) {
  clear_payload();
  if (acknowledge) {
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.reponses.ServerResponse.acknowledge)
}
inline ::indiemotion::protobuf::reponses::Acknowledge* ServerResponse::_internal_mutable_acknowledge() {
  if (!_internal_has_acknowledge()) {
    clear_payload();
    set_has_acknowledge();
    payload_.acknowledge_ = CreateMaybeMessage< ::indiemotion::protobuf::reponses::Acknowledge >(GetArenaForAllocation());
  }
  return payload_.acknowledge_;
}
inline ::indiemotion::protobuf::reponses::Acknowledge* ServerResponse::mutable_acknowledge() {
  ::indiemotion::protobuf::reponses::Acknowledge* _msg = _internal_mutable_acknowledge();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.ServerResponse.acknowledge)
  return _msg;
}

inline bool ServerResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ServerResponse::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ServerResponse::PayloadCase ServerResponse::payload_case() const {
  return ServerResponse::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Acknowledge

// bool ok = 1;
inline void Acknowledge::clear_ok() {
  ok_ = false;
}
inline bool Acknowledge::_internal_ok() const {
  return ok_;
}
inline bool Acknowledge::ok() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.Acknowledge.ok)
  return _internal_ok();
}
inline void Acknowledge::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Acknowledge::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.Acknowledge.ok)
}

// optional string message = 2;
inline bool Acknowledge::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Acknowledge::has_message() const {
  return _internal_has_message();
}
inline void Acknowledge::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Acknowledge::message() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.Acknowledge.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Acknowledge::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.Acknowledge.message)
}
inline std::string* Acknowledge::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.Acknowledge.message)
  return _s;
}
inline const std::string& Acknowledge::_internal_message() const {
  return message_.Get();
}
inline void Acknowledge::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Acknowledge::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Acknowledge::release_message() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.reponses.Acknowledge.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Acknowledge::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.reponses.Acknowledge.message)
}

// -------------------------------------------------------------------

// CameraList

// repeated string camera = 1;
inline int CameraList::_internal_camera_size() const {
  return camera_.size();
}
inline int CameraList::camera_size() const {
  return _internal_camera_size();
}
inline void CameraList::clear_camera() {
  camera_.Clear();
}
inline std::string* CameraList::add_camera() {
  std::string* _s = _internal_add_camera();
  // @@protoc_insertion_point(field_add_mutable:indiemotion.protobuf.reponses.CameraList.camera)
  return _s;
}
inline const std::string& CameraList::_internal_camera(int index) const {
  return camera_.Get(index);
}
inline const std::string& CameraList::camera(int index) const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.CameraList.camera)
  return _internal_camera(index);
}
inline std::string* CameraList::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.CameraList.camera)
  return camera_.Mutable(index);
}
inline void CameraList::set_camera(int index, const std::string& value) {
  camera_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.CameraList.camera)
}
inline void CameraList::set_camera(int index, std::string&& value) {
  camera_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.CameraList.camera)
}
inline void CameraList::set_camera(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  camera_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:indiemotion.protobuf.reponses.CameraList.camera)
}
inline void CameraList::set_camera(int index, const char* value, size_t size) {
  camera_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:indiemotion.protobuf.reponses.CameraList.camera)
}
inline std::string* CameraList::_internal_add_camera() {
  return camera_.Add();
}
inline void CameraList::add_camera(const std::string& value) {
  camera_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:indiemotion.protobuf.reponses.CameraList.camera)
}
inline void CameraList::add_camera(std::string&& value) {
  camera_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:indiemotion.protobuf.reponses.CameraList.camera)
}
inline void CameraList::add_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  camera_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:indiemotion.protobuf.reponses.CameraList.camera)
}
inline void CameraList::add_camera(const char* value, size_t size) {
  camera_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:indiemotion.protobuf.reponses.CameraList.camera)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CameraList::camera() const {
  // @@protoc_insertion_point(field_list:indiemotion.protobuf.reponses.CameraList.camera)
  return camera_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CameraList::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:indiemotion.protobuf.reponses.CameraList.camera)
  return &camera_;
}

// -------------------------------------------------------------------

// InitializeSession

// string name = 10;
inline void InitializeSession::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InitializeSession::name() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.InitializeSession.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeSession::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.InitializeSession.name)
}
inline std::string* InitializeSession::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.InitializeSession.name)
  return _s;
}
inline const std::string& InitializeSession::_internal_name() const {
  return name_.Get();
}
inline void InitializeSession::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeSession::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeSession::release_name() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.reponses.InitializeSession.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeSession::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.reponses.InitializeSession.name)
}

// string apiVersion = 20;
inline void InitializeSession::clear_apiversion() {
  apiversion_.ClearToEmpty();
}
inline const std::string& InitializeSession::apiversion() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.InitializeSession.apiVersion)
  return _internal_apiversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeSession::set_apiversion(ArgT0&& arg0, ArgT... args) {
 
 apiversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.InitializeSession.apiVersion)
}
inline std::string* InitializeSession::mutable_apiversion() {
  std::string* _s = _internal_mutable_apiversion();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.InitializeSession.apiVersion)
  return _s;
}
inline const std::string& InitializeSession::_internal_apiversion() const {
  return apiversion_.Get();
}
inline void InitializeSession::_internal_set_apiversion(const std::string& value) {
  
  apiversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeSession::_internal_mutable_apiversion() {
  
  return apiversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeSession::release_apiversion() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.reponses.InitializeSession.apiVersion)
  return apiversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeSession::set_allocated_apiversion(std::string* apiversion) {
  if (apiversion != nullptr) {
    
  } else {
    
  }
  apiversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apiversion,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (apiversion_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    apiversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.reponses.InitializeSession.apiVersion)
}

// uint32 features = 30;
inline void InitializeSession::clear_features() {
  features_ = 0u;
}
inline uint32_t InitializeSession::_internal_features() const {
  return features_;
}
inline uint32_t InitializeSession::features() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.InitializeSession.features)
  return _internal_features();
}
inline void InitializeSession::_internal_set_features(uint32_t value) {
  
  features_ = value;
}
inline void InitializeSession::set_features(uint32_t value) {
  _internal_set_features(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.InitializeSession.features)
}

// -------------------------------------------------------------------

// MotionMode

// string mode = 1;
inline void MotionMode::clear_mode() {
  mode_.ClearToEmpty();
}
inline const std::string& MotionMode::mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.reponses.MotionMode.mode)
  return _internal_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MotionMode::set_mode(ArgT0&& arg0, ArgT... args) {
 
 mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.reponses.MotionMode.mode)
}
inline std::string* MotionMode::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.reponses.MotionMode.mode)
  return _s;
}
inline const std::string& MotionMode::_internal_mode() const {
  return mode_.Get();
}
inline void MotionMode::_internal_set_mode(const std::string& value) {
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MotionMode::_internal_mutable_mode() {
  
  return mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MotionMode::release_mode() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.reponses.MotionMode.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MotionMode::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.reponses.MotionMode.mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reponses
}  // namespace protobuf
}  // namespace indiemotion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_responses_2eproto
