// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "transports.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace indiemotion {
namespace protobuf {
namespace messages {
class Acknowledge;
struct AcknowledgeDefaultTypeInternal;
extern AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
class ClientMessage;
struct ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ListCameras;
struct ListCamerasDefaultTypeInternal;
extern ListCamerasDefaultTypeInternal _ListCameras_default_instance_;
class MotionGetMode;
struct MotionGetModeDefaultTypeInternal;
extern MotionGetModeDefaultTypeInternal _MotionGetMode_default_instance_;
class MotionSetMode;
struct MotionSetModeDefaultTypeInternal;
extern MotionSetModeDefaultTypeInternal _MotionSetMode_default_instance_;
class MotionXForm;
struct MotionXFormDefaultTypeInternal;
extern MotionXFormDefaultTypeInternal _MotionXForm_default_instance_;
class XFormData;
struct XFormDataDefaultTypeInternal;
extern XFormDataDefaultTypeInternal _XFormData_default_instance_;
}  // namespace messages
}  // namespace protobuf
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotion::protobuf::messages::Acknowledge* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::Acknowledge>(Arena*);
template<> ::indiemotion::protobuf::messages::ClientMessage* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::ClientMessage>(Arena*);
template<> ::indiemotion::protobuf::messages::ListCameras* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::ListCameras>(Arena*);
template<> ::indiemotion::protobuf::messages::MotionGetMode* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::MotionGetMode>(Arena*);
template<> ::indiemotion::protobuf::messages::MotionSetMode* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::MotionSetMode>(Arena*);
template<> ::indiemotion::protobuf::messages::MotionXForm* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::MotionXForm>(Arena*);
template<> ::indiemotion::protobuf::messages::XFormData* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::XFormData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotion {
namespace protobuf {
namespace messages {

enum MotionMode : int {
  Off = 0,
  Live = 1,
  Recording = 2,
  MotionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MotionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MotionMode_IsValid(int value);
constexpr MotionMode MotionMode_MIN = Off;
constexpr MotionMode MotionMode_MAX = Recording;
constexpr int MotionMode_ARRAYSIZE = MotionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionMode_descriptor();
template<typename T>
inline const std::string& MotionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionMode_descriptor(), enum_t_value);
}
inline bool MotionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionMode>(
    MotionMode_descriptor(), name, value);
}
// ===================================================================

class ClientMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  ~ClientMessage() override;
  explicit constexpr ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAcknowledge = 20,
    kListCameras = 30,
    kMotionSetMode = 40,
    kMotionGetMode = 50,
    kMotionXform = 60,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAcknowledgeFieldNumber = 20,
    kListCamerasFieldNumber = 30,
    kMotionSetModeFieldNumber = 40,
    kMotionGetModeFieldNumber = 50,
    kMotionXformFieldNumber = 60,
  };
  // .indiemotion.protobuf.transport.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::indiemotion::protobuf::transport::Header& header() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::transport::Header* release_header();
  ::indiemotion::protobuf::transport::Header* mutable_header();
  void set_allocated_header(::indiemotion::protobuf::transport::Header* header);
  private:
  const ::indiemotion::protobuf::transport::Header& _internal_header() const;
  ::indiemotion::protobuf::transport::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::indiemotion::protobuf::transport::Header* header);
  ::indiemotion::protobuf::transport::Header* unsafe_arena_release_header();

  // .indiemotion.protobuf.messages.Acknowledge acknowledge = 20;
  bool has_acknowledge() const;
  private:
  bool _internal_has_acknowledge() const;
  public:
  void clear_acknowledge();
  const ::indiemotion::protobuf::messages::Acknowledge& acknowledge() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::Acknowledge* release_acknowledge();
  ::indiemotion::protobuf::messages::Acknowledge* mutable_acknowledge();
  void set_allocated_acknowledge(::indiemotion::protobuf::messages::Acknowledge* acknowledge);
  private:
  const ::indiemotion::protobuf::messages::Acknowledge& _internal_acknowledge() const;
  ::indiemotion::protobuf::messages::Acknowledge* _internal_mutable_acknowledge();
  public:
  void unsafe_arena_set_allocated_acknowledge(
      ::indiemotion::protobuf::messages::Acknowledge* acknowledge);
  ::indiemotion::protobuf::messages::Acknowledge* unsafe_arena_release_acknowledge();

  // .indiemotion.protobuf.messages.ListCameras list_cameras = 30;
  bool has_list_cameras() const;
  private:
  bool _internal_has_list_cameras() const;
  public:
  void clear_list_cameras();
  const ::indiemotion::protobuf::messages::ListCameras& list_cameras() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::ListCameras* release_list_cameras();
  ::indiemotion::protobuf::messages::ListCameras* mutable_list_cameras();
  void set_allocated_list_cameras(::indiemotion::protobuf::messages::ListCameras* list_cameras);
  private:
  const ::indiemotion::protobuf::messages::ListCameras& _internal_list_cameras() const;
  ::indiemotion::protobuf::messages::ListCameras* _internal_mutable_list_cameras();
  public:
  void unsafe_arena_set_allocated_list_cameras(
      ::indiemotion::protobuf::messages::ListCameras* list_cameras);
  ::indiemotion::protobuf::messages::ListCameras* unsafe_arena_release_list_cameras();

  // .indiemotion.protobuf.messages.MotionSetMode motion_set_mode = 40;
  bool has_motion_set_mode() const;
  private:
  bool _internal_has_motion_set_mode() const;
  public:
  void clear_motion_set_mode();
  const ::indiemotion::protobuf::messages::MotionSetMode& motion_set_mode() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::MotionSetMode* release_motion_set_mode();
  ::indiemotion::protobuf::messages::MotionSetMode* mutable_motion_set_mode();
  void set_allocated_motion_set_mode(::indiemotion::protobuf::messages::MotionSetMode* motion_set_mode);
  private:
  const ::indiemotion::protobuf::messages::MotionSetMode& _internal_motion_set_mode() const;
  ::indiemotion::protobuf::messages::MotionSetMode* _internal_mutable_motion_set_mode();
  public:
  void unsafe_arena_set_allocated_motion_set_mode(
      ::indiemotion::protobuf::messages::MotionSetMode* motion_set_mode);
  ::indiemotion::protobuf::messages::MotionSetMode* unsafe_arena_release_motion_set_mode();

  // .indiemotion.protobuf.messages.MotionGetMode motion_get_mode = 50;
  bool has_motion_get_mode() const;
  private:
  bool _internal_has_motion_get_mode() const;
  public:
  void clear_motion_get_mode();
  const ::indiemotion::protobuf::messages::MotionGetMode& motion_get_mode() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::MotionGetMode* release_motion_get_mode();
  ::indiemotion::protobuf::messages::MotionGetMode* mutable_motion_get_mode();
  void set_allocated_motion_get_mode(::indiemotion::protobuf::messages::MotionGetMode* motion_get_mode);
  private:
  const ::indiemotion::protobuf::messages::MotionGetMode& _internal_motion_get_mode() const;
  ::indiemotion::protobuf::messages::MotionGetMode* _internal_mutable_motion_get_mode();
  public:
  void unsafe_arena_set_allocated_motion_get_mode(
      ::indiemotion::protobuf::messages::MotionGetMode* motion_get_mode);
  ::indiemotion::protobuf::messages::MotionGetMode* unsafe_arena_release_motion_get_mode();

  // .indiemotion.protobuf.messages.MotionXForm motion_xform = 60;
  bool has_motion_xform() const;
  private:
  bool _internal_has_motion_xform() const;
  public:
  void clear_motion_xform();
  const ::indiemotion::protobuf::messages::MotionXForm& motion_xform() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::MotionXForm* release_motion_xform();
  ::indiemotion::protobuf::messages::MotionXForm* mutable_motion_xform();
  void set_allocated_motion_xform(::indiemotion::protobuf::messages::MotionXForm* motion_xform);
  private:
  const ::indiemotion::protobuf::messages::MotionXForm& _internal_motion_xform() const;
  ::indiemotion::protobuf::messages::MotionXForm* _internal_mutable_motion_xform();
  public:
  void unsafe_arena_set_allocated_motion_xform(
      ::indiemotion::protobuf::messages::MotionXForm* motion_xform);
  ::indiemotion::protobuf::messages::MotionXForm* unsafe_arena_release_motion_xform();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.ClientMessage)
 private:
  class _Internal;
  void set_has_acknowledge();
  void set_has_list_cameras();
  void set_has_motion_set_mode();
  void set_has_motion_get_mode();
  void set_has_motion_xform();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::protobuf::transport::Header* header_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::indiemotion::protobuf::messages::Acknowledge* acknowledge_;
    ::indiemotion::protobuf::messages::ListCameras* list_cameras_;
    ::indiemotion::protobuf::messages::MotionSetMode* motion_set_mode_;
    ::indiemotion::protobuf::messages::MotionGetMode* motion_get_mode_;
    ::indiemotion::protobuf::messages::MotionXForm* motion_xform_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Acknowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.Acknowledge) */ {
 public:
  inline Acknowledge() : Acknowledge(nullptr) {}
  ~Acknowledge() override;
  explicit constexpr Acknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Acknowledge(const Acknowledge& from);
  Acknowledge(Acknowledge&& from) noexcept
    : Acknowledge() {
    *this = ::std::move(from);
  }

  inline Acknowledge& operator=(const Acknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledge& operator=(Acknowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Acknowledge* internal_default_instance() {
    return reinterpret_cast<const Acknowledge*>(
               &_Acknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Acknowledge& a, Acknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Acknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Acknowledge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Acknowledge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Acknowledge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.Acknowledge";
  }
  protected:
  explicit Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.Acknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool ok_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ListCameras final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.ListCameras) */ {
 public:
  inline ListCameras() : ListCameras(nullptr) {}
  explicit constexpr ListCameras(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCameras(const ListCameras& from);
  ListCameras(ListCameras&& from) noexcept
    : ListCameras() {
    *this = ::std::move(from);
  }

  inline ListCameras& operator=(const ListCameras& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCameras& operator=(ListCameras&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCameras& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCameras* internal_default_instance() {
    return reinterpret_cast<const ListCameras*>(
               &_ListCameras_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListCameras& a, ListCameras& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCameras* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCameras* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCameras* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCameras>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListCameras& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListCameras& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.ListCameras";
  }
  protected:
  explicit ListCameras(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.ListCameras)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MotionSetMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.MotionSetMode) */ {
 public:
  inline MotionSetMode() : MotionSetMode(nullptr) {}
  ~MotionSetMode() override;
  explicit constexpr MotionSetMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionSetMode(const MotionSetMode& from);
  MotionSetMode(MotionSetMode&& from) noexcept
    : MotionSetMode() {
    *this = ::std::move(from);
  }

  inline MotionSetMode& operator=(const MotionSetMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionSetMode& operator=(MotionSetMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionSetMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionSetMode* internal_default_instance() {
    return reinterpret_cast<const MotionSetMode*>(
               &_MotionSetMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MotionSetMode& a, MotionSetMode& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionSetMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionSetMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionSetMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionSetMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionSetMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionSetMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionSetMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.MotionSetMode";
  }
  protected:
  explicit MotionSetMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .indiemotion.protobuf.messages.MotionMode mode = 1;
  void clear_mode();
  ::indiemotion::protobuf::messages::MotionMode mode() const;
  void set_mode(::indiemotion::protobuf::messages::MotionMode value);
  private:
  ::indiemotion::protobuf::messages::MotionMode _internal_mode() const;
  void _internal_set_mode(::indiemotion::protobuf::messages::MotionMode value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.MotionSetMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MotionGetMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.MotionGetMode) */ {
 public:
  inline MotionGetMode() : MotionGetMode(nullptr) {}
  ~MotionGetMode() override;
  explicit constexpr MotionGetMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionGetMode(const MotionGetMode& from);
  MotionGetMode(MotionGetMode&& from) noexcept
    : MotionGetMode() {
    *this = ::std::move(from);
  }

  inline MotionGetMode& operator=(const MotionGetMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionGetMode& operator=(MotionGetMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionGetMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionGetMode* internal_default_instance() {
    return reinterpret_cast<const MotionGetMode*>(
               &_MotionGetMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MotionGetMode& a, MotionGetMode& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionGetMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionGetMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionGetMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionGetMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionGetMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionGetMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionGetMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.MotionGetMode";
  }
  protected:
  explicit MotionGetMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .indiemotion.protobuf.messages.MotionMode mode = 1;
  void clear_mode();
  ::indiemotion::protobuf::messages::MotionMode mode() const;
  void set_mode(::indiemotion::protobuf::messages::MotionMode value);
  private:
  ::indiemotion::protobuf::messages::MotionMode _internal_mode() const;
  void _internal_set_mode(::indiemotion::protobuf::messages::MotionMode value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.MotionGetMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class XFormData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.XFormData) */ {
 public:
  inline XFormData() : XFormData(nullptr) {}
  ~XFormData() override;
  explicit constexpr XFormData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XFormData(const XFormData& from);
  XFormData(XFormData&& from) noexcept
    : XFormData() {
    *this = ::std::move(from);
  }

  inline XFormData& operator=(const XFormData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XFormData& operator=(XFormData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XFormData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XFormData* internal_default_instance() {
    return reinterpret_cast<const XFormData*>(
               &_XFormData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(XFormData& a, XFormData& b) {
    a.Swap(&b);
  }
  inline void Swap(XFormData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XFormData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XFormData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XFormData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XFormData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XFormData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XFormData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.XFormData";
  }
  protected:
  explicit XFormData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.XFormData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MotionXForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.MotionXForm) */ {
 public:
  inline MotionXForm() : MotionXForm(nullptr) {}
  ~MotionXForm() override;
  explicit constexpr MotionXForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionXForm(const MotionXForm& from);
  MotionXForm(MotionXForm&& from) noexcept
    : MotionXForm() {
    *this = ::std::move(from);
  }

  inline MotionXForm& operator=(const MotionXForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionXForm& operator=(MotionXForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionXForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionXForm* internal_default_instance() {
    return reinterpret_cast<const MotionXForm*>(
               &_MotionXForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MotionXForm& a, MotionXForm& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionXForm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionXForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionXForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionXForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionXForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionXForm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionXForm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.MotionXForm";
  }
  protected:
  explicit MotionXForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .indiemotion.protobuf.messages.XFormData translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::indiemotion::protobuf::messages::XFormData& translation() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::XFormData* release_translation();
  ::indiemotion::protobuf::messages::XFormData* mutable_translation();
  void set_allocated_translation(::indiemotion::protobuf::messages::XFormData* translation);
  private:
  const ::indiemotion::protobuf::messages::XFormData& _internal_translation() const;
  ::indiemotion::protobuf::messages::XFormData* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::indiemotion::protobuf::messages::XFormData* translation);
  ::indiemotion::protobuf::messages::XFormData* unsafe_arena_release_translation();

  // .indiemotion.protobuf.messages.XFormData orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::indiemotion::protobuf::messages::XFormData& orientation() const;
  PROTOBUF_NODISCARD ::indiemotion::protobuf::messages::XFormData* release_orientation();
  ::indiemotion::protobuf::messages::XFormData* mutable_orientation();
  void set_allocated_orientation(::indiemotion::protobuf::messages::XFormData* orientation);
  private:
  const ::indiemotion::protobuf::messages::XFormData& _internal_orientation() const;
  ::indiemotion::protobuf::messages::XFormData* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::indiemotion::protobuf::messages::XFormData* orientation);
  ::indiemotion::protobuf::messages::XFormData* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.MotionXForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::protobuf::messages::XFormData* translation_;
  ::indiemotion::protobuf::messages::XFormData* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// .indiemotion.protobuf.transport.Header header = 1;
inline bool ClientMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ClientMessage::has_header() const {
  return _internal_has_header();
}
inline const ::indiemotion::protobuf::transport::Header& ClientMessage::_internal_header() const {
  const ::indiemotion::protobuf::transport::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::transport::Header&>(
      ::indiemotion::protobuf::transport::_Header_default_instance_);
}
inline const ::indiemotion::protobuf::transport::Header& ClientMessage::header() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.ClientMessage.header)
  return _internal_header();
}
inline void ClientMessage::unsafe_arena_set_allocated_header(
    ::indiemotion::protobuf::transport::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.ClientMessage.header)
}
inline ::indiemotion::protobuf::transport::Header* ClientMessage::release_header() {
  
  ::indiemotion::protobuf::transport::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::transport::Header* ClientMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.ClientMessage.header)
  
  ::indiemotion::protobuf::transport::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::transport::Header* ClientMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::transport::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::indiemotion::protobuf::transport::Header* ClientMessage::mutable_header() {
  ::indiemotion::protobuf::transport::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.ClientMessage.header)
  return _msg;
}
inline void ClientMessage::set_allocated_header(::indiemotion::protobuf::transport::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.ClientMessage.header)
}

// .indiemotion.protobuf.messages.Acknowledge acknowledge = 20;
inline bool ClientMessage::_internal_has_acknowledge() const {
  return payload_case() == kAcknowledge;
}
inline bool ClientMessage::has_acknowledge() const {
  return _internal_has_acknowledge();
}
inline void ClientMessage::set_has_acknowledge() {
  _oneof_case_[0] = kAcknowledge;
}
inline void ClientMessage::clear_acknowledge() {
  if (_internal_has_acknowledge()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.acknowledge_;
    }
    clear_has_payload();
  }
}
inline ::indiemotion::protobuf::messages::Acknowledge* ClientMessage::release_acknowledge() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.ClientMessage.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
      ::indiemotion::protobuf::messages::Acknowledge* temp = payload_.acknowledge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::messages::Acknowledge& ClientMessage::_internal_acknowledge() const {
  return _internal_has_acknowledge()
      ? *payload_.acknowledge_
      : reinterpret_cast< ::indiemotion::protobuf::messages::Acknowledge&>(::indiemotion::protobuf::messages::_Acknowledge_default_instance_);
}
inline const ::indiemotion::protobuf::messages::Acknowledge& ClientMessage::acknowledge() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.ClientMessage.acknowledge)
  return _internal_acknowledge();
}
inline ::indiemotion::protobuf::messages::Acknowledge* ClientMessage::unsafe_arena_release_acknowledge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.ClientMessage.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
    ::indiemotion::protobuf::messages::Acknowledge* temp = payload_.acknowledge_;
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_acknowledge(::indiemotion::protobuf::messages::Acknowledge* acknowledge) {
  clear_payload();
  if (acknowledge) {
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.ClientMessage.acknowledge)
}
inline ::indiemotion::protobuf::messages::Acknowledge* ClientMessage::_internal_mutable_acknowledge() {
  if (!_internal_has_acknowledge()) {
    clear_payload();
    set_has_acknowledge();
    payload_.acknowledge_ = CreateMaybeMessage< ::indiemotion::protobuf::messages::Acknowledge >(GetArenaForAllocation());
  }
  return payload_.acknowledge_;
}
inline ::indiemotion::protobuf::messages::Acknowledge* ClientMessage::mutable_acknowledge() {
  ::indiemotion::protobuf::messages::Acknowledge* _msg = _internal_mutable_acknowledge();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.ClientMessage.acknowledge)
  return _msg;
}

// .indiemotion.protobuf.messages.ListCameras list_cameras = 30;
inline bool ClientMessage::_internal_has_list_cameras() const {
  return payload_case() == kListCameras;
}
inline bool ClientMessage::has_list_cameras() const {
  return _internal_has_list_cameras();
}
inline void ClientMessage::set_has_list_cameras() {
  _oneof_case_[0] = kListCameras;
}
inline void ClientMessage::clear_list_cameras() {
  if (_internal_has_list_cameras()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.list_cameras_;
    }
    clear_has_payload();
  }
}
inline ::indiemotion::protobuf::messages::ListCameras* ClientMessage::release_list_cameras() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.ClientMessage.list_cameras)
  if (_internal_has_list_cameras()) {
    clear_has_payload();
      ::indiemotion::protobuf::messages::ListCameras* temp = payload_.list_cameras_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.list_cameras_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::messages::ListCameras& ClientMessage::_internal_list_cameras() const {
  return _internal_has_list_cameras()
      ? *payload_.list_cameras_
      : reinterpret_cast< ::indiemotion::protobuf::messages::ListCameras&>(::indiemotion::protobuf::messages::_ListCameras_default_instance_);
}
inline const ::indiemotion::protobuf::messages::ListCameras& ClientMessage::list_cameras() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.ClientMessage.list_cameras)
  return _internal_list_cameras();
}
inline ::indiemotion::protobuf::messages::ListCameras* ClientMessage::unsafe_arena_release_list_cameras() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.ClientMessage.list_cameras)
  if (_internal_has_list_cameras()) {
    clear_has_payload();
    ::indiemotion::protobuf::messages::ListCameras* temp = payload_.list_cameras_;
    payload_.list_cameras_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_list_cameras(::indiemotion::protobuf::messages::ListCameras* list_cameras) {
  clear_payload();
  if (list_cameras) {
    set_has_list_cameras();
    payload_.list_cameras_ = list_cameras;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.ClientMessage.list_cameras)
}
inline ::indiemotion::protobuf::messages::ListCameras* ClientMessage::_internal_mutable_list_cameras() {
  if (!_internal_has_list_cameras()) {
    clear_payload();
    set_has_list_cameras();
    payload_.list_cameras_ = CreateMaybeMessage< ::indiemotion::protobuf::messages::ListCameras >(GetArenaForAllocation());
  }
  return payload_.list_cameras_;
}
inline ::indiemotion::protobuf::messages::ListCameras* ClientMessage::mutable_list_cameras() {
  ::indiemotion::protobuf::messages::ListCameras* _msg = _internal_mutable_list_cameras();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.ClientMessage.list_cameras)
  return _msg;
}

// .indiemotion.protobuf.messages.MotionSetMode motion_set_mode = 40;
inline bool ClientMessage::_internal_has_motion_set_mode() const {
  return payload_case() == kMotionSetMode;
}
inline bool ClientMessage::has_motion_set_mode() const {
  return _internal_has_motion_set_mode();
}
inline void ClientMessage::set_has_motion_set_mode() {
  _oneof_case_[0] = kMotionSetMode;
}
inline void ClientMessage::clear_motion_set_mode() {
  if (_internal_has_motion_set_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_set_mode_;
    }
    clear_has_payload();
  }
}
inline ::indiemotion::protobuf::messages::MotionSetMode* ClientMessage::release_motion_set_mode() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.ClientMessage.motion_set_mode)
  if (_internal_has_motion_set_mode()) {
    clear_has_payload();
      ::indiemotion::protobuf::messages::MotionSetMode* temp = payload_.motion_set_mode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_set_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::messages::MotionSetMode& ClientMessage::_internal_motion_set_mode() const {
  return _internal_has_motion_set_mode()
      ? *payload_.motion_set_mode_
      : reinterpret_cast< ::indiemotion::protobuf::messages::MotionSetMode&>(::indiemotion::protobuf::messages::_MotionSetMode_default_instance_);
}
inline const ::indiemotion::protobuf::messages::MotionSetMode& ClientMessage::motion_set_mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.ClientMessage.motion_set_mode)
  return _internal_motion_set_mode();
}
inline ::indiemotion::protobuf::messages::MotionSetMode* ClientMessage::unsafe_arena_release_motion_set_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.ClientMessage.motion_set_mode)
  if (_internal_has_motion_set_mode()) {
    clear_has_payload();
    ::indiemotion::protobuf::messages::MotionSetMode* temp = payload_.motion_set_mode_;
    payload_.motion_set_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_motion_set_mode(::indiemotion::protobuf::messages::MotionSetMode* motion_set_mode) {
  clear_payload();
  if (motion_set_mode) {
    set_has_motion_set_mode();
    payload_.motion_set_mode_ = motion_set_mode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.ClientMessage.motion_set_mode)
}
inline ::indiemotion::protobuf::messages::MotionSetMode* ClientMessage::_internal_mutable_motion_set_mode() {
  if (!_internal_has_motion_set_mode()) {
    clear_payload();
    set_has_motion_set_mode();
    payload_.motion_set_mode_ = CreateMaybeMessage< ::indiemotion::protobuf::messages::MotionSetMode >(GetArenaForAllocation());
  }
  return payload_.motion_set_mode_;
}
inline ::indiemotion::protobuf::messages::MotionSetMode* ClientMessage::mutable_motion_set_mode() {
  ::indiemotion::protobuf::messages::MotionSetMode* _msg = _internal_mutable_motion_set_mode();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.ClientMessage.motion_set_mode)
  return _msg;
}

// .indiemotion.protobuf.messages.MotionGetMode motion_get_mode = 50;
inline bool ClientMessage::_internal_has_motion_get_mode() const {
  return payload_case() == kMotionGetMode;
}
inline bool ClientMessage::has_motion_get_mode() const {
  return _internal_has_motion_get_mode();
}
inline void ClientMessage::set_has_motion_get_mode() {
  _oneof_case_[0] = kMotionGetMode;
}
inline void ClientMessage::clear_motion_get_mode() {
  if (_internal_has_motion_get_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_get_mode_;
    }
    clear_has_payload();
  }
}
inline ::indiemotion::protobuf::messages::MotionGetMode* ClientMessage::release_motion_get_mode() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.ClientMessage.motion_get_mode)
  if (_internal_has_motion_get_mode()) {
    clear_has_payload();
      ::indiemotion::protobuf::messages::MotionGetMode* temp = payload_.motion_get_mode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_get_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::messages::MotionGetMode& ClientMessage::_internal_motion_get_mode() const {
  return _internal_has_motion_get_mode()
      ? *payload_.motion_get_mode_
      : reinterpret_cast< ::indiemotion::protobuf::messages::MotionGetMode&>(::indiemotion::protobuf::messages::_MotionGetMode_default_instance_);
}
inline const ::indiemotion::protobuf::messages::MotionGetMode& ClientMessage::motion_get_mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.ClientMessage.motion_get_mode)
  return _internal_motion_get_mode();
}
inline ::indiemotion::protobuf::messages::MotionGetMode* ClientMessage::unsafe_arena_release_motion_get_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.ClientMessage.motion_get_mode)
  if (_internal_has_motion_get_mode()) {
    clear_has_payload();
    ::indiemotion::protobuf::messages::MotionGetMode* temp = payload_.motion_get_mode_;
    payload_.motion_get_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_motion_get_mode(::indiemotion::protobuf::messages::MotionGetMode* motion_get_mode) {
  clear_payload();
  if (motion_get_mode) {
    set_has_motion_get_mode();
    payload_.motion_get_mode_ = motion_get_mode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.ClientMessage.motion_get_mode)
}
inline ::indiemotion::protobuf::messages::MotionGetMode* ClientMessage::_internal_mutable_motion_get_mode() {
  if (!_internal_has_motion_get_mode()) {
    clear_payload();
    set_has_motion_get_mode();
    payload_.motion_get_mode_ = CreateMaybeMessage< ::indiemotion::protobuf::messages::MotionGetMode >(GetArenaForAllocation());
  }
  return payload_.motion_get_mode_;
}
inline ::indiemotion::protobuf::messages::MotionGetMode* ClientMessage::mutable_motion_get_mode() {
  ::indiemotion::protobuf::messages::MotionGetMode* _msg = _internal_mutable_motion_get_mode();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.ClientMessage.motion_get_mode)
  return _msg;
}

// .indiemotion.protobuf.messages.MotionXForm motion_xform = 60;
inline bool ClientMessage::_internal_has_motion_xform() const {
  return payload_case() == kMotionXform;
}
inline bool ClientMessage::has_motion_xform() const {
  return _internal_has_motion_xform();
}
inline void ClientMessage::set_has_motion_xform() {
  _oneof_case_[0] = kMotionXform;
}
inline void ClientMessage::clear_motion_xform() {
  if (_internal_has_motion_xform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_xform_;
    }
    clear_has_payload();
  }
}
inline ::indiemotion::protobuf::messages::MotionXForm* ClientMessage::release_motion_xform() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.ClientMessage.motion_xform)
  if (_internal_has_motion_xform()) {
    clear_has_payload();
      ::indiemotion::protobuf::messages::MotionXForm* temp = payload_.motion_xform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_xform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::messages::MotionXForm& ClientMessage::_internal_motion_xform() const {
  return _internal_has_motion_xform()
      ? *payload_.motion_xform_
      : reinterpret_cast< ::indiemotion::protobuf::messages::MotionXForm&>(::indiemotion::protobuf::messages::_MotionXForm_default_instance_);
}
inline const ::indiemotion::protobuf::messages::MotionXForm& ClientMessage::motion_xform() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.ClientMessage.motion_xform)
  return _internal_motion_xform();
}
inline ::indiemotion::protobuf::messages::MotionXForm* ClientMessage::unsafe_arena_release_motion_xform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.ClientMessage.motion_xform)
  if (_internal_has_motion_xform()) {
    clear_has_payload();
    ::indiemotion::protobuf::messages::MotionXForm* temp = payload_.motion_xform_;
    payload_.motion_xform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_motion_xform(::indiemotion::protobuf::messages::MotionXForm* motion_xform) {
  clear_payload();
  if (motion_xform) {
    set_has_motion_xform();
    payload_.motion_xform_ = motion_xform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.ClientMessage.motion_xform)
}
inline ::indiemotion::protobuf::messages::MotionXForm* ClientMessage::_internal_mutable_motion_xform() {
  if (!_internal_has_motion_xform()) {
    clear_payload();
    set_has_motion_xform();
    payload_.motion_xform_ = CreateMaybeMessage< ::indiemotion::protobuf::messages::MotionXForm >(GetArenaForAllocation());
  }
  return payload_.motion_xform_;
}
inline ::indiemotion::protobuf::messages::MotionXForm* ClientMessage::mutable_motion_xform() {
  ::indiemotion::protobuf::messages::MotionXForm* _msg = _internal_mutable_motion_xform();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.ClientMessage.motion_xform)
  return _msg;
}

inline bool ClientMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ClientMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ClientMessage::PayloadCase ClientMessage::payload_case() const {
  return ClientMessage::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Acknowledge

// bool ok = 1;
inline void Acknowledge::clear_ok() {
  ok_ = false;
}
inline bool Acknowledge::_internal_ok() const {
  return ok_;
}
inline bool Acknowledge::ok() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Acknowledge.ok)
  return _internal_ok();
}
inline void Acknowledge::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Acknowledge::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.Acknowledge.ok)
}

// optional string message = 2;
inline bool Acknowledge::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Acknowledge::has_message() const {
  return _internal_has_message();
}
inline void Acknowledge::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Acknowledge::message() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Acknowledge.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Acknowledge::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.Acknowledge.message)
}
inline std::string* Acknowledge::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Acknowledge.message)
  return _s;
}
inline const std::string& Acknowledge::_internal_message() const {
  return message_.Get();
}
inline void Acknowledge::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Acknowledge::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Acknowledge::release_message() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Acknowledge.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Acknowledge::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.Acknowledge.message)
}

// -------------------------------------------------------------------

// ListCameras

// -------------------------------------------------------------------

// MotionSetMode

// .indiemotion.protobuf.messages.MotionMode mode = 1;
inline void MotionSetMode::clear_mode() {
  mode_ = 0;
}
inline ::indiemotion::protobuf::messages::MotionMode MotionSetMode::_internal_mode() const {
  return static_cast< ::indiemotion::protobuf::messages::MotionMode >(mode_);
}
inline ::indiemotion::protobuf::messages::MotionMode MotionSetMode::mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.MotionSetMode.mode)
  return _internal_mode();
}
inline void MotionSetMode::_internal_set_mode(::indiemotion::protobuf::messages::MotionMode value) {
  
  mode_ = value;
}
inline void MotionSetMode::set_mode(::indiemotion::protobuf::messages::MotionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.MotionSetMode.mode)
}

// -------------------------------------------------------------------

// MotionGetMode

// .indiemotion.protobuf.messages.MotionMode mode = 1;
inline void MotionGetMode::clear_mode() {
  mode_ = 0;
}
inline ::indiemotion::protobuf::messages::MotionMode MotionGetMode::_internal_mode() const {
  return static_cast< ::indiemotion::protobuf::messages::MotionMode >(mode_);
}
inline ::indiemotion::protobuf::messages::MotionMode MotionGetMode::mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.MotionGetMode.mode)
  return _internal_mode();
}
inline void MotionGetMode::_internal_set_mode(::indiemotion::protobuf::messages::MotionMode value) {
  
  mode_ = value;
}
inline void MotionGetMode::set_mode(::indiemotion::protobuf::messages::MotionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.MotionGetMode.mode)
}

// -------------------------------------------------------------------

// XFormData

// double x = 1;
inline void XFormData::clear_x() {
  x_ = 0;
}
inline double XFormData::_internal_x() const {
  return x_;
}
inline double XFormData::x() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.XFormData.x)
  return _internal_x();
}
inline void XFormData::_internal_set_x(double value) {
  
  x_ = value;
}
inline void XFormData::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.XFormData.x)
}

// double y = 2;
inline void XFormData::clear_y() {
  y_ = 0;
}
inline double XFormData::_internal_y() const {
  return y_;
}
inline double XFormData::y() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.XFormData.y)
  return _internal_y();
}
inline void XFormData::_internal_set_y(double value) {
  
  y_ = value;
}
inline void XFormData::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.XFormData.y)
}

// double z = 3;
inline void XFormData::clear_z() {
  z_ = 0;
}
inline double XFormData::_internal_z() const {
  return z_;
}
inline double XFormData::z() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.XFormData.z)
  return _internal_z();
}
inline void XFormData::_internal_set_z(double value) {
  
  z_ = value;
}
inline void XFormData::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.XFormData.z)
}

// -------------------------------------------------------------------

// MotionXForm

// .indiemotion.protobuf.messages.XFormData translation = 1;
inline bool MotionXForm::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool MotionXForm::has_translation() const {
  return _internal_has_translation();
}
inline void MotionXForm::clear_translation() {
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::indiemotion::protobuf::messages::XFormData& MotionXForm::_internal_translation() const {
  const ::indiemotion::protobuf::messages::XFormData* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::messages::XFormData&>(
      ::indiemotion::protobuf::messages::_XFormData_default_instance_);
}
inline const ::indiemotion::protobuf::messages::XFormData& MotionXForm::translation() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.MotionXForm.translation)
  return _internal_translation();
}
inline void MotionXForm::unsafe_arena_set_allocated_translation(
    ::indiemotion::protobuf::messages::XFormData* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.MotionXForm.translation)
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::release_translation() {
  
  ::indiemotion::protobuf::messages::XFormData* temp = translation_;
  translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.MotionXForm.translation)
  
  ::indiemotion::protobuf::messages::XFormData* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::messages::XFormData>(GetArenaForAllocation());
    translation_ = p;
  }
  return translation_;
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::mutable_translation() {
  ::indiemotion::protobuf::messages::XFormData* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.MotionXForm.translation)
  return _msg;
}
inline void MotionXForm::set_allocated_translation(::indiemotion::protobuf::messages::XFormData* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::messages::XFormData>::GetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.MotionXForm.translation)
}

// .indiemotion.protobuf.messages.XFormData orientation = 2;
inline bool MotionXForm::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool MotionXForm::has_orientation() const {
  return _internal_has_orientation();
}
inline void MotionXForm::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::indiemotion::protobuf::messages::XFormData& MotionXForm::_internal_orientation() const {
  const ::indiemotion::protobuf::messages::XFormData* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::messages::XFormData&>(
      ::indiemotion::protobuf::messages::_XFormData_default_instance_);
}
inline const ::indiemotion::protobuf::messages::XFormData& MotionXForm::orientation() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.MotionXForm.orientation)
  return _internal_orientation();
}
inline void MotionXForm::unsafe_arena_set_allocated_orientation(
    ::indiemotion::protobuf::messages::XFormData* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.MotionXForm.orientation)
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::release_orientation() {
  
  ::indiemotion::protobuf::messages::XFormData* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.MotionXForm.orientation)
  
  ::indiemotion::protobuf::messages::XFormData* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::messages::XFormData>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::indiemotion::protobuf::messages::XFormData* MotionXForm::mutable_orientation() {
  ::indiemotion::protobuf::messages::XFormData* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.MotionXForm.orientation)
  return _msg;
}
inline void MotionXForm::set_allocated_orientation(::indiemotion::protobuf::messages::XFormData* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::messages::XFormData>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.MotionXForm.orientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace protobuf
}  // namespace indiemotion

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::indiemotion::protobuf::messages::MotionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::indiemotion::protobuf::messages::MotionMode>() {
  return ::indiemotion::protobuf::messages::MotionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
