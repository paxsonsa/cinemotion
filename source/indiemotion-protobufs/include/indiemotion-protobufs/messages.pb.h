// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "payload.v1.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace indiemotion {
namespace protobuf {
namespace messages {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace messages
}  // namespace protobuf
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotion::protobuf::messages::Header* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::Header>(Arena*);
template<> ::indiemotion::protobuf::messages::Message* Arena::CreateMaybeMessage<::indiemotion::protobuf::messages::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotion {
namespace protobuf {
namespace messages {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return new Header();
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kResponseIdFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string responseId = 3;
  bool has_responseid() const;
  private:
  bool _internal_has_responseid() const;
  public:
  void clear_responseid();
  const std::string& responseid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responseid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responseid();
  PROTOBUF_MUST_USE_RESULT std::string* release_responseid();
  void set_allocated_responseid(std::string* responseid);
  private:
  const std::string& _internal_responseid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responseid(const std::string& value);
  std::string* _internal_mutable_responseid();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responseid_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotion.protobuf.messages.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAcknowledge = 20,
    kError = 25,
    kGetCameraList = 30,
    kCameraList = 31,
    kMotionSetMode = 40,
    kMotionGetMode = 41,
    kMotionActiveMode = 42,
    kMotionXform = 43,
    kSessionStart = 50,
    kSessionActivate = 51,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotion.protobuf.messages.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAcknowledgeFieldNumber = 20,
    kErrorFieldNumber = 25,
    kGetCameraListFieldNumber = 30,
    kCameraListFieldNumber = 31,
    kMotionSetModeFieldNumber = 40,
    kMotionGetModeFieldNumber = 41,
    kMotionActiveModeFieldNumber = 42,
    kMotionXformFieldNumber = 43,
    kSessionStartFieldNumber = 50,
    kSessionActivateFieldNumber = 51,
  };
  // .indiemotion.protobuf.messages.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::indiemotion::protobuf::messages::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::messages::Header* release_header();
  ::indiemotion::protobuf::messages::Header* mutable_header();
  void set_allocated_header(::indiemotion::protobuf::messages::Header* header);
  private:
  const ::indiemotion::protobuf::messages::Header& _internal_header() const;
  ::indiemotion::protobuf::messages::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::indiemotion::protobuf::messages::Header* header);
  ::indiemotion::protobuf::messages::Header* unsafe_arena_release_header();

  // .indiemotion.protobuf.payloads.v1.Acknowledge acknowledge = 20;
  bool has_acknowledge() const;
  private:
  bool _internal_has_acknowledge() const;
  public:
  void clear_acknowledge();
  const ::indiemotion::protobuf::payloads::v1::Acknowledge& acknowledge() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::Acknowledge* release_acknowledge();
  ::indiemotion::protobuf::payloads::v1::Acknowledge* mutable_acknowledge();
  void set_allocated_acknowledge(::indiemotion::protobuf::payloads::v1::Acknowledge* acknowledge);
  private:
  const ::indiemotion::protobuf::payloads::v1::Acknowledge& _internal_acknowledge() const;
  ::indiemotion::protobuf::payloads::v1::Acknowledge* _internal_mutable_acknowledge();
  public:
  void unsafe_arena_set_allocated_acknowledge(
      ::indiemotion::protobuf::payloads::v1::Acknowledge* acknowledge);
  ::indiemotion::protobuf::payloads::v1::Acknowledge* unsafe_arena_release_acknowledge();

  // .indiemotion.protobuf.payloads.v1.Error error = 25;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::indiemotion::protobuf::payloads::v1::Error& error() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::Error* release_error();
  ::indiemotion::protobuf::payloads::v1::Error* mutable_error();
  void set_allocated_error(::indiemotion::protobuf::payloads::v1::Error* error);
  private:
  const ::indiemotion::protobuf::payloads::v1::Error& _internal_error() const;
  ::indiemotion::protobuf::payloads::v1::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::indiemotion::protobuf::payloads::v1::Error* error);
  ::indiemotion::protobuf::payloads::v1::Error* unsafe_arena_release_error();

  // .indiemotion.protobuf.payloads.v1.GetCameraList get_camera_list = 30;
  bool has_get_camera_list() const;
  private:
  bool _internal_has_get_camera_list() const;
  public:
  void clear_get_camera_list();
  const ::indiemotion::protobuf::payloads::v1::GetCameraList& get_camera_list() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::GetCameraList* release_get_camera_list();
  ::indiemotion::protobuf::payloads::v1::GetCameraList* mutable_get_camera_list();
  void set_allocated_get_camera_list(::indiemotion::protobuf::payloads::v1::GetCameraList* get_camera_list);
  private:
  const ::indiemotion::protobuf::payloads::v1::GetCameraList& _internal_get_camera_list() const;
  ::indiemotion::protobuf::payloads::v1::GetCameraList* _internal_mutable_get_camera_list();
  public:
  void unsafe_arena_set_allocated_get_camera_list(
      ::indiemotion::protobuf::payloads::v1::GetCameraList* get_camera_list);
  ::indiemotion::protobuf::payloads::v1::GetCameraList* unsafe_arena_release_get_camera_list();

  // .indiemotion.protobuf.payloads.v1.CameraList camera_list = 31;
  bool has_camera_list() const;
  private:
  bool _internal_has_camera_list() const;
  public:
  void clear_camera_list();
  const ::indiemotion::protobuf::payloads::v1::CameraList& camera_list() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::CameraList* release_camera_list();
  ::indiemotion::protobuf::payloads::v1::CameraList* mutable_camera_list();
  void set_allocated_camera_list(::indiemotion::protobuf::payloads::v1::CameraList* camera_list);
  private:
  const ::indiemotion::protobuf::payloads::v1::CameraList& _internal_camera_list() const;
  ::indiemotion::protobuf::payloads::v1::CameraList* _internal_mutable_camera_list();
  public:
  void unsafe_arena_set_allocated_camera_list(
      ::indiemotion::protobuf::payloads::v1::CameraList* camera_list);
  ::indiemotion::protobuf::payloads::v1::CameraList* unsafe_arena_release_camera_list();

  // .indiemotion.protobuf.payloads.v1.MotionSetMode motion_set_mode = 40;
  bool has_motion_set_mode() const;
  private:
  bool _internal_has_motion_set_mode() const;
  public:
  void clear_motion_set_mode();
  const ::indiemotion::protobuf::payloads::v1::MotionSetMode& motion_set_mode() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::MotionSetMode* release_motion_set_mode();
  ::indiemotion::protobuf::payloads::v1::MotionSetMode* mutable_motion_set_mode();
  void set_allocated_motion_set_mode(::indiemotion::protobuf::payloads::v1::MotionSetMode* motion_set_mode);
  private:
  const ::indiemotion::protobuf::payloads::v1::MotionSetMode& _internal_motion_set_mode() const;
  ::indiemotion::protobuf::payloads::v1::MotionSetMode* _internal_mutable_motion_set_mode();
  public:
  void unsafe_arena_set_allocated_motion_set_mode(
      ::indiemotion::protobuf::payloads::v1::MotionSetMode* motion_set_mode);
  ::indiemotion::protobuf::payloads::v1::MotionSetMode* unsafe_arena_release_motion_set_mode();

  // .indiemotion.protobuf.payloads.v1.MotionGetMode motion_get_mode = 41;
  bool has_motion_get_mode() const;
  private:
  bool _internal_has_motion_get_mode() const;
  public:
  void clear_motion_get_mode();
  const ::indiemotion::protobuf::payloads::v1::MotionGetMode& motion_get_mode() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::MotionGetMode* release_motion_get_mode();
  ::indiemotion::protobuf::payloads::v1::MotionGetMode* mutable_motion_get_mode();
  void set_allocated_motion_get_mode(::indiemotion::protobuf::payloads::v1::MotionGetMode* motion_get_mode);
  private:
  const ::indiemotion::protobuf::payloads::v1::MotionGetMode& _internal_motion_get_mode() const;
  ::indiemotion::protobuf::payloads::v1::MotionGetMode* _internal_mutable_motion_get_mode();
  public:
  void unsafe_arena_set_allocated_motion_get_mode(
      ::indiemotion::protobuf::payloads::v1::MotionGetMode* motion_get_mode);
  ::indiemotion::protobuf::payloads::v1::MotionGetMode* unsafe_arena_release_motion_get_mode();

  // .indiemotion.protobuf.payloads.v1.MotionActiveMode motion_active_mode = 42;
  bool has_motion_active_mode() const;
  private:
  bool _internal_has_motion_active_mode() const;
  public:
  void clear_motion_active_mode();
  const ::indiemotion::protobuf::payloads::v1::MotionActiveMode& motion_active_mode() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::MotionActiveMode* release_motion_active_mode();
  ::indiemotion::protobuf::payloads::v1::MotionActiveMode* mutable_motion_active_mode();
  void set_allocated_motion_active_mode(::indiemotion::protobuf::payloads::v1::MotionActiveMode* motion_active_mode);
  private:
  const ::indiemotion::protobuf::payloads::v1::MotionActiveMode& _internal_motion_active_mode() const;
  ::indiemotion::protobuf::payloads::v1::MotionActiveMode* _internal_mutable_motion_active_mode();
  public:
  void unsafe_arena_set_allocated_motion_active_mode(
      ::indiemotion::protobuf::payloads::v1::MotionActiveMode* motion_active_mode);
  ::indiemotion::protobuf::payloads::v1::MotionActiveMode* unsafe_arena_release_motion_active_mode();

  // .indiemotion.protobuf.payloads.v1.MotionXForm motion_xform = 43;
  bool has_motion_xform() const;
  private:
  bool _internal_has_motion_xform() const;
  public:
  void clear_motion_xform();
  const ::indiemotion::protobuf::payloads::v1::MotionXForm& motion_xform() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::MotionXForm* release_motion_xform();
  ::indiemotion::protobuf::payloads::v1::MotionXForm* mutable_motion_xform();
  void set_allocated_motion_xform(::indiemotion::protobuf::payloads::v1::MotionXForm* motion_xform);
  private:
  const ::indiemotion::protobuf::payloads::v1::MotionXForm& _internal_motion_xform() const;
  ::indiemotion::protobuf::payloads::v1::MotionXForm* _internal_mutable_motion_xform();
  public:
  void unsafe_arena_set_allocated_motion_xform(
      ::indiemotion::protobuf::payloads::v1::MotionXForm* motion_xform);
  ::indiemotion::protobuf::payloads::v1::MotionXForm* unsafe_arena_release_motion_xform();

  // .indiemotion.protobuf.payloads.v1.SessionStart session_start = 50;
  bool has_session_start() const;
  private:
  bool _internal_has_session_start() const;
  public:
  void clear_session_start();
  const ::indiemotion::protobuf::payloads::v1::SessionStart& session_start() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::SessionStart* release_session_start();
  ::indiemotion::protobuf::payloads::v1::SessionStart* mutable_session_start();
  void set_allocated_session_start(::indiemotion::protobuf::payloads::v1::SessionStart* session_start);
  private:
  const ::indiemotion::protobuf::payloads::v1::SessionStart& _internal_session_start() const;
  ::indiemotion::protobuf::payloads::v1::SessionStart* _internal_mutable_session_start();
  public:
  void unsafe_arena_set_allocated_session_start(
      ::indiemotion::protobuf::payloads::v1::SessionStart* session_start);
  ::indiemotion::protobuf::payloads::v1::SessionStart* unsafe_arena_release_session_start();

  // .indiemotion.protobuf.payloads.v1.SessionActivate session_activate = 51;
  bool has_session_activate() const;
  private:
  bool _internal_has_session_activate() const;
  public:
  void clear_session_activate();
  const ::indiemotion::protobuf::payloads::v1::SessionActivate& session_activate() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotion::protobuf::payloads::v1::SessionActivate* release_session_activate();
  ::indiemotion::protobuf::payloads::v1::SessionActivate* mutable_session_activate();
  void set_allocated_session_activate(::indiemotion::protobuf::payloads::v1::SessionActivate* session_activate);
  private:
  const ::indiemotion::protobuf::payloads::v1::SessionActivate& _internal_session_activate() const;
  ::indiemotion::protobuf::payloads::v1::SessionActivate* _internal_mutable_session_activate();
  public:
  void unsafe_arena_set_allocated_session_activate(
      ::indiemotion::protobuf::payloads::v1::SessionActivate* session_activate);
  ::indiemotion::protobuf::payloads::v1::SessionActivate* unsafe_arena_release_session_activate();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:indiemotion.protobuf.messages.Message)
 private:
  class _Internal;
  void set_has_acknowledge();
  void set_has_error();
  void set_has_get_camera_list();
  void set_has_camera_list();
  void set_has_motion_set_mode();
  void set_has_motion_get_mode();
  void set_has_motion_active_mode();
  void set_has_motion_xform();
  void set_has_session_start();
  void set_has_session_activate();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotion::protobuf::messages::Header* header_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::indiemotion::protobuf::payloads::v1::Acknowledge* acknowledge_;
    ::indiemotion::protobuf::payloads::v1::Error* error_;
    ::indiemotion::protobuf::payloads::v1::GetCameraList* get_camera_list_;
    ::indiemotion::protobuf::payloads::v1::CameraList* camera_list_;
    ::indiemotion::protobuf::payloads::v1::MotionSetMode* motion_set_mode_;
    ::indiemotion::protobuf::payloads::v1::MotionGetMode* motion_get_mode_;
    ::indiemotion::protobuf::payloads::v1::MotionActiveMode* motion_active_mode_;
    ::indiemotion::protobuf::payloads::v1::MotionXForm* motion_xform_;
    ::indiemotion::protobuf::payloads::v1::SessionStart* session_start_;
    ::indiemotion::protobuf::payloads::v1::SessionActivate* session_activate_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// .google.protobuf.Timestamp timestamp = 1;
inline bool Header::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Header::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Header::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Header::timestamp() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Header.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Header::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Header::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Header.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Header::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Header::mutable_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Header.timestamp)
  return _msg;
}
inline void Header::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.Header.timestamp)
}

// string id = 2;
inline void Header::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Header::id() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Header.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.Header.id)
}
inline std::string* Header::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Header.id)
  return _s;
}
inline const std::string& Header::_internal_id() const {
  return id_.Get();
}
inline void Header::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_id() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Header.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.Header.id)
}

// optional string responseId = 3;
inline bool Header::_internal_has_responseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_responseid() const {
  return _internal_has_responseid();
}
inline void Header::clear_responseid() {
  responseid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::responseid() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Header.responseId)
  return _internal_responseid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_responseid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotion.protobuf.messages.Header.responseId)
}
inline std::string* Header::mutable_responseid() {
  std::string* _s = _internal_mutable_responseid();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Header.responseId)
  return _s;
}
inline const std::string& Header::_internal_responseid() const {
  return responseid_.Get();
}
inline void Header::_internal_set_responseid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_responseid() {
  _has_bits_[0] |= 0x00000001u;
  return responseid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_responseid() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Header.responseId)
  if (!_internal_has_responseid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return responseid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_responseid(std::string* responseid) {
  if (responseid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  responseid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responseid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.Header.responseId)
}

// -------------------------------------------------------------------

// Message

// .indiemotion.protobuf.messages.Header header = 1;
inline bool Message::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message::has_header() const {
  return _internal_has_header();
}
inline void Message::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::indiemotion::protobuf::messages::Header& Message::_internal_header() const {
  const ::indiemotion::protobuf::messages::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotion::protobuf::messages::Header&>(
      ::indiemotion::protobuf::messages::_Header_default_instance_);
}
inline const ::indiemotion::protobuf::messages::Header& Message::header() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.header)
  return _internal_header();
}
inline void Message::unsafe_arena_set_allocated_header(
    ::indiemotion::protobuf::messages::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.header)
}
inline ::indiemotion::protobuf::messages::Header* Message::release_header() {
  
  ::indiemotion::protobuf::messages::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotion::protobuf::messages::Header* Message::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.header)
  
  ::indiemotion::protobuf::messages::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::indiemotion::protobuf::messages::Header* Message::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotion::protobuf::messages::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::indiemotion::protobuf::messages::Header* Message::mutable_header() {
  ::indiemotion::protobuf::messages::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.header)
  return _msg;
}
inline void Message::set_allocated_header(::indiemotion::protobuf::messages::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotion::protobuf::messages::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.messages.Message.header)
}

// .indiemotion.protobuf.payloads.v1.Acknowledge acknowledge = 20;
inline bool Message::_internal_has_acknowledge() const {
  return payload_case() == kAcknowledge;
}
inline bool Message::has_acknowledge() const {
  return _internal_has_acknowledge();
}
inline void Message::set_has_acknowledge() {
  _oneof_case_[0] = kAcknowledge;
}
inline ::indiemotion::protobuf::payloads::v1::Acknowledge* Message::release_acknowledge() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::Acknowledge* temp = payload_.acknowledge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::Acknowledge& Message::_internal_acknowledge() const {
  return _internal_has_acknowledge()
      ? *payload_.acknowledge_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::Acknowledge&>(::indiemotion::protobuf::payloads::v1::_Acknowledge_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::Acknowledge& Message::acknowledge() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.acknowledge)
  return _internal_acknowledge();
}
inline ::indiemotion::protobuf::payloads::v1::Acknowledge* Message::unsafe_arena_release_acknowledge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::Acknowledge* temp = payload_.acknowledge_;
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_acknowledge(::indiemotion::protobuf::payloads::v1::Acknowledge* acknowledge) {
  clear_payload();
  if (acknowledge) {
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.acknowledge)
}
inline ::indiemotion::protobuf::payloads::v1::Acknowledge* Message::_internal_mutable_acknowledge() {
  if (!_internal_has_acknowledge()) {
    clear_payload();
    set_has_acknowledge();
    payload_.acknowledge_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::Acknowledge >(GetArenaForAllocation());
  }
  return payload_.acknowledge_;
}
inline ::indiemotion::protobuf::payloads::v1::Acknowledge* Message::mutable_acknowledge() {
  ::indiemotion::protobuf::payloads::v1::Acknowledge* _msg = _internal_mutable_acknowledge();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.acknowledge)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.Error error = 25;
inline bool Message::_internal_has_error() const {
  return payload_case() == kError;
}
inline bool Message::has_error() const {
  return _internal_has_error();
}
inline void Message::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::indiemotion::protobuf::payloads::v1::Error* Message::release_error() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.error)
  if (_internal_has_error()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::Error* temp = payload_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::Error& Message::_internal_error() const {
  return _internal_has_error()
      ? *payload_.error_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::Error&>(::indiemotion::protobuf::payloads::v1::_Error_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::Error& Message::error() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.error)
  return _internal_error();
}
inline ::indiemotion::protobuf::payloads::v1::Error* Message::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.error)
  if (_internal_has_error()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::Error* temp = payload_.error_;
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_error(::indiemotion::protobuf::payloads::v1::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.error)
}
inline ::indiemotion::protobuf::payloads::v1::Error* Message::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::Error >(GetArenaForAllocation());
  }
  return payload_.error_;
}
inline ::indiemotion::protobuf::payloads::v1::Error* Message::mutable_error() {
  ::indiemotion::protobuf::payloads::v1::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.error)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.GetCameraList get_camera_list = 30;
inline bool Message::_internal_has_get_camera_list() const {
  return payload_case() == kGetCameraList;
}
inline bool Message::has_get_camera_list() const {
  return _internal_has_get_camera_list();
}
inline void Message::set_has_get_camera_list() {
  _oneof_case_[0] = kGetCameraList;
}
inline ::indiemotion::protobuf::payloads::v1::GetCameraList* Message::release_get_camera_list() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.get_camera_list)
  if (_internal_has_get_camera_list()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::GetCameraList* temp = payload_.get_camera_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.get_camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::GetCameraList& Message::_internal_get_camera_list() const {
  return _internal_has_get_camera_list()
      ? *payload_.get_camera_list_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::GetCameraList&>(::indiemotion::protobuf::payloads::v1::_GetCameraList_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::GetCameraList& Message::get_camera_list() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.get_camera_list)
  return _internal_get_camera_list();
}
inline ::indiemotion::protobuf::payloads::v1::GetCameraList* Message::unsafe_arena_release_get_camera_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.get_camera_list)
  if (_internal_has_get_camera_list()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::GetCameraList* temp = payload_.get_camera_list_;
    payload_.get_camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_get_camera_list(::indiemotion::protobuf::payloads::v1::GetCameraList* get_camera_list) {
  clear_payload();
  if (get_camera_list) {
    set_has_get_camera_list();
    payload_.get_camera_list_ = get_camera_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.get_camera_list)
}
inline ::indiemotion::protobuf::payloads::v1::GetCameraList* Message::_internal_mutable_get_camera_list() {
  if (!_internal_has_get_camera_list()) {
    clear_payload();
    set_has_get_camera_list();
    payload_.get_camera_list_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::GetCameraList >(GetArenaForAllocation());
  }
  return payload_.get_camera_list_;
}
inline ::indiemotion::protobuf::payloads::v1::GetCameraList* Message::mutable_get_camera_list() {
  ::indiemotion::protobuf::payloads::v1::GetCameraList* _msg = _internal_mutable_get_camera_list();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.get_camera_list)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.CameraList camera_list = 31;
inline bool Message::_internal_has_camera_list() const {
  return payload_case() == kCameraList;
}
inline bool Message::has_camera_list() const {
  return _internal_has_camera_list();
}
inline void Message::set_has_camera_list() {
  _oneof_case_[0] = kCameraList;
}
inline ::indiemotion::protobuf::payloads::v1::CameraList* Message::release_camera_list() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.camera_list)
  if (_internal_has_camera_list()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::CameraList* temp = payload_.camera_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::CameraList& Message::_internal_camera_list() const {
  return _internal_has_camera_list()
      ? *payload_.camera_list_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::CameraList&>(::indiemotion::protobuf::payloads::v1::_CameraList_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::CameraList& Message::camera_list() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.camera_list)
  return _internal_camera_list();
}
inline ::indiemotion::protobuf::payloads::v1::CameraList* Message::unsafe_arena_release_camera_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.camera_list)
  if (_internal_has_camera_list()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::CameraList* temp = payload_.camera_list_;
    payload_.camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_camera_list(::indiemotion::protobuf::payloads::v1::CameraList* camera_list) {
  clear_payload();
  if (camera_list) {
    set_has_camera_list();
    payload_.camera_list_ = camera_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.camera_list)
}
inline ::indiemotion::protobuf::payloads::v1::CameraList* Message::_internal_mutable_camera_list() {
  if (!_internal_has_camera_list()) {
    clear_payload();
    set_has_camera_list();
    payload_.camera_list_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::CameraList >(GetArenaForAllocation());
  }
  return payload_.camera_list_;
}
inline ::indiemotion::protobuf::payloads::v1::CameraList* Message::mutable_camera_list() {
  ::indiemotion::protobuf::payloads::v1::CameraList* _msg = _internal_mutable_camera_list();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.camera_list)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.MotionSetMode motion_set_mode = 40;
inline bool Message::_internal_has_motion_set_mode() const {
  return payload_case() == kMotionSetMode;
}
inline bool Message::has_motion_set_mode() const {
  return _internal_has_motion_set_mode();
}
inline void Message::set_has_motion_set_mode() {
  _oneof_case_[0] = kMotionSetMode;
}
inline ::indiemotion::protobuf::payloads::v1::MotionSetMode* Message::release_motion_set_mode() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.motion_set_mode)
  if (_internal_has_motion_set_mode()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::MotionSetMode* temp = payload_.motion_set_mode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_set_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::MotionSetMode& Message::_internal_motion_set_mode() const {
  return _internal_has_motion_set_mode()
      ? *payload_.motion_set_mode_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::MotionSetMode&>(::indiemotion::protobuf::payloads::v1::_MotionSetMode_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::MotionSetMode& Message::motion_set_mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.motion_set_mode)
  return _internal_motion_set_mode();
}
inline ::indiemotion::protobuf::payloads::v1::MotionSetMode* Message::unsafe_arena_release_motion_set_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.motion_set_mode)
  if (_internal_has_motion_set_mode()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::MotionSetMode* temp = payload_.motion_set_mode_;
    payload_.motion_set_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_motion_set_mode(::indiemotion::protobuf::payloads::v1::MotionSetMode* motion_set_mode) {
  clear_payload();
  if (motion_set_mode) {
    set_has_motion_set_mode();
    payload_.motion_set_mode_ = motion_set_mode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.motion_set_mode)
}
inline ::indiemotion::protobuf::payloads::v1::MotionSetMode* Message::_internal_mutable_motion_set_mode() {
  if (!_internal_has_motion_set_mode()) {
    clear_payload();
    set_has_motion_set_mode();
    payload_.motion_set_mode_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::MotionSetMode >(GetArenaForAllocation());
  }
  return payload_.motion_set_mode_;
}
inline ::indiemotion::protobuf::payloads::v1::MotionSetMode* Message::mutable_motion_set_mode() {
  ::indiemotion::protobuf::payloads::v1::MotionSetMode* _msg = _internal_mutable_motion_set_mode();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.motion_set_mode)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.MotionGetMode motion_get_mode = 41;
inline bool Message::_internal_has_motion_get_mode() const {
  return payload_case() == kMotionGetMode;
}
inline bool Message::has_motion_get_mode() const {
  return _internal_has_motion_get_mode();
}
inline void Message::set_has_motion_get_mode() {
  _oneof_case_[0] = kMotionGetMode;
}
inline ::indiemotion::protobuf::payloads::v1::MotionGetMode* Message::release_motion_get_mode() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.motion_get_mode)
  if (_internal_has_motion_get_mode()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::MotionGetMode* temp = payload_.motion_get_mode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_get_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::MotionGetMode& Message::_internal_motion_get_mode() const {
  return _internal_has_motion_get_mode()
      ? *payload_.motion_get_mode_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::MotionGetMode&>(::indiemotion::protobuf::payloads::v1::_MotionGetMode_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::MotionGetMode& Message::motion_get_mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.motion_get_mode)
  return _internal_motion_get_mode();
}
inline ::indiemotion::protobuf::payloads::v1::MotionGetMode* Message::unsafe_arena_release_motion_get_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.motion_get_mode)
  if (_internal_has_motion_get_mode()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::MotionGetMode* temp = payload_.motion_get_mode_;
    payload_.motion_get_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_motion_get_mode(::indiemotion::protobuf::payloads::v1::MotionGetMode* motion_get_mode) {
  clear_payload();
  if (motion_get_mode) {
    set_has_motion_get_mode();
    payload_.motion_get_mode_ = motion_get_mode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.motion_get_mode)
}
inline ::indiemotion::protobuf::payloads::v1::MotionGetMode* Message::_internal_mutable_motion_get_mode() {
  if (!_internal_has_motion_get_mode()) {
    clear_payload();
    set_has_motion_get_mode();
    payload_.motion_get_mode_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::MotionGetMode >(GetArenaForAllocation());
  }
  return payload_.motion_get_mode_;
}
inline ::indiemotion::protobuf::payloads::v1::MotionGetMode* Message::mutable_motion_get_mode() {
  ::indiemotion::protobuf::payloads::v1::MotionGetMode* _msg = _internal_mutable_motion_get_mode();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.motion_get_mode)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.MotionActiveMode motion_active_mode = 42;
inline bool Message::_internal_has_motion_active_mode() const {
  return payload_case() == kMotionActiveMode;
}
inline bool Message::has_motion_active_mode() const {
  return _internal_has_motion_active_mode();
}
inline void Message::set_has_motion_active_mode() {
  _oneof_case_[0] = kMotionActiveMode;
}
inline ::indiemotion::protobuf::payloads::v1::MotionActiveMode* Message::release_motion_active_mode() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.motion_active_mode)
  if (_internal_has_motion_active_mode()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::MotionActiveMode* temp = payload_.motion_active_mode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_active_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::MotionActiveMode& Message::_internal_motion_active_mode() const {
  return _internal_has_motion_active_mode()
      ? *payload_.motion_active_mode_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::MotionActiveMode&>(::indiemotion::protobuf::payloads::v1::_MotionActiveMode_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::MotionActiveMode& Message::motion_active_mode() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.motion_active_mode)
  return _internal_motion_active_mode();
}
inline ::indiemotion::protobuf::payloads::v1::MotionActiveMode* Message::unsafe_arena_release_motion_active_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.motion_active_mode)
  if (_internal_has_motion_active_mode()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::MotionActiveMode* temp = payload_.motion_active_mode_;
    payload_.motion_active_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_motion_active_mode(::indiemotion::protobuf::payloads::v1::MotionActiveMode* motion_active_mode) {
  clear_payload();
  if (motion_active_mode) {
    set_has_motion_active_mode();
    payload_.motion_active_mode_ = motion_active_mode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.motion_active_mode)
}
inline ::indiemotion::protobuf::payloads::v1::MotionActiveMode* Message::_internal_mutable_motion_active_mode() {
  if (!_internal_has_motion_active_mode()) {
    clear_payload();
    set_has_motion_active_mode();
    payload_.motion_active_mode_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::MotionActiveMode >(GetArenaForAllocation());
  }
  return payload_.motion_active_mode_;
}
inline ::indiemotion::protobuf::payloads::v1::MotionActiveMode* Message::mutable_motion_active_mode() {
  ::indiemotion::protobuf::payloads::v1::MotionActiveMode* _msg = _internal_mutable_motion_active_mode();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.motion_active_mode)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.MotionXForm motion_xform = 43;
inline bool Message::_internal_has_motion_xform() const {
  return payload_case() == kMotionXform;
}
inline bool Message::has_motion_xform() const {
  return _internal_has_motion_xform();
}
inline void Message::set_has_motion_xform() {
  _oneof_case_[0] = kMotionXform;
}
inline ::indiemotion::protobuf::payloads::v1::MotionXForm* Message::release_motion_xform() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.motion_xform)
  if (_internal_has_motion_xform()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::MotionXForm* temp = payload_.motion_xform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_xform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::MotionXForm& Message::_internal_motion_xform() const {
  return _internal_has_motion_xform()
      ? *payload_.motion_xform_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::MotionXForm&>(::indiemotion::protobuf::payloads::v1::_MotionXForm_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::MotionXForm& Message::motion_xform() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.motion_xform)
  return _internal_motion_xform();
}
inline ::indiemotion::protobuf::payloads::v1::MotionXForm* Message::unsafe_arena_release_motion_xform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.motion_xform)
  if (_internal_has_motion_xform()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::MotionXForm* temp = payload_.motion_xform_;
    payload_.motion_xform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_motion_xform(::indiemotion::protobuf::payloads::v1::MotionXForm* motion_xform) {
  clear_payload();
  if (motion_xform) {
    set_has_motion_xform();
    payload_.motion_xform_ = motion_xform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.motion_xform)
}
inline ::indiemotion::protobuf::payloads::v1::MotionXForm* Message::_internal_mutable_motion_xform() {
  if (!_internal_has_motion_xform()) {
    clear_payload();
    set_has_motion_xform();
    payload_.motion_xform_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::MotionXForm >(GetArenaForAllocation());
  }
  return payload_.motion_xform_;
}
inline ::indiemotion::protobuf::payloads::v1::MotionXForm* Message::mutable_motion_xform() {
  ::indiemotion::protobuf::payloads::v1::MotionXForm* _msg = _internal_mutable_motion_xform();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.motion_xform)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.SessionStart session_start = 50;
inline bool Message::_internal_has_session_start() const {
  return payload_case() == kSessionStart;
}
inline bool Message::has_session_start() const {
  return _internal_has_session_start();
}
inline void Message::set_has_session_start() {
  _oneof_case_[0] = kSessionStart;
}
inline ::indiemotion::protobuf::payloads::v1::SessionStart* Message::release_session_start() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.session_start)
  if (_internal_has_session_start()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::SessionStart* temp = payload_.session_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.session_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::SessionStart& Message::_internal_session_start() const {
  return _internal_has_session_start()
      ? *payload_.session_start_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::SessionStart&>(::indiemotion::protobuf::payloads::v1::_SessionStart_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::SessionStart& Message::session_start() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.session_start)
  return _internal_session_start();
}
inline ::indiemotion::protobuf::payloads::v1::SessionStart* Message::unsafe_arena_release_session_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.session_start)
  if (_internal_has_session_start()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::SessionStart* temp = payload_.session_start_;
    payload_.session_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_session_start(::indiemotion::protobuf::payloads::v1::SessionStart* session_start) {
  clear_payload();
  if (session_start) {
    set_has_session_start();
    payload_.session_start_ = session_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.session_start)
}
inline ::indiemotion::protobuf::payloads::v1::SessionStart* Message::_internal_mutable_session_start() {
  if (!_internal_has_session_start()) {
    clear_payload();
    set_has_session_start();
    payload_.session_start_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::SessionStart >(GetArenaForAllocation());
  }
  return payload_.session_start_;
}
inline ::indiemotion::protobuf::payloads::v1::SessionStart* Message::mutable_session_start() {
  ::indiemotion::protobuf::payloads::v1::SessionStart* _msg = _internal_mutable_session_start();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.session_start)
  return _msg;
}

// .indiemotion.protobuf.payloads.v1.SessionActivate session_activate = 51;
inline bool Message::_internal_has_session_activate() const {
  return payload_case() == kSessionActivate;
}
inline bool Message::has_session_activate() const {
  return _internal_has_session_activate();
}
inline void Message::set_has_session_activate() {
  _oneof_case_[0] = kSessionActivate;
}
inline ::indiemotion::protobuf::payloads::v1::SessionActivate* Message::release_session_activate() {
  // @@protoc_insertion_point(field_release:indiemotion.protobuf.messages.Message.session_activate)
  if (_internal_has_session_activate()) {
    clear_has_payload();
      ::indiemotion::protobuf::payloads::v1::SessionActivate* temp = payload_.session_activate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.session_activate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotion::protobuf::payloads::v1::SessionActivate& Message::_internal_session_activate() const {
  return _internal_has_session_activate()
      ? *payload_.session_activate_
      : reinterpret_cast< ::indiemotion::protobuf::payloads::v1::SessionActivate&>(::indiemotion::protobuf::payloads::v1::_SessionActivate_default_instance_);
}
inline const ::indiemotion::protobuf::payloads::v1::SessionActivate& Message::session_activate() const {
  // @@protoc_insertion_point(field_get:indiemotion.protobuf.messages.Message.session_activate)
  return _internal_session_activate();
}
inline ::indiemotion::protobuf::payloads::v1::SessionActivate* Message::unsafe_arena_release_session_activate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotion.protobuf.messages.Message.session_activate)
  if (_internal_has_session_activate()) {
    clear_has_payload();
    ::indiemotion::protobuf::payloads::v1::SessionActivate* temp = payload_.session_activate_;
    payload_.session_activate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_session_activate(::indiemotion::protobuf::payloads::v1::SessionActivate* session_activate) {
  clear_payload();
  if (session_activate) {
    set_has_session_activate();
    payload_.session_activate_ = session_activate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotion.protobuf.messages.Message.session_activate)
}
inline ::indiemotion::protobuf::payloads::v1::SessionActivate* Message::_internal_mutable_session_activate() {
  if (!_internal_has_session_activate()) {
    clear_payload();
    set_has_session_activate();
    payload_.session_activate_ = CreateMaybeMessage< ::indiemotion::protobuf::payloads::v1::SessionActivate >(GetArenaForAllocation());
  }
  return payload_.session_activate_;
}
inline ::indiemotion::protobuf::payloads::v1::SessionActivate* Message::mutable_session_activate() {
  ::indiemotion::protobuf::payloads::v1::SessionActivate* _msg = _internal_mutable_session_activate();
  // @@protoc_insertion_point(field_mutable:indiemotion.protobuf.messages.Message.session_activate)
  return _msg;
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace protobuf
}  // namespace indiemotion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
