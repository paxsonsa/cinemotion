// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace indiemotion {
namespace protobuf {
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , responseid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , requires_response_(false){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace protobuf
}  // namespace indiemotion
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Header, timestamp_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Header, id_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Header, requires_response_),
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Header, responseid_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Message, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::indiemotion::protobuf::Message, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::indiemotion::protobuf::Header)},
  { 13, -1, sizeof(::indiemotion::protobuf::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotion::protobuf::_Message_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\024indiemotion.protobuf\032\037"
  "google/protobuf/timestamp.proto\032\020payload"
  ".v1.proto\"\206\001\n\006Header\022-\n\ttimestamp\030\n \001(\0132"
  "\032.google.protobuf.Timestamp\022\n\n\002id\030\024 \001(\t\022"
  "\031\n\021requires_response\030\036 \001(\010\022\027\n\nresponseId"
  "\030( \001(\tH\000\210\001\001B\r\n\013_responseId\"\274\007\n\007Message\022,"
  "\n\006header\030\001 \001(\0132\034.indiemotion.protobuf.He"
  "ader\022D\n\013acknowledge\030\024 \001(\0132-.indiemotion."
  "protobuf.payloads.v1.AcknowledgeH\000\0228\n\005er"
  "ror\030\031 \001(\0132\'.indiemotion.protobuf.payload"
  "s.v1.ErrorH\000\022J\n\017get_camera_list\030\036 \001(\0132/."
  "indiemotion.protobuf.payloads.v1.GetCame"
  "raListH\000\022C\n\013camera_list\030\037 \001(\0132,.indiemot"
  "ion.protobuf.payloads.v1.CameraListH\000\022N\n"
  "\021set_active_camera\030  \001(\01321.indiemotion.p"
  "rotobuf.payloads.v1.SetActiveCameraH\000\022N\n"
  "\021get_active_camera\030! \001(\01321.indiemotion.p"
  "rotobuf.payloads.v1.GetActiveCameraH\000\022J\n"
  "\017motion_set_mode\030( \001(\0132/.indiemotion.pro"
  "tobuf.payloads.v1.MotionSetModeH\000\022J\n\017mot"
  "ion_get_mode\030) \001(\0132/.indiemotion.protobu"
  "f.payloads.v1.MotionGetModeH\000\022P\n\022motion_"
  "active_mode\030* \001(\01322.indiemotion.protobuf"
  ".payloads.v1.MotionActiveModeH\000\022E\n\014motio"
  "n_xform\030+ \001(\0132-.indiemotion.protobuf.pay"
  "loads.v1.MotionXFormH\000\022G\n\rsession_start\030"
  "2 \001(\0132..indiemotion.protobuf.payloads.v1"
  ".SessionStartH\000\022M\n\020session_shutdown\0303 \001("
  "\01321.indiemotion.protobuf.payloads.v1.Ses"
  "sionShutdownH\000B\t\n\007payloadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_payload_2ev1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 1193, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace indiemotion {
namespace protobuf {

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Header* msg);
  static void set_has_responseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::timestamp(const Header* msg) {
  return *msg->timestamp_;
}
void Header::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  responseid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_responseid()) {
    responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responseid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  requires_response_ = from.requires_response_;
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.Header)
}

inline void Header::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
responseid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requires_response_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(requires_response_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responseid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    responseid_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  requires_response_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.Header.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool requires_response = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          requires_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string responseId = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_responseid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotion.protobuf.Header.responseId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 10;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::timestamp(this), target, stream);
  }

  // string id = 20;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.Header.id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_id(), target);
  }

  // bool requires_response = 30;
  if (this->_internal_requires_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_requires_response(), target);
  }

  // optional string responseId = 40;
  if (_internal_has_responseid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responseid().data(), static_cast<int>(this->_internal_responseid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotion.protobuf.Header.responseId");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_responseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 20;
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // optional string responseId = 40;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responseid());
  }

  // .google.protobuf.Timestamp timestamp = 10;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool requires_response = 30;
  if (this->_internal_requires_response() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_responseid()) {
    _internal_set_responseid(from._internal_responseid());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_requires_response() != 0) {
    _internal_set_requires_response(from._internal_requires_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &responseid_, GetArenaForAllocation(),
      &other->responseid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, requires_response_)
      + sizeof(Header::requires_response_)
      - PROTOBUF_FIELD_OFFSET(Header, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::indiemotion::protobuf::Header& header(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::Acknowledge& acknowledge(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::Error& error(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::GetCameraList& get_camera_list(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::CameraList& camera_list(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::SetActiveCamera& set_active_camera(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::GetActiveCamera& get_active_camera(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::MotionSetMode& motion_set_mode(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::MotionGetMode& motion_get_mode(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::MotionActiveMode& motion_active_mode(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::MotionXForm& motion_xform(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::SessionStart& session_start(const Message* msg);
  static const ::indiemotion::protobuf::payloads::v1::SessionShutdown& session_shutdown(const Message* msg);
};

const ::indiemotion::protobuf::Header&
Message::_Internal::header(const Message* msg) {
  return *msg->header_;
}
const ::indiemotion::protobuf::payloads::v1::Acknowledge&
Message::_Internal::acknowledge(const Message* msg) {
  return *msg->payload_.acknowledge_;
}
const ::indiemotion::protobuf::payloads::v1::Error&
Message::_Internal::error(const Message* msg) {
  return *msg->payload_.error_;
}
const ::indiemotion::protobuf::payloads::v1::GetCameraList&
Message::_Internal::get_camera_list(const Message* msg) {
  return *msg->payload_.get_camera_list_;
}
const ::indiemotion::protobuf::payloads::v1::CameraList&
Message::_Internal::camera_list(const Message* msg) {
  return *msg->payload_.camera_list_;
}
const ::indiemotion::protobuf::payloads::v1::SetActiveCamera&
Message::_Internal::set_active_camera(const Message* msg) {
  return *msg->payload_.set_active_camera_;
}
const ::indiemotion::protobuf::payloads::v1::GetActiveCamera&
Message::_Internal::get_active_camera(const Message* msg) {
  return *msg->payload_.get_active_camera_;
}
const ::indiemotion::protobuf::payloads::v1::MotionSetMode&
Message::_Internal::motion_set_mode(const Message* msg) {
  return *msg->payload_.motion_set_mode_;
}
const ::indiemotion::protobuf::payloads::v1::MotionGetMode&
Message::_Internal::motion_get_mode(const Message* msg) {
  return *msg->payload_.motion_get_mode_;
}
const ::indiemotion::protobuf::payloads::v1::MotionActiveMode&
Message::_Internal::motion_active_mode(const Message* msg) {
  return *msg->payload_.motion_active_mode_;
}
const ::indiemotion::protobuf::payloads::v1::MotionXForm&
Message::_Internal::motion_xform(const Message* msg) {
  return *msg->payload_.motion_xform_;
}
const ::indiemotion::protobuf::payloads::v1::SessionStart&
Message::_Internal::session_start(const Message* msg) {
  return *msg->payload_.session_start_;
}
const ::indiemotion::protobuf::payloads::v1::SessionShutdown&
Message::_Internal::session_shutdown(const Message* msg) {
  return *msg->payload_.session_shutdown_;
}
void Message::set_allocated_acknowledge(::indiemotion::protobuf::payloads::v1::Acknowledge* acknowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (acknowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acknowledge));
    if (message_arena != submessage_arena) {
      acknowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acknowledge, submessage_arena);
    }
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.acknowledge)
}
void Message::clear_acknowledge() {
  if (_internal_has_acknowledge()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.acknowledge_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_error(::indiemotion::protobuf::payloads::v1::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.error)
}
void Message::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.error_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_get_camera_list(::indiemotion::protobuf::payloads::v1::GetCameraList* get_camera_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_camera_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_camera_list));
    if (message_arena != submessage_arena) {
      get_camera_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_camera_list, submessage_arena);
    }
    set_has_get_camera_list();
    payload_.get_camera_list_ = get_camera_list;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.get_camera_list)
}
void Message::clear_get_camera_list() {
  if (_internal_has_get_camera_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.get_camera_list_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_camera_list(::indiemotion::protobuf::payloads::v1::CameraList* camera_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (camera_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_list));
    if (message_arena != submessage_arena) {
      camera_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_list, submessage_arena);
    }
    set_has_camera_list();
    payload_.camera_list_ = camera_list;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.camera_list)
}
void Message::clear_camera_list() {
  if (_internal_has_camera_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.camera_list_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_set_active_camera(::indiemotion::protobuf::payloads::v1::SetActiveCamera* set_active_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (set_active_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_active_camera));
    if (message_arena != submessage_arena) {
      set_active_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_active_camera, submessage_arena);
    }
    set_has_set_active_camera();
    payload_.set_active_camera_ = set_active_camera;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.set_active_camera)
}
void Message::clear_set_active_camera() {
  if (_internal_has_set_active_camera()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.set_active_camera_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_get_active_camera(::indiemotion::protobuf::payloads::v1::GetActiveCamera* get_active_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_active_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_active_camera));
    if (message_arena != submessage_arena) {
      get_active_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_active_camera, submessage_arena);
    }
    set_has_get_active_camera();
    payload_.get_active_camera_ = get_active_camera;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.get_active_camera)
}
void Message::clear_get_active_camera() {
  if (_internal_has_get_active_camera()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.get_active_camera_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_motion_set_mode(::indiemotion::protobuf::payloads::v1::MotionSetMode* motion_set_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_set_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_set_mode));
    if (message_arena != submessage_arena) {
      motion_set_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_set_mode, submessage_arena);
    }
    set_has_motion_set_mode();
    payload_.motion_set_mode_ = motion_set_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.motion_set_mode)
}
void Message::clear_motion_set_mode() {
  if (_internal_has_motion_set_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_set_mode_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_motion_get_mode(::indiemotion::protobuf::payloads::v1::MotionGetMode* motion_get_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_get_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_get_mode));
    if (message_arena != submessage_arena) {
      motion_get_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_get_mode, submessage_arena);
    }
    set_has_motion_get_mode();
    payload_.motion_get_mode_ = motion_get_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.motion_get_mode)
}
void Message::clear_motion_get_mode() {
  if (_internal_has_motion_get_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_get_mode_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_motion_active_mode(::indiemotion::protobuf::payloads::v1::MotionActiveMode* motion_active_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_active_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_active_mode));
    if (message_arena != submessage_arena) {
      motion_active_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_active_mode, submessage_arena);
    }
    set_has_motion_active_mode();
    payload_.motion_active_mode_ = motion_active_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.motion_active_mode)
}
void Message::clear_motion_active_mode() {
  if (_internal_has_motion_active_mode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_active_mode_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_motion_xform(::indiemotion::protobuf::payloads::v1::MotionXForm* motion_xform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_xform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_xform));
    if (message_arena != submessage_arena) {
      motion_xform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_xform, submessage_arena);
    }
    set_has_motion_xform();
    payload_.motion_xform_ = motion_xform;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.motion_xform)
}
void Message::clear_motion_xform() {
  if (_internal_has_motion_xform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_xform_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_session_start(::indiemotion::protobuf::payloads::v1::SessionStart* session_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (session_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_start));
    if (message_arena != submessage_arena) {
      session_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_start, submessage_arena);
    }
    set_has_session_start();
    payload_.session_start_ = session_start;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.session_start)
}
void Message::clear_session_start() {
  if (_internal_has_session_start()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.session_start_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_session_shutdown(::indiemotion::protobuf::payloads::v1::SessionShutdown* session_shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (session_shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_shutdown));
    if (message_arena != submessage_arena) {
      session_shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_shutdown, submessage_arena);
    }
    set_has_session_shutdown();
    payload_.session_shutdown_ = session_shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotion.protobuf.Message.session_shutdown)
}
void Message::clear_session_shutdown() {
  if (_internal_has_session_shutdown()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.session_shutdown_;
    }
    clear_has_payload();
  }
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotion.protobuf.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::indiemotion::protobuf::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kAcknowledge: {
      _internal_mutable_acknowledge()->::indiemotion::protobuf::payloads::v1::Acknowledge::MergeFrom(from._internal_acknowledge());
      break;
    }
    case kError: {
      _internal_mutable_error()->::indiemotion::protobuf::payloads::v1::Error::MergeFrom(from._internal_error());
      break;
    }
    case kGetCameraList: {
      _internal_mutable_get_camera_list()->::indiemotion::protobuf::payloads::v1::GetCameraList::MergeFrom(from._internal_get_camera_list());
      break;
    }
    case kCameraList: {
      _internal_mutable_camera_list()->::indiemotion::protobuf::payloads::v1::CameraList::MergeFrom(from._internal_camera_list());
      break;
    }
    case kSetActiveCamera: {
      _internal_mutable_set_active_camera()->::indiemotion::protobuf::payloads::v1::SetActiveCamera::MergeFrom(from._internal_set_active_camera());
      break;
    }
    case kGetActiveCamera: {
      _internal_mutable_get_active_camera()->::indiemotion::protobuf::payloads::v1::GetActiveCamera::MergeFrom(from._internal_get_active_camera());
      break;
    }
    case kMotionSetMode: {
      _internal_mutable_motion_set_mode()->::indiemotion::protobuf::payloads::v1::MotionSetMode::MergeFrom(from._internal_motion_set_mode());
      break;
    }
    case kMotionGetMode: {
      _internal_mutable_motion_get_mode()->::indiemotion::protobuf::payloads::v1::MotionGetMode::MergeFrom(from._internal_motion_get_mode());
      break;
    }
    case kMotionActiveMode: {
      _internal_mutable_motion_active_mode()->::indiemotion::protobuf::payloads::v1::MotionActiveMode::MergeFrom(from._internal_motion_active_mode());
      break;
    }
    case kMotionXform: {
      _internal_mutable_motion_xform()->::indiemotion::protobuf::payloads::v1::MotionXForm::MergeFrom(from._internal_motion_xform());
      break;
    }
    case kSessionStart: {
      _internal_mutable_session_start()->::indiemotion::protobuf::payloads::v1::SessionStart::MergeFrom(from._internal_session_start());
      break;
    }
    case kSessionShutdown: {
      _internal_mutable_session_shutdown()->::indiemotion::protobuf::payloads::v1::SessionShutdown::MergeFrom(from._internal_session_shutdown());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:indiemotion.protobuf.Message)
}

inline void Message::SharedCtor() {
header_ = nullptr;
clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:indiemotion.protobuf.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:indiemotion.protobuf.Message)
  switch (payload_case()) {
    case kAcknowledge: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.acknowledge_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.error_;
      }
      break;
    }
    case kGetCameraList: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_camera_list_;
      }
      break;
    }
    case kCameraList: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.camera_list_;
      }
      break;
    }
    case kSetActiveCamera: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.set_active_camera_;
      }
      break;
    }
    case kGetActiveCamera: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.get_active_camera_;
      }
      break;
    }
    case kMotionSetMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_set_mode_;
      }
      break;
    }
    case kMotionGetMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_get_mode_;
      }
      break;
    }
    case kMotionActiveMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_active_mode_;
      }
      break;
    }
    case kMotionXform: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_xform_;
      }
      break;
    }
    case kSessionStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.session_start_;
      }
      break;
    }
    case kSessionShutdown: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.session_shutdown_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotion.protobuf.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotion.protobuf.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.Acknowledge acknowledge = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_acknowledge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.Error error = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.GetCameraList get_camera_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_camera_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.CameraList camera_list = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.SetActiveCamera set_active_camera = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_active_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.GetActiveCamera get_active_camera = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_active_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.MotionSetMode motion_set_mode = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_set_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.MotionGetMode motion_get_mode = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_get_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.MotionActiveMode motion_active_mode = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_active_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.MotionXForm motion_xform = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_xform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.SessionStart session_start = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotion.protobuf.payloads.v1.SessionShutdown session_shutdown = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_shutdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotion.protobuf.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotion.protobuf.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.Acknowledge acknowledge = 20;
  if (_internal_has_acknowledge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::acknowledge(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.Error error = 25;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::error(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.GetCameraList get_camera_list = 30;
  if (_internal_has_get_camera_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::get_camera_list(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.CameraList camera_list = 31;
  if (_internal_has_camera_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::camera_list(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.SetActiveCamera set_active_camera = 32;
  if (_internal_has_set_active_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::set_active_camera(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.GetActiveCamera get_active_camera = 33;
  if (_internal_has_get_active_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::get_active_camera(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.MotionSetMode motion_set_mode = 40;
  if (_internal_has_motion_set_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::motion_set_mode(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.MotionGetMode motion_get_mode = 41;
  if (_internal_has_motion_get_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::motion_get_mode(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.MotionActiveMode motion_active_mode = 42;
  if (_internal_has_motion_active_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::motion_active_mode(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.MotionXForm motion_xform = 43;
  if (_internal_has_motion_xform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::motion_xform(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.SessionStart session_start = 50;
  if (_internal_has_session_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::session_start(this), target, stream);
  }

  // .indiemotion.protobuf.payloads.v1.SessionShutdown session_shutdown = 51;
  if (_internal_has_session_shutdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::session_shutdown(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotion.protobuf.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotion.protobuf.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotion.protobuf.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (payload_case()) {
    // .indiemotion.protobuf.payloads.v1.Acknowledge acknowledge = 20;
    case kAcknowledge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.acknowledge_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.Error error = 25;
    case kError: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.error_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.GetCameraList get_camera_list = 30;
    case kGetCameraList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_camera_list_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.CameraList camera_list = 31;
    case kCameraList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.camera_list_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.SetActiveCamera set_active_camera = 32;
    case kSetActiveCamera: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.set_active_camera_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.GetActiveCamera get_active_camera = 33;
    case kGetActiveCamera: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.get_active_camera_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.MotionSetMode motion_set_mode = 40;
    case kMotionSetMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_set_mode_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.MotionGetMode motion_get_mode = 41;
    case kMotionGetMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_get_mode_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.MotionActiveMode motion_active_mode = 42;
    case kMotionActiveMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_active_mode_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.MotionXForm motion_xform = 43;
    case kMotionXform: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_xform_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.SessionStart session_start = 50;
    case kSessionStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.session_start_);
      break;
    }
    // .indiemotion.protobuf.payloads.v1.SessionShutdown session_shutdown = 51;
    case kSessionShutdown: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.session_shutdown_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotion.protobuf.Message)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::indiemotion::protobuf::Header::MergeFrom(from._internal_header());
  }
  switch (from.payload_case()) {
    case kAcknowledge: {
      _internal_mutable_acknowledge()->::indiemotion::protobuf::payloads::v1::Acknowledge::MergeFrom(from._internal_acknowledge());
      break;
    }
    case kError: {
      _internal_mutable_error()->::indiemotion::protobuf::payloads::v1::Error::MergeFrom(from._internal_error());
      break;
    }
    case kGetCameraList: {
      _internal_mutable_get_camera_list()->::indiemotion::protobuf::payloads::v1::GetCameraList::MergeFrom(from._internal_get_camera_list());
      break;
    }
    case kCameraList: {
      _internal_mutable_camera_list()->::indiemotion::protobuf::payloads::v1::CameraList::MergeFrom(from._internal_camera_list());
      break;
    }
    case kSetActiveCamera: {
      _internal_mutable_set_active_camera()->::indiemotion::protobuf::payloads::v1::SetActiveCamera::MergeFrom(from._internal_set_active_camera());
      break;
    }
    case kGetActiveCamera: {
      _internal_mutable_get_active_camera()->::indiemotion::protobuf::payloads::v1::GetActiveCamera::MergeFrom(from._internal_get_active_camera());
      break;
    }
    case kMotionSetMode: {
      _internal_mutable_motion_set_mode()->::indiemotion::protobuf::payloads::v1::MotionSetMode::MergeFrom(from._internal_motion_set_mode());
      break;
    }
    case kMotionGetMode: {
      _internal_mutable_motion_get_mode()->::indiemotion::protobuf::payloads::v1::MotionGetMode::MergeFrom(from._internal_motion_get_mode());
      break;
    }
    case kMotionActiveMode: {
      _internal_mutable_motion_active_mode()->::indiemotion::protobuf::payloads::v1::MotionActiveMode::MergeFrom(from._internal_motion_active_mode());
      break;
    }
    case kMotionXform: {
      _internal_mutable_motion_xform()->::indiemotion::protobuf::payloads::v1::MotionXForm::MergeFrom(from._internal_motion_xform());
      break;
    }
    case kSessionStart: {
      _internal_mutable_session_start()->::indiemotion::protobuf::payloads::v1::SessionStart::MergeFrom(from._internal_session_start());
      break;
    }
    case kSessionShutdown: {
      _internal_mutable_session_shutdown()->::indiemotion::protobuf::payloads::v1::SessionShutdown::MergeFrom(from._internal_session_shutdown());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotion.protobuf.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace indiemotion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::Header* Arena::CreateMaybeMessage< ::indiemotion::protobuf::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotion::protobuf::Message* Arena::CreateMaybeMessage< ::indiemotion::protobuf::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotion::protobuf::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
