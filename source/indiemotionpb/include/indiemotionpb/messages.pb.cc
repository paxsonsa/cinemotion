// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace indiemotionpb {
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , responseid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace indiemotionpb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Header, id_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Header, responseid_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Message, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::Message, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::indiemotionpb::Header)},
  { 9, -1, sizeof(::indiemotionpb::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::_Message_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\rindiemotionpb\032\016payload"
  "s.proto\"<\n\006Header\022\n\n\002id\030\024 \001(\t\022\027\n\nrespons"
  "eId\030( \001(\tH\000\210\001\001B\r\n\013_responseId\"\361\003\n\007Messag"
  "e\022%\n\006header\030\001 \001(\0132\025.indiemotionpb.Header"
  "\022.\n\005error\030\031 \001(\0132\035.indiemotionpb.payloads"
  ".ErrorH\000\022G\n\022initialize_session\030\037 \001(\0132).i"
  "ndiemotionpb.payloads.InitializeSessionH"
  "\000\022C\n\020shutdown_session\030  \001(\0132\'.indiemotio"
  "npb.payloads.ShutdownSessionH\000\022;\n\014sessio"
  "n_info\030( \001(\0132#.indiemotionpb.payloads.Se"
  "ssionInfoH\000\0227\n\nscene_info\0302 \001(\0132!.indiem"
  "otionpb.payloads.SceneInfoH\000\022E\n\025active_c"
  "amera_updated\0303 \001(\0132$.indiemotionpb.payl"
  "oads.ActiveCameraH\000\0229\n\013motion_info\030< \001(\013"
  "2\".indiemotionpb.payloads.MotionInfoH\000B\t"
  "\n\007payloadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_payloads_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 617, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace indiemotionpb {

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_responseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  responseid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_responseid()) {
    responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responseid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.Header)
}

inline void Header::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
responseid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:indiemotionpb.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responseid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    responseid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.Header.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string responseId = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_responseid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.Header.responseId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 20;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.Header.id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_id(), target);
  }

  // optional string responseId = 40;
  if (_internal_has_responseid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responseid().data(), static_cast<int>(this->_internal_responseid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.Header.responseId");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_responseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 20;
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // optional string responseId = 40;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_responseid()) {
    _internal_set_responseid(from._internal_responseid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &responseid_, GetArenaForAllocation(),
      &other->responseid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::indiemotionpb::Header& header(const Message* msg);
  static const ::indiemotionpb::payloads::Error& error(const Message* msg);
  static const ::indiemotionpb::payloads::InitializeSession& initialize_session(const Message* msg);
  static const ::indiemotionpb::payloads::ShutdownSession& shutdown_session(const Message* msg);
  static const ::indiemotionpb::payloads::SessionInfo& session_info(const Message* msg);
  static const ::indiemotionpb::payloads::SceneInfo& scene_info(const Message* msg);
  static const ::indiemotionpb::payloads::ActiveCamera& active_camera_updated(const Message* msg);
  static const ::indiemotionpb::payloads::MotionInfo& motion_info(const Message* msg);
};

const ::indiemotionpb::Header&
Message::_Internal::header(const Message* msg) {
  return *msg->header_;
}
const ::indiemotionpb::payloads::Error&
Message::_Internal::error(const Message* msg) {
  return *msg->payload_.error_;
}
const ::indiemotionpb::payloads::InitializeSession&
Message::_Internal::initialize_session(const Message* msg) {
  return *msg->payload_.initialize_session_;
}
const ::indiemotionpb::payloads::ShutdownSession&
Message::_Internal::shutdown_session(const Message* msg) {
  return *msg->payload_.shutdown_session_;
}
const ::indiemotionpb::payloads::SessionInfo&
Message::_Internal::session_info(const Message* msg) {
  return *msg->payload_.session_info_;
}
const ::indiemotionpb::payloads::SceneInfo&
Message::_Internal::scene_info(const Message* msg) {
  return *msg->payload_.scene_info_;
}
const ::indiemotionpb::payloads::ActiveCamera&
Message::_Internal::active_camera_updated(const Message* msg) {
  return *msg->payload_.active_camera_updated_;
}
const ::indiemotionpb::payloads::MotionInfo&
Message::_Internal::motion_info(const Message* msg) {
  return *msg->payload_.motion_info_;
}
void Message::set_allocated_error(::indiemotionpb::payloads::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.error)
}
void Message::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.error_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_initialize_session(::indiemotionpb::payloads::InitializeSession* initialize_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (initialize_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialize_session));
    if (message_arena != submessage_arena) {
      initialize_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialize_session, submessage_arena);
    }
    set_has_initialize_session();
    payload_.initialize_session_ = initialize_session;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.initialize_session)
}
void Message::clear_initialize_session() {
  if (_internal_has_initialize_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.initialize_session_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_shutdown_session(::indiemotionpb::payloads::ShutdownSession* shutdown_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (shutdown_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shutdown_session));
    if (message_arena != submessage_arena) {
      shutdown_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutdown_session, submessage_arena);
    }
    set_has_shutdown_session();
    payload_.shutdown_session_ = shutdown_session;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.shutdown_session)
}
void Message::clear_shutdown_session() {
  if (_internal_has_shutdown_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.shutdown_session_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_session_info(::indiemotionpb::payloads::SessionInfo* session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_info));
    if (message_arena != submessage_arena) {
      session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_info, submessage_arena);
    }
    set_has_session_info();
    payload_.session_info_ = session_info;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.session_info)
}
void Message::clear_session_info() {
  if (_internal_has_session_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.session_info_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_scene_info(::indiemotionpb::payloads::SceneInfo* scene_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (scene_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_info));
    if (message_arena != submessage_arena) {
      scene_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene_info, submessage_arena);
    }
    set_has_scene_info();
    payload_.scene_info_ = scene_info;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.scene_info)
}
void Message::clear_scene_info() {
  if (_internal_has_scene_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.scene_info_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_active_camera_updated(::indiemotionpb::payloads::ActiveCamera* active_camera_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (active_camera_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_camera_updated));
    if (message_arena != submessage_arena) {
      active_camera_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_camera_updated, submessage_arena);
    }
    set_has_active_camera_updated();
    payload_.active_camera_updated_ = active_camera_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.active_camera_updated)
}
void Message::clear_active_camera_updated() {
  if (_internal_has_active_camera_updated()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.active_camera_updated_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_motion_info(::indiemotionpb::payloads::MotionInfo* motion_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (motion_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_info));
    if (message_arena != submessage_arena) {
      motion_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_info, submessage_arena);
    }
    set_has_motion_info();
    payload_.motion_info_ = motion_info;
  }
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.motion_info)
}
void Message::clear_motion_info() {
  if (_internal_has_motion_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.motion_info_;
    }
    clear_has_payload();
  }
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::indiemotionpb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kError: {
      _internal_mutable_error()->::indiemotionpb::payloads::Error::MergeFrom(from._internal_error());
      break;
    }
    case kInitializeSession: {
      _internal_mutable_initialize_session()->::indiemotionpb::payloads::InitializeSession::MergeFrom(from._internal_initialize_session());
      break;
    }
    case kShutdownSession: {
      _internal_mutable_shutdown_session()->::indiemotionpb::payloads::ShutdownSession::MergeFrom(from._internal_shutdown_session());
      break;
    }
    case kSessionInfo: {
      _internal_mutable_session_info()->::indiemotionpb::payloads::SessionInfo::MergeFrom(from._internal_session_info());
      break;
    }
    case kSceneInfo: {
      _internal_mutable_scene_info()->::indiemotionpb::payloads::SceneInfo::MergeFrom(from._internal_scene_info());
      break;
    }
    case kActiveCameraUpdated: {
      _internal_mutable_active_camera_updated()->::indiemotionpb::payloads::ActiveCamera::MergeFrom(from._internal_active_camera_updated());
      break;
    }
    case kMotionInfo: {
      _internal_mutable_motion_info()->::indiemotionpb::payloads::MotionInfo::MergeFrom(from._internal_motion_info());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.Message)
}

inline void Message::SharedCtor() {
header_ = nullptr;
clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:indiemotionpb.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:indiemotionpb.Message)
  switch (payload_case()) {
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.error_;
      }
      break;
    }
    case kInitializeSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.initialize_session_;
      }
      break;
    }
    case kShutdownSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.shutdown_session_;
      }
      break;
    }
    case kSessionInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.session_info_;
      }
      break;
    }
    case kSceneInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.scene_info_;
      }
      break;
    }
    case kActiveCameraUpdated: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.active_camera_updated_;
      }
      break;
    }
    case kMotionInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.motion_info_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotionpb.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.Error error = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.InitializeSession initialize_session = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialize_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutdown_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.SessionInfo session_info = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.SceneInfo scene_info = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.ActiveCamera active_camera_updated = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_camera_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.MotionInfo motion_info = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotionpb.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .indiemotionpb.payloads.Error error = 25;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::error(this), target, stream);
  }

  // .indiemotionpb.payloads.InitializeSession initialize_session = 31;
  if (_internal_has_initialize_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::initialize_session(this), target, stream);
  }

  // .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
  if (_internal_has_shutdown_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::shutdown_session(this), target, stream);
  }

  // .indiemotionpb.payloads.SessionInfo session_info = 40;
  if (_internal_has_session_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::session_info(this), target, stream);
  }

  // .indiemotionpb.payloads.SceneInfo scene_info = 50;
  if (_internal_has_scene_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::scene_info(this), target, stream);
  }

  // .indiemotionpb.payloads.ActiveCamera active_camera_updated = 51;
  if (_internal_has_active_camera_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::active_camera_updated(this), target, stream);
  }

  // .indiemotionpb.payloads.MotionInfo motion_info = 60;
  if (_internal_has_motion_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::motion_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotionpb.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (payload_case()) {
    // .indiemotionpb.payloads.Error error = 25;
    case kError: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.error_);
      break;
    }
    // .indiemotionpb.payloads.InitializeSession initialize_session = 31;
    case kInitializeSession: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.initialize_session_);
      break;
    }
    // .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
    case kShutdownSession: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.shutdown_session_);
      break;
    }
    // .indiemotionpb.payloads.SessionInfo session_info = 40;
    case kSessionInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.session_info_);
      break;
    }
    // .indiemotionpb.payloads.SceneInfo scene_info = 50;
    case kSceneInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.scene_info_);
      break;
    }
    // .indiemotionpb.payloads.ActiveCamera active_camera_updated = 51;
    case kActiveCameraUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.active_camera_updated_);
      break;
    }
    // .indiemotionpb.payloads.MotionInfo motion_info = 60;
    case kMotionInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.motion_info_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::indiemotionpb::Header::MergeFrom(from._internal_header());
  }
  switch (from.payload_case()) {
    case kError: {
      _internal_mutable_error()->::indiemotionpb::payloads::Error::MergeFrom(from._internal_error());
      break;
    }
    case kInitializeSession: {
      _internal_mutable_initialize_session()->::indiemotionpb::payloads::InitializeSession::MergeFrom(from._internal_initialize_session());
      break;
    }
    case kShutdownSession: {
      _internal_mutable_shutdown_session()->::indiemotionpb::payloads::ShutdownSession::MergeFrom(from._internal_shutdown_session());
      break;
    }
    case kSessionInfo: {
      _internal_mutable_session_info()->::indiemotionpb::payloads::SessionInfo::MergeFrom(from._internal_session_info());
      break;
    }
    case kSceneInfo: {
      _internal_mutable_scene_info()->::indiemotionpb::payloads::SceneInfo::MergeFrom(from._internal_scene_info());
      break;
    }
    case kActiveCameraUpdated: {
      _internal_mutable_active_camera_updated()->::indiemotionpb::payloads::ActiveCamera::MergeFrom(from._internal_active_camera_updated());
      break;
    }
    case kMotionInfo: {
      _internal_mutable_motion_info()->::indiemotionpb::payloads::MotionInfo::MergeFrom(from._internal_motion_info());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace indiemotionpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::indiemotionpb::Header* Arena::CreateMaybeMessage< ::indiemotionpb::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::Message* Arena::CreateMaybeMessage< ::indiemotionpb::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
