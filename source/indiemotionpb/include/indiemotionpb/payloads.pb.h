// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payloads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payloads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payloads_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payloads_2eproto;
namespace indiemotionpb {
namespace payloads {
class ActiveCamera;
struct ActiveCameraDefaultTypeInternal;
extern ActiveCameraDefaultTypeInternal _ActiveCamera_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class InitializeSession;
struct InitializeSessionDefaultTypeInternal;
extern InitializeSessionDefaultTypeInternal _InitializeSession_default_instance_;
class MotionInfo;
struct MotionInfoDefaultTypeInternal;
extern MotionInfoDefaultTypeInternal _MotionInfo_default_instance_;
class SceneInfo;
struct SceneInfoDefaultTypeInternal;
extern SceneInfoDefaultTypeInternal _SceneInfo_default_instance_;
class SessionInfo;
struct SessionInfoDefaultTypeInternal;
extern SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
class ShutdownSession;
struct ShutdownSessionDefaultTypeInternal;
extern ShutdownSessionDefaultTypeInternal _ShutdownSession_default_instance_;
class XForm;
struct XFormDefaultTypeInternal;
extern XFormDefaultTypeInternal _XForm_default_instance_;
class XForm_Vector;
struct XForm_VectorDefaultTypeInternal;
extern XForm_VectorDefaultTypeInternal _XForm_Vector_default_instance_;
}  // namespace payloads
}  // namespace indiemotionpb
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotionpb::payloads::ActiveCamera* Arena::CreateMaybeMessage<::indiemotionpb::payloads::ActiveCamera>(Arena*);
template<> ::indiemotionpb::payloads::Camera* Arena::CreateMaybeMessage<::indiemotionpb::payloads::Camera>(Arena*);
template<> ::indiemotionpb::payloads::Error* Arena::CreateMaybeMessage<::indiemotionpb::payloads::Error>(Arena*);
template<> ::indiemotionpb::payloads::InitializeSession* Arena::CreateMaybeMessage<::indiemotionpb::payloads::InitializeSession>(Arena*);
template<> ::indiemotionpb::payloads::MotionInfo* Arena::CreateMaybeMessage<::indiemotionpb::payloads::MotionInfo>(Arena*);
template<> ::indiemotionpb::payloads::SceneInfo* Arena::CreateMaybeMessage<::indiemotionpb::payloads::SceneInfo>(Arena*);
template<> ::indiemotionpb::payloads::SessionInfo* Arena::CreateMaybeMessage<::indiemotionpb::payloads::SessionInfo>(Arena*);
template<> ::indiemotionpb::payloads::ShutdownSession* Arena::CreateMaybeMessage<::indiemotionpb::payloads::ShutdownSession>(Arena*);
template<> ::indiemotionpb::payloads::XForm* Arena::CreateMaybeMessage<::indiemotionpb::payloads::XForm>(Arena*);
template<> ::indiemotionpb::payloads::XForm_Vector* Arena::CreateMaybeMessage<::indiemotionpb::payloads::XForm_Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotionpb {
namespace payloads {

enum Error_Type : int {
  Error_Type_UnknownError = 0,
  Error_Type_InputDeviceError = 1,
  Error_Type_ApplicationError = 2,
  Error_Type_UserError = 3,
  Error_Type_BadMessageError = 4,
  Error_Type_APIVersionNotSupportedError = 5,
  Error_Type_SessionError = 10,
  Error_Type_SessionNotInitializedError = 11,
  Error_Type_ActiveCameraNotSetError = 20,
  Error_Type_CameraNotFoundError = 21,
  Error_Type_Error_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Error_Type_Error_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Error_Type_IsValid(int value);
constexpr Error_Type Error_Type_Type_MIN = Error_Type_UnknownError;
constexpr Error_Type Error_Type_Type_MAX = Error_Type_CameraNotFoundError;
constexpr int Error_Type_Type_ARRAYSIZE = Error_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Type_descriptor();
template<typename T>
inline const std::string& Error_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Type_descriptor(), enum_t_value);
}
inline bool Error_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Type>(
    Error_Type_descriptor(), name, value);
}
enum MotionInfo_Status : int {
  MotionInfo_Status_Idle = 0,
  MotionInfo_Status_Live = 1,
  MotionInfo_Status_Recording = 2,
  MotionInfo_Status_MotionInfo_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MotionInfo_Status_MotionInfo_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MotionInfo_Status_IsValid(int value);
constexpr MotionInfo_Status MotionInfo_Status_Status_MIN = MotionInfo_Status_Idle;
constexpr MotionInfo_Status MotionInfo_Status_Status_MAX = MotionInfo_Status_Recording;
constexpr int MotionInfo_Status_Status_ARRAYSIZE = MotionInfo_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionInfo_Status_descriptor();
template<typename T>
inline const std::string& MotionInfo_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionInfo_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionInfo_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionInfo_Status_descriptor(), enum_t_value);
}
inline bool MotionInfo_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionInfo_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionInfo_Status>(
    MotionInfo_Status_descriptor(), name, value);
}
// ===================================================================

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return new Error();
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Type Type;
  static constexpr Type UnknownError =
    Error_Type_UnknownError;
  static constexpr Type InputDeviceError =
    Error_Type_InputDeviceError;
  static constexpr Type ApplicationError =
    Error_Type_ApplicationError;
  static constexpr Type UserError =
    Error_Type_UserError;
  static constexpr Type BadMessageError =
    Error_Type_BadMessageError;
  static constexpr Type APIVersionNotSupportedError =
    Error_Type_APIVersionNotSupportedError;
  static constexpr Type SessionError =
    Error_Type_SessionError;
  static constexpr Type SessionNotInitializedError =
    Error_Type_SessionNotInitializedError;
  static constexpr Type ActiveCameraNotSetError =
    Error_Type_ActiveCameraNotSetError;
  static constexpr Type CameraNotFoundError =
    Error_Type_CameraNotFoundError;
  static inline bool Type_IsValid(int value) {
    return Error_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 11,
    kIsFatalFieldNumber = 12,
    kTypeFieldNumber = 13,
  };
  // string description = 11;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool is_fatal = 12;
  void clear_is_fatal();
  bool is_fatal() const;
  void set_is_fatal(bool value);
  private:
  bool _internal_is_fatal() const;
  void _internal_set_is_fatal(bool value);
  public:

  // .indiemotionpb.payloads.Error.Type type = 13;
  void clear_type();
  ::indiemotionpb::payloads::Error_Type type() const;
  void set_type(::indiemotionpb::payloads::Error_Type value);
  private:
  ::indiemotionpb::payloads::Error_Type _internal_type() const;
  void _internal_set_type(::indiemotionpb::payloads::Error_Type value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool is_fatal_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class SessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.SessionInfo) */ {
 public:
  inline SessionInfo() : SessionInfo(nullptr) {}
  ~SessionInfo() override;
  explicit constexpr SessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionInfo(const SessionInfo& from);
  SessionInfo(SessionInfo&& from) noexcept
    : SessionInfo() {
    *this = ::std::move(from);
  }

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionInfo& operator=(SessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionInfo* internal_default_instance() {
    return reinterpret_cast<const SessionInfo*>(
               &_SessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionInfo& a, SessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionInfo* New() const final {
    return new SessionInfo();
  }

  SessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.SessionInfo";
  }
  protected:
  explicit SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 10,
    kApiVersionFieldNumber = 20,
  };
  // string session_name = 10;
  void clear_session_name();
  const std::string& session_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_name();
  void set_allocated_session_name(std::string* session_name);
  private:
  const std::string& _internal_session_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_name(const std::string& value);
  std::string* _internal_mutable_session_name();
  public:

  // string api_version = 20;
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.SessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class InitializeSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.InitializeSession) */ {
 public:
  inline InitializeSession() : InitializeSession(nullptr) {}
  ~InitializeSession() override;
  explicit constexpr InitializeSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeSession(const InitializeSession& from);
  InitializeSession(InitializeSession&& from) noexcept
    : InitializeSession() {
    *this = ::std::move(from);
  }

  inline InitializeSession& operator=(const InitializeSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeSession& operator=(InitializeSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeSession* internal_default_instance() {
    return reinterpret_cast<const InitializeSession*>(
               &_InitializeSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitializeSession& a, InitializeSession& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeSession* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitializeSession* New() const final {
    return new InitializeSession();
  }

  InitializeSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitializeSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.InitializeSession";
  }
  protected:
  explicit InitializeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionInfoFieldNumber = 10,
  };
  // .indiemotionpb.payloads.SessionInfo session_info = 10;
  bool has_session_info() const;
  private:
  bool _internal_has_session_info() const;
  public:
  void clear_session_info();
  const ::indiemotionpb::payloads::SessionInfo& session_info() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::SessionInfo* release_session_info();
  ::indiemotionpb::payloads::SessionInfo* mutable_session_info();
  void set_allocated_session_info(::indiemotionpb::payloads::SessionInfo* session_info);
  private:
  const ::indiemotionpb::payloads::SessionInfo& _internal_session_info() const;
  ::indiemotionpb::payloads::SessionInfo* _internal_mutable_session_info();
  public:
  void unsafe_arena_set_allocated_session_info(
      ::indiemotionpb::payloads::SessionInfo* session_info);
  ::indiemotionpb::payloads::SessionInfo* unsafe_arena_release_session_info();

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.InitializeSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::payloads::SessionInfo* session_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class ShutdownSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.ShutdownSession) */ {
 public:
  inline ShutdownSession() : ShutdownSession(nullptr) {}
  ~ShutdownSession() override;
  explicit constexpr ShutdownSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownSession(const ShutdownSession& from);
  ShutdownSession(ShutdownSession&& from) noexcept
    : ShutdownSession() {
    *this = ::std::move(from);
  }

  inline ShutdownSession& operator=(const ShutdownSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownSession& operator=(ShutdownSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownSession* internal_default_instance() {
    return reinterpret_cast<const ShutdownSession*>(
               &_ShutdownSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShutdownSession& a, ShutdownSession& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownSession* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownSession* New() const final {
    return new ShutdownSession();
  }

  ShutdownSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShutdownSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShutdownSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.ShutdownSession";
  }
  protected:
  explicit ShutdownSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.ShutdownSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return new Camera();
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Camera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class ActiveCamera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.ActiveCamera) */ {
 public:
  inline ActiveCamera() : ActiveCamera(nullptr) {}
  ~ActiveCamera() override;
  explicit constexpr ActiveCamera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveCamera(const ActiveCamera& from);
  ActiveCamera(ActiveCamera&& from) noexcept
    : ActiveCamera() {
    *this = ::std::move(from);
  }

  inline ActiveCamera& operator=(const ActiveCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveCamera& operator=(ActiveCamera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveCamera& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveCamera* internal_default_instance() {
    return reinterpret_cast<const ActiveCamera*>(
               &_ActiveCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ActiveCamera& a, ActiveCamera& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveCamera* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveCamera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveCamera* New() const final {
    return new ActiveCamera();
  }

  ActiveCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveCamera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActiveCamera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActiveCamera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveCamera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.ActiveCamera";
  }
  protected:
  explicit ActiveCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.ActiveCamera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class SceneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.SceneInfo) */ {
 public:
  inline SceneInfo() : SceneInfo(nullptr) {}
  ~SceneInfo() override;
  explicit constexpr SceneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneInfo(const SceneInfo& from);
  SceneInfo(SceneInfo&& from) noexcept
    : SceneInfo() {
    *this = ::std::move(from);
  }

  inline SceneInfo& operator=(const SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneInfo& operator=(SceneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SceneInfo*>(
               &_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SceneInfo& a, SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneInfo* New() const final {
    return new SceneInfo();
  }

  SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SceneInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.SceneInfo";
  }
  protected:
  explicit SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 20,
    kActiveCameraNameFieldNumber = 10,
  };
  // repeated .indiemotionpb.payloads.Camera cameras = 20;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::indiemotionpb::payloads::Camera* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >*
      mutable_cameras();
  private:
  const ::indiemotionpb::payloads::Camera& _internal_cameras(int index) const;
  ::indiemotionpb::payloads::Camera* _internal_add_cameras();
  public:
  const ::indiemotionpb::payloads::Camera& cameras(int index) const;
  ::indiemotionpb::payloads::Camera* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >&
      cameras() const;

  // optional string active_camera_name = 10;
  bool has_active_camera_name() const;
  private:
  bool _internal_has_active_camera_name() const;
  public:
  void clear_active_camera_name();
  const std::string& active_camera_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_camera_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_camera_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_active_camera_name();
  void set_allocated_active_camera_name(std::string* active_camera_name);
  private:
  const std::string& _internal_active_camera_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_camera_name(const std::string& value);
  std::string* _internal_mutable_active_camera_name();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera > cameras_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_camera_name_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class XForm_Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.XForm.Vector) */ {
 public:
  inline XForm_Vector() : XForm_Vector(nullptr) {}
  ~XForm_Vector() override;
  explicit constexpr XForm_Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XForm_Vector(const XForm_Vector& from);
  XForm_Vector(XForm_Vector&& from) noexcept
    : XForm_Vector() {
    *this = ::std::move(from);
  }

  inline XForm_Vector& operator=(const XForm_Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline XForm_Vector& operator=(XForm_Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XForm_Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const XForm_Vector* internal_default_instance() {
    return reinterpret_cast<const XForm_Vector*>(
               &_XForm_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(XForm_Vector& a, XForm_Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(XForm_Vector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XForm_Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XForm_Vector* New() const final {
    return new XForm_Vector();
  }

  XForm_Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XForm_Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XForm_Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XForm_Vector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XForm_Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.XForm.Vector";
  }
  protected:
  explicit XForm_Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.XForm.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class XForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.XForm) */ {
 public:
  inline XForm() : XForm(nullptr) {}
  ~XForm() override;
  explicit constexpr XForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XForm(const XForm& from);
  XForm(XForm&& from) noexcept
    : XForm() {
    *this = ::std::move(from);
  }

  inline XForm& operator=(const XForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline XForm& operator=(XForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const XForm* internal_default_instance() {
    return reinterpret_cast<const XForm*>(
               &_XForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(XForm& a, XForm& b) {
    a.Swap(&b);
  }
  inline void Swap(XForm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XForm* New() const final {
    return new XForm();
  }

  XForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XForm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.XForm";
  }
  protected:
  explicit XForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XForm_Vector Vector;

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .indiemotionpb.payloads.XForm.Vector translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::indiemotionpb::payloads::XForm_Vector& translation() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::XForm_Vector* release_translation();
  ::indiemotionpb::payloads::XForm_Vector* mutable_translation();
  void set_allocated_translation(::indiemotionpb::payloads::XForm_Vector* translation);
  private:
  const ::indiemotionpb::payloads::XForm_Vector& _internal_translation() const;
  ::indiemotionpb::payloads::XForm_Vector* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::indiemotionpb::payloads::XForm_Vector* translation);
  ::indiemotionpb::payloads::XForm_Vector* unsafe_arena_release_translation();

  // .indiemotionpb.payloads.XForm.Vector orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::indiemotionpb::payloads::XForm_Vector& orientation() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::XForm_Vector* release_orientation();
  ::indiemotionpb::payloads::XForm_Vector* mutable_orientation();
  void set_allocated_orientation(::indiemotionpb::payloads::XForm_Vector* orientation);
  private:
  const ::indiemotionpb::payloads::XForm_Vector& _internal_orientation() const;
  ::indiemotionpb::payloads::XForm_Vector* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::indiemotionpb::payloads::XForm_Vector* orientation);
  ::indiemotionpb::payloads::XForm_Vector* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.XForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::payloads::XForm_Vector* translation_;
  ::indiemotionpb::payloads::XForm_Vector* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class MotionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.MotionInfo) */ {
 public:
  inline MotionInfo() : MotionInfo(nullptr) {}
  ~MotionInfo() override;
  explicit constexpr MotionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionInfo(const MotionInfo& from);
  MotionInfo(MotionInfo&& from) noexcept
    : MotionInfo() {
    *this = ::std::move(from);
  }

  inline MotionInfo& operator=(const MotionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionInfo& operator=(MotionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionInfo* internal_default_instance() {
    return reinterpret_cast<const MotionInfo*>(
               &_MotionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MotionInfo& a, MotionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionInfo* New() const final {
    return new MotionInfo();
  }

  MotionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.MotionInfo";
  }
  protected:
  explicit MotionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MotionInfo_Status Status;
  static constexpr Status Idle =
    MotionInfo_Status_Idle;
  static constexpr Status Live =
    MotionInfo_Status_Live;
  static constexpr Status Recording =
    MotionInfo_Status_Recording;
  static inline bool Status_IsValid(int value) {
    return MotionInfo_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    MotionInfo_Status_Status_MIN;
  static constexpr Status Status_MAX =
    MotionInfo_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    MotionInfo_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return MotionInfo_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return MotionInfo_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return MotionInfo_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kXformFieldNumber = 10,
    kStatusFieldNumber = 1,
  };
  // .indiemotionpb.payloads.XForm xform = 10;
  bool has_xform() const;
  private:
  bool _internal_has_xform() const;
  public:
  void clear_xform();
  const ::indiemotionpb::payloads::XForm& xform() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::XForm* release_xform();
  ::indiemotionpb::payloads::XForm* mutable_xform();
  void set_allocated_xform(::indiemotionpb::payloads::XForm* xform);
  private:
  const ::indiemotionpb::payloads::XForm& _internal_xform() const;
  ::indiemotionpb::payloads::XForm* _internal_mutable_xform();
  public:
  void unsafe_arena_set_allocated_xform(
      ::indiemotionpb::payloads::XForm* xform);
  ::indiemotionpb::payloads::XForm* unsafe_arena_release_xform();

  // .indiemotionpb.payloads.MotionInfo.Status status = 1;
  void clear_status();
  ::indiemotionpb::payloads::MotionInfo_Status status() const;
  void set_status(::indiemotionpb::payloads::MotionInfo_Status value);
  private:
  ::indiemotionpb::payloads::MotionInfo_Status _internal_status() const;
  void _internal_set_status(::indiemotionpb::payloads::MotionInfo_Status value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.MotionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::payloads::XForm* xform_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error

// .indiemotionpb.payloads.Error.Type type = 13;
inline void Error::clear_type() {
  type_ = 0;
}
inline ::indiemotionpb::payloads::Error_Type Error::_internal_type() const {
  return static_cast< ::indiemotionpb::payloads::Error_Type >(type_);
}
inline ::indiemotionpb::payloads::Error_Type Error::type() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Error.type)
  return _internal_type();
}
inline void Error::_internal_set_type(::indiemotionpb::payloads::Error_Type value) {
  
  type_ = value;
}
inline void Error::set_type(::indiemotionpb::payloads::Error_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Error.type)
}

// string description = 11;
inline void Error::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Error::description() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Error.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Error.description)
}
inline std::string* Error::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.Error.description)
  return _s;
}
inline const std::string& Error::_internal_description() const {
  return description_.Get();
}
inline void Error::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_description() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.Error.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.Error.description)
}

// bool is_fatal = 12;
inline void Error::clear_is_fatal() {
  is_fatal_ = false;
}
inline bool Error::_internal_is_fatal() const {
  return is_fatal_;
}
inline bool Error::is_fatal() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Error.is_fatal)
  return _internal_is_fatal();
}
inline void Error::_internal_set_is_fatal(bool value) {
  
  is_fatal_ = value;
}
inline void Error::set_is_fatal(bool value) {
  _internal_set_is_fatal(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Error.is_fatal)
}

// -------------------------------------------------------------------

// SessionInfo

// string session_name = 10;
inline void SessionInfo::clear_session_name() {
  session_name_.ClearToEmpty();
}
inline const std::string& SessionInfo::session_name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SessionInfo.session_name)
  return _internal_session_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionInfo::set_session_name(ArgT0&& arg0, ArgT... args) {
 
 session_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.SessionInfo.session_name)
}
inline std::string* SessionInfo::mutable_session_name() {
  std::string* _s = _internal_mutable_session_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.SessionInfo.session_name)
  return _s;
}
inline const std::string& SessionInfo::_internal_session_name() const {
  return session_name_.Get();
}
inline void SessionInfo::_internal_set_session_name(const std::string& value) {
  
  session_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionInfo::_internal_mutable_session_name() {
  
  return session_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionInfo::release_session_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.SessionInfo.session_name)
  return session_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionInfo::set_allocated_session_name(std::string* session_name) {
  if (session_name != nullptr) {
    
  } else {
    
  }
  session_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.SessionInfo.session_name)
}

// string api_version = 20;
inline void SessionInfo::clear_api_version() {
  api_version_.ClearToEmpty();
}
inline const std::string& SessionInfo::api_version() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SessionInfo.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionInfo::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.SessionInfo.api_version)
}
inline std::string* SessionInfo::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.SessionInfo.api_version)
  return _s;
}
inline const std::string& SessionInfo::_internal_api_version() const {
  return api_version_.Get();
}
inline void SessionInfo::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionInfo::_internal_mutable_api_version() {
  
  return api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionInfo::release_api_version() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.SessionInfo.api_version)
  return api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionInfo::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.SessionInfo.api_version)
}

// -------------------------------------------------------------------

// InitializeSession

// .indiemotionpb.payloads.SessionInfo session_info = 10;
inline bool InitializeSession::_internal_has_session_info() const {
  return this != internal_default_instance() && session_info_ != nullptr;
}
inline bool InitializeSession::has_session_info() const {
  return _internal_has_session_info();
}
inline void InitializeSession::clear_session_info() {
  if (GetArenaForAllocation() == nullptr && session_info_ != nullptr) {
    delete session_info_;
  }
  session_info_ = nullptr;
}
inline const ::indiemotionpb::payloads::SessionInfo& InitializeSession::_internal_session_info() const {
  const ::indiemotionpb::payloads::SessionInfo* p = session_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::SessionInfo&>(
      ::indiemotionpb::payloads::_SessionInfo_default_instance_);
}
inline const ::indiemotionpb::payloads::SessionInfo& InitializeSession::session_info() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InitializeSession.session_info)
  return _internal_session_info();
}
inline void InitializeSession::unsafe_arena_set_allocated_session_info(
    ::indiemotionpb::payloads::SessionInfo* session_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_info_);
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.InitializeSession.session_info)
}
inline ::indiemotionpb::payloads::SessionInfo* InitializeSession::release_session_info() {
  
  ::indiemotionpb::payloads::SessionInfo* temp = session_info_;
  session_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::SessionInfo* InitializeSession::unsafe_arena_release_session_info() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.InitializeSession.session_info)
  
  ::indiemotionpb::payloads::SessionInfo* temp = session_info_;
  session_info_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::SessionInfo* InitializeSession::_internal_mutable_session_info() {
  
  if (session_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::SessionInfo>(GetArenaForAllocation());
    session_info_ = p;
  }
  return session_info_;
}
inline ::indiemotionpb::payloads::SessionInfo* InitializeSession::mutable_session_info() {
  ::indiemotionpb::payloads::SessionInfo* _msg = _internal_mutable_session_info();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.InitializeSession.session_info)
  return _msg;
}
inline void InitializeSession::set_allocated_session_info(::indiemotionpb::payloads::SessionInfo* session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete session_info_;
  }
  if (session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::SessionInfo>::GetOwningArena(session_info);
    if (message_arena != submessage_arena) {
      session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_info, submessage_arena);
    }
    
  } else {
    
  }
  session_info_ = session_info;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.InitializeSession.session_info)
}

// -------------------------------------------------------------------

// ShutdownSession

// -------------------------------------------------------------------

// Camera

// string name = 10;
inline void Camera::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Camera::name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Camera.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Camera.name)
}
inline std::string* Camera::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.Camera.name)
  return _s;
}
inline const std::string& Camera::_internal_name() const {
  return name_.Get();
}
inline void Camera::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.Camera.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Camera::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.Camera.name)
}

// -------------------------------------------------------------------

// ActiveCamera

// string name = 10;
inline void ActiveCamera::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ActiveCamera::name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.ActiveCamera.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActiveCamera::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.ActiveCamera.name)
}
inline std::string* ActiveCamera::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.ActiveCamera.name)
  return _s;
}
inline const std::string& ActiveCamera::_internal_name() const {
  return name_.Get();
}
inline void ActiveCamera::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActiveCamera::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActiveCamera::release_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.ActiveCamera.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActiveCamera::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.ActiveCamera.name)
}

// -------------------------------------------------------------------

// SceneInfo

// optional string active_camera_name = 10;
inline bool SceneInfo::_internal_has_active_camera_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SceneInfo::has_active_camera_name() const {
  return _internal_has_active_camera_name();
}
inline void SceneInfo::clear_active_camera_name() {
  active_camera_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SceneInfo::active_camera_name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SceneInfo.active_camera_name)
  return _internal_active_camera_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneInfo::set_active_camera_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 active_camera_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.SceneInfo.active_camera_name)
}
inline std::string* SceneInfo::mutable_active_camera_name() {
  std::string* _s = _internal_mutable_active_camera_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.SceneInfo.active_camera_name)
  return _s;
}
inline const std::string& SceneInfo::_internal_active_camera_name() const {
  return active_camera_name_.Get();
}
inline void SceneInfo::_internal_set_active_camera_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  active_camera_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SceneInfo::_internal_mutable_active_camera_name() {
  _has_bits_[0] |= 0x00000001u;
  return active_camera_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SceneInfo::release_active_camera_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.SceneInfo.active_camera_name)
  if (!_internal_has_active_camera_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return active_camera_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SceneInfo::set_allocated_active_camera_name(std::string* active_camera_name) {
  if (active_camera_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  active_camera_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_camera_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.SceneInfo.active_camera_name)
}

// repeated .indiemotionpb.payloads.Camera cameras = 20;
inline int SceneInfo::_internal_cameras_size() const {
  return cameras_.size();
}
inline int SceneInfo::cameras_size() const {
  return _internal_cameras_size();
}
inline void SceneInfo::clear_cameras() {
  cameras_.Clear();
}
inline ::indiemotionpb::payloads::Camera* SceneInfo::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.SceneInfo.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >*
SceneInfo::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:indiemotionpb.payloads.SceneInfo.cameras)
  return &cameras_;
}
inline const ::indiemotionpb::payloads::Camera& SceneInfo::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::indiemotionpb::payloads::Camera& SceneInfo::cameras(int index) const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SceneInfo.cameras)
  return _internal_cameras(index);
}
inline ::indiemotionpb::payloads::Camera* SceneInfo::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::indiemotionpb::payloads::Camera* SceneInfo::add_cameras() {
  ::indiemotionpb::payloads::Camera* _add = _internal_add_cameras();
  // @@protoc_insertion_point(field_add:indiemotionpb.payloads.SceneInfo.cameras)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >&
SceneInfo::cameras() const {
  // @@protoc_insertion_point(field_list:indiemotionpb.payloads.SceneInfo.cameras)
  return cameras_;
}

// -------------------------------------------------------------------

// XForm_Vector

// double x = 1;
inline void XForm_Vector::clear_x() {
  x_ = 0;
}
inline double XForm_Vector::_internal_x() const {
  return x_;
}
inline double XForm_Vector::x() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.XForm.Vector.x)
  return _internal_x();
}
inline void XForm_Vector::_internal_set_x(double value) {
  
  x_ = value;
}
inline void XForm_Vector::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.XForm.Vector.x)
}

// double y = 2;
inline void XForm_Vector::clear_y() {
  y_ = 0;
}
inline double XForm_Vector::_internal_y() const {
  return y_;
}
inline double XForm_Vector::y() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.XForm.Vector.y)
  return _internal_y();
}
inline void XForm_Vector::_internal_set_y(double value) {
  
  y_ = value;
}
inline void XForm_Vector::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.XForm.Vector.y)
}

// double z = 3;
inline void XForm_Vector::clear_z() {
  z_ = 0;
}
inline double XForm_Vector::_internal_z() const {
  return z_;
}
inline double XForm_Vector::z() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.XForm.Vector.z)
  return _internal_z();
}
inline void XForm_Vector::_internal_set_z(double value) {
  
  z_ = value;
}
inline void XForm_Vector::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.XForm.Vector.z)
}

// -------------------------------------------------------------------

// XForm

// .indiemotionpb.payloads.XForm.Vector translation = 1;
inline bool XForm::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool XForm::has_translation() const {
  return _internal_has_translation();
}
inline void XForm::clear_translation() {
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::indiemotionpb::payloads::XForm_Vector& XForm::_internal_translation() const {
  const ::indiemotionpb::payloads::XForm_Vector* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::XForm_Vector&>(
      ::indiemotionpb::payloads::_XForm_Vector_default_instance_);
}
inline const ::indiemotionpb::payloads::XForm_Vector& XForm::translation() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.XForm.translation)
  return _internal_translation();
}
inline void XForm::unsafe_arena_set_allocated_translation(
    ::indiemotionpb::payloads::XForm_Vector* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.XForm.translation)
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::release_translation() {
  
  ::indiemotionpb::payloads::XForm_Vector* temp = translation_;
  translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.XForm.translation)
  
  ::indiemotionpb::payloads::XForm_Vector* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::XForm_Vector>(GetArenaForAllocation());
    translation_ = p;
  }
  return translation_;
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::mutable_translation() {
  ::indiemotionpb::payloads::XForm_Vector* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.XForm.translation)
  return _msg;
}
inline void XForm::set_allocated_translation(::indiemotionpb::payloads::XForm_Vector* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::XForm_Vector>::GetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.XForm.translation)
}

// .indiemotionpb.payloads.XForm.Vector orientation = 2;
inline bool XForm::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool XForm::has_orientation() const {
  return _internal_has_orientation();
}
inline void XForm::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::indiemotionpb::payloads::XForm_Vector& XForm::_internal_orientation() const {
  const ::indiemotionpb::payloads::XForm_Vector* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::XForm_Vector&>(
      ::indiemotionpb::payloads::_XForm_Vector_default_instance_);
}
inline const ::indiemotionpb::payloads::XForm_Vector& XForm::orientation() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.XForm.orientation)
  return _internal_orientation();
}
inline void XForm::unsafe_arena_set_allocated_orientation(
    ::indiemotionpb::payloads::XForm_Vector* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.XForm.orientation)
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::release_orientation() {
  
  ::indiemotionpb::payloads::XForm_Vector* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.XForm.orientation)
  
  ::indiemotionpb::payloads::XForm_Vector* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::XForm_Vector>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::indiemotionpb::payloads::XForm_Vector* XForm::mutable_orientation() {
  ::indiemotionpb::payloads::XForm_Vector* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.XForm.orientation)
  return _msg;
}
inline void XForm::set_allocated_orientation(::indiemotionpb::payloads::XForm_Vector* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::XForm_Vector>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.XForm.orientation)
}

// -------------------------------------------------------------------

// MotionInfo

// .indiemotionpb.payloads.MotionInfo.Status status = 1;
inline void MotionInfo::clear_status() {
  status_ = 0;
}
inline ::indiemotionpb::payloads::MotionInfo_Status MotionInfo::_internal_status() const {
  return static_cast< ::indiemotionpb::payloads::MotionInfo_Status >(status_);
}
inline ::indiemotionpb::payloads::MotionInfo_Status MotionInfo::status() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.MotionInfo.status)
  return _internal_status();
}
inline void MotionInfo::_internal_set_status(::indiemotionpb::payloads::MotionInfo_Status value) {
  
  status_ = value;
}
inline void MotionInfo::set_status(::indiemotionpb::payloads::MotionInfo_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.MotionInfo.status)
}

// .indiemotionpb.payloads.XForm xform = 10;
inline bool MotionInfo::_internal_has_xform() const {
  return this != internal_default_instance() && xform_ != nullptr;
}
inline bool MotionInfo::has_xform() const {
  return _internal_has_xform();
}
inline void MotionInfo::clear_xform() {
  if (GetArenaForAllocation() == nullptr && xform_ != nullptr) {
    delete xform_;
  }
  xform_ = nullptr;
}
inline const ::indiemotionpb::payloads::XForm& MotionInfo::_internal_xform() const {
  const ::indiemotionpb::payloads::XForm* p = xform_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::XForm&>(
      ::indiemotionpb::payloads::_XForm_default_instance_);
}
inline const ::indiemotionpb::payloads::XForm& MotionInfo::xform() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.MotionInfo.xform)
  return _internal_xform();
}
inline void MotionInfo::unsafe_arena_set_allocated_xform(
    ::indiemotionpb::payloads::XForm* xform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xform_);
  }
  xform_ = xform;
  if (xform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.MotionInfo.xform)
}
inline ::indiemotionpb::payloads::XForm* MotionInfo::release_xform() {
  
  ::indiemotionpb::payloads::XForm* temp = xform_;
  xform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::XForm* MotionInfo::unsafe_arena_release_xform() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.MotionInfo.xform)
  
  ::indiemotionpb::payloads::XForm* temp = xform_;
  xform_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::XForm* MotionInfo::_internal_mutable_xform() {
  
  if (xform_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::XForm>(GetArenaForAllocation());
    xform_ = p;
  }
  return xform_;
}
inline ::indiemotionpb::payloads::XForm* MotionInfo::mutable_xform() {
  ::indiemotionpb::payloads::XForm* _msg = _internal_mutable_xform();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.MotionInfo.xform)
  return _msg;
}
inline void MotionInfo::set_allocated_xform(::indiemotionpb::payloads::XForm* xform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete xform_;
  }
  if (xform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::XForm>::GetOwningArena(xform);
    if (message_arena != submessage_arena) {
      xform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xform, submessage_arena);
    }
    
  } else {
    
  }
  xform_ = xform;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.MotionInfo.xform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace payloads
}  // namespace indiemotionpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::indiemotionpb::payloads::Error_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::indiemotionpb::payloads::Error_Type>() {
  return ::indiemotionpb::payloads::Error_Type_descriptor();
}
template <> struct is_proto_enum< ::indiemotionpb::payloads::MotionInfo_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::indiemotionpb::payloads::MotionInfo_Status>() {
  return ::indiemotionpb::payloads::MotionInfo_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto
