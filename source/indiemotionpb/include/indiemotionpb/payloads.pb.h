// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payloads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payloads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payloads_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payloads_2eproto;
namespace indiemotionpb {
namespace payloads {
class Acknowledge;
struct AcknowledgeDefaultTypeInternal;
extern AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class CameraList;
struct CameraListDefaultTypeInternal;
extern CameraListDefaultTypeInternal _CameraList_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class GetCameraList;
struct GetCameraListDefaultTypeInternal;
extern GetCameraListDefaultTypeInternal _GetCameraList_default_instance_;
class GetSessionPropertyByName;
struct GetSessionPropertyByNameDefaultTypeInternal;
extern GetSessionPropertyByNameDefaultTypeInternal _GetSessionPropertyByName_default_instance_;
class InitializeSession;
struct InitializeSessionDefaultTypeInternal;
extern InitializeSessionDefaultTypeInternal _InitializeSession_default_instance_;
class InputDeviceInfo;
struct InputDeviceInfoDefaultTypeInternal;
extern InputDeviceInfoDefaultTypeInternal _InputDeviceInfo_default_instance_;
class InputDeviceXForm;
struct InputDeviceXFormDefaultTypeInternal;
extern InputDeviceXFormDefaultTypeInternal _InputDeviceXForm_default_instance_;
class InputDeviceXForm_XFormData;
struct InputDeviceXForm_XFormDataDefaultTypeInternal;
extern InputDeviceXForm_XFormDataDefaultTypeInternal _InputDeviceXForm_XFormData_default_instance_;
class SessionProperty;
struct SessionPropertyDefaultTypeInternal;
extern SessionPropertyDefaultTypeInternal _SessionProperty_default_instance_;
class ShutdownSession;
struct ShutdownSessionDefaultTypeInternal;
extern ShutdownSessionDefaultTypeInternal _ShutdownSession_default_instance_;
}  // namespace payloads
}  // namespace indiemotionpb
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotionpb::payloads::Acknowledge* Arena::CreateMaybeMessage<::indiemotionpb::payloads::Acknowledge>(Arena*);
template<> ::indiemotionpb::payloads::Camera* Arena::CreateMaybeMessage<::indiemotionpb::payloads::Camera>(Arena*);
template<> ::indiemotionpb::payloads::CameraList* Arena::CreateMaybeMessage<::indiemotionpb::payloads::CameraList>(Arena*);
template<> ::indiemotionpb::payloads::Error* Arena::CreateMaybeMessage<::indiemotionpb::payloads::Error>(Arena*);
template<> ::indiemotionpb::payloads::GetCameraList* Arena::CreateMaybeMessage<::indiemotionpb::payloads::GetCameraList>(Arena*);
template<> ::indiemotionpb::payloads::GetSessionPropertyByName* Arena::CreateMaybeMessage<::indiemotionpb::payloads::GetSessionPropertyByName>(Arena*);
template<> ::indiemotionpb::payloads::InitializeSession* Arena::CreateMaybeMessage<::indiemotionpb::payloads::InitializeSession>(Arena*);
template<> ::indiemotionpb::payloads::InputDeviceInfo* Arena::CreateMaybeMessage<::indiemotionpb::payloads::InputDeviceInfo>(Arena*);
template<> ::indiemotionpb::payloads::InputDeviceXForm* Arena::CreateMaybeMessage<::indiemotionpb::payloads::InputDeviceXForm>(Arena*);
template<> ::indiemotionpb::payloads::InputDeviceXForm_XFormData* Arena::CreateMaybeMessage<::indiemotionpb::payloads::InputDeviceXForm_XFormData>(Arena*);
template<> ::indiemotionpb::payloads::SessionProperty* Arena::CreateMaybeMessage<::indiemotionpb::payloads::SessionProperty>(Arena*);
template<> ::indiemotionpb::payloads::ShutdownSession* Arena::CreateMaybeMessage<::indiemotionpb::payloads::ShutdownSession>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotionpb {
namespace payloads {

enum Error_Type : int {
  Error_Type_UnknownError = 0,
  Error_Type_InputDeviceError = 1,
  Error_Type_ApplicationError = 2,
  Error_Type_UserError = 3,
  Error_Type_BadMessageError = 4,
  Error_Type_APIVersionNotSupportedError = 5,
  Error_Type_SessionError = 10,
  Error_Type_SessionNotInitializedError = 11,
  Error_Type_CameraNotSetError = 20,
  Error_Type_CameraNotFoundError = 21,
  Error_Type_Error_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Error_Type_Error_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Error_Type_IsValid(int value);
constexpr Error_Type Error_Type_Type_MIN = Error_Type_UnknownError;
constexpr Error_Type Error_Type_Type_MAX = Error_Type_CameraNotFoundError;
constexpr int Error_Type_Type_ARRAYSIZE = Error_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Type_descriptor();
template<typename T>
inline const std::string& Error_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Type_descriptor(), enum_t_value);
}
inline bool Error_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Type>(
    Error_Type_descriptor(), name, value);
}
enum SessionPropertyType : int {
  String = 0,
  Int = 1,
  Float = 2,
  SessionPropertyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionPropertyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionPropertyType_IsValid(int value);
constexpr SessionPropertyType SessionPropertyType_MIN = String;
constexpr SessionPropertyType SessionPropertyType_MAX = Float;
constexpr int SessionPropertyType_ARRAYSIZE = SessionPropertyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionPropertyType_descriptor();
template<typename T>
inline const std::string& SessionPropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionPropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionPropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionPropertyType_descriptor(), enum_t_value);
}
inline bool SessionPropertyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionPropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionPropertyType>(
    SessionPropertyType_descriptor(), name, value);
}
// ===================================================================

class Acknowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.Acknowledge) */ {
 public:
  inline Acknowledge() : Acknowledge(nullptr) {}
  ~Acknowledge() override;
  explicit constexpr Acknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Acknowledge(const Acknowledge& from);
  Acknowledge(Acknowledge&& from) noexcept
    : Acknowledge() {
    *this = ::std::move(from);
  }

  inline Acknowledge& operator=(const Acknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledge& operator=(Acknowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Acknowledge* internal_default_instance() {
    return reinterpret_cast<const Acknowledge*>(
               &_Acknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Acknowledge& a, Acknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acknowledge* New() const final {
    return new Acknowledge();
  }

  Acknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acknowledge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Acknowledge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Acknowledge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.Acknowledge";
  }
  protected:
  explicit Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.Acknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return new Error();
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Type Type;
  static constexpr Type UnknownError =
    Error_Type_UnknownError;
  static constexpr Type InputDeviceError =
    Error_Type_InputDeviceError;
  static constexpr Type ApplicationError =
    Error_Type_ApplicationError;
  static constexpr Type UserError =
    Error_Type_UserError;
  static constexpr Type BadMessageError =
    Error_Type_BadMessageError;
  static constexpr Type APIVersionNotSupportedError =
    Error_Type_APIVersionNotSupportedError;
  static constexpr Type SessionError =
    Error_Type_SessionError;
  static constexpr Type SessionNotInitializedError =
    Error_Type_SessionNotInitializedError;
  static constexpr Type CameraNotSetError =
    Error_Type_CameraNotSetError;
  static constexpr Type CameraNotFoundError =
    Error_Type_CameraNotFoundError;
  static inline bool Type_IsValid(int value) {
    return Error_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 11,
    kIsFatalFieldNumber = 12,
    kTypeFieldNumber = 13,
  };
  // string description = 11;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool is_fatal = 12;
  void clear_is_fatal();
  bool is_fatal() const;
  void set_is_fatal(bool value);
  private:
  bool _internal_is_fatal() const;
  void _internal_set_is_fatal(bool value);
  public:

  // .indiemotionpb.payloads.Error.Type type = 13;
  void clear_type();
  ::indiemotionpb::payloads::Error_Type type() const;
  void set_type(::indiemotionpb::payloads::Error_Type value);
  private:
  ::indiemotionpb::payloads::Error_Type _internal_type() const;
  void _internal_set_type(::indiemotionpb::payloads::Error_Type value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool is_fatal_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class InputDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.InputDeviceInfo) */ {
 public:
  inline InputDeviceInfo() : InputDeviceInfo(nullptr) {}
  ~InputDeviceInfo() override;
  explicit constexpr InputDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputDeviceInfo(const InputDeviceInfo& from);
  InputDeviceInfo(InputDeviceInfo&& from) noexcept
    : InputDeviceInfo() {
    *this = ::std::move(from);
  }

  inline InputDeviceInfo& operator=(const InputDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputDeviceInfo& operator=(InputDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const InputDeviceInfo*>(
               &_InputDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InputDeviceInfo& a, InputDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InputDeviceInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputDeviceInfo* New() const final {
    return new InputDeviceInfo();
  }

  InputDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.InputDeviceInfo";
  }
  protected:
  explicit InputDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 10,
    kApiVersionFieldNumber = 20,
  };
  // string session_id = 10;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string api_version = 20;
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.InputDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class InitializeSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.InitializeSession) */ {
 public:
  inline InitializeSession() : InitializeSession(nullptr) {}
  ~InitializeSession() override;
  explicit constexpr InitializeSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeSession(const InitializeSession& from);
  InitializeSession(InitializeSession&& from) noexcept
    : InitializeSession() {
    *this = ::std::move(from);
  }

  inline InitializeSession& operator=(const InitializeSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeSession& operator=(InitializeSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeSession* internal_default_instance() {
    return reinterpret_cast<const InitializeSession*>(
               &_InitializeSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitializeSession& a, InitializeSession& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeSession* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitializeSession* New() const final {
    return new InitializeSession();
  }

  InitializeSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitializeSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.InitializeSession";
  }
  protected:
  explicit InitializeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceInfoFieldNumber = 10,
  };
  // .indiemotionpb.payloads.InputDeviceInfo device_info = 10;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::indiemotionpb::payloads::InputDeviceInfo& device_info() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InputDeviceInfo* release_device_info();
  ::indiemotionpb::payloads::InputDeviceInfo* mutable_device_info();
  void set_allocated_device_info(::indiemotionpb::payloads::InputDeviceInfo* device_info);
  private:
  const ::indiemotionpb::payloads::InputDeviceInfo& _internal_device_info() const;
  ::indiemotionpb::payloads::InputDeviceInfo* _internal_mutable_device_info();
  public:
  void unsafe_arena_set_allocated_device_info(
      ::indiemotionpb::payloads::InputDeviceInfo* device_info);
  ::indiemotionpb::payloads::InputDeviceInfo* unsafe_arena_release_device_info();

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.InitializeSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::payloads::InputDeviceInfo* device_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class ShutdownSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.ShutdownSession) */ {
 public:
  inline ShutdownSession() : ShutdownSession(nullptr) {}
  ~ShutdownSession() override;
  explicit constexpr ShutdownSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownSession(const ShutdownSession& from);
  ShutdownSession(ShutdownSession&& from) noexcept
    : ShutdownSession() {
    *this = ::std::move(from);
  }

  inline ShutdownSession& operator=(const ShutdownSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownSession& operator=(ShutdownSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownSession* internal_default_instance() {
    return reinterpret_cast<const ShutdownSession*>(
               &_ShutdownSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShutdownSession& a, ShutdownSession& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownSession* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownSession* New() const final {
    return new ShutdownSession();
  }

  ShutdownSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShutdownSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShutdownSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.ShutdownSession";
  }
  protected:
  explicit ShutdownSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.ShutdownSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return new Camera();
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Camera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 10,
  };
  // string id = 10;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class CameraList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.CameraList) */ {
 public:
  inline CameraList() : CameraList(nullptr) {}
  ~CameraList() override;
  explicit constexpr CameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraList(const CameraList& from);
  CameraList(CameraList&& from) noexcept
    : CameraList() {
    *this = ::std::move(from);
  }

  inline CameraList& operator=(const CameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraList& operator=(CameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraList* internal_default_instance() {
    return reinterpret_cast<const CameraList*>(
               &_CameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CameraList& a, CameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraList* New() const final {
    return new CameraList();
  }

  CameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.CameraList";
  }
  protected:
  explicit CameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 1,
  };
  // repeated .indiemotionpb.payloads.Camera cameras = 1;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::indiemotionpb::payloads::Camera* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >*
      mutable_cameras();
  private:
  const ::indiemotionpb::payloads::Camera& _internal_cameras(int index) const;
  ::indiemotionpb::payloads::Camera* _internal_add_cameras();
  public:
  const ::indiemotionpb::payloads::Camera& cameras(int index) const;
  ::indiemotionpb::payloads::Camera* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >&
      cameras() const;

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.CameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera > cameras_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class GetCameraList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.GetCameraList) */ {
 public:
  inline GetCameraList() : GetCameraList(nullptr) {}
  ~GetCameraList() override;
  explicit constexpr GetCameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCameraList(const GetCameraList& from);
  GetCameraList(GetCameraList&& from) noexcept
    : GetCameraList() {
    *this = ::std::move(from);
  }

  inline GetCameraList& operator=(const GetCameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCameraList& operator=(GetCameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCameraList* internal_default_instance() {
    return reinterpret_cast<const GetCameraList*>(
               &_GetCameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetCameraList& a, GetCameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCameraList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCameraList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCameraList* New() const final {
    return new GetCameraList();
  }

  GetCameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCameraList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCameraList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCameraList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCameraList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.GetCameraList";
  }
  protected:
  explicit GetCameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.GetCameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class SessionProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.SessionProperty) */ {
 public:
  inline SessionProperty() : SessionProperty(nullptr) {}
  ~SessionProperty() override;
  explicit constexpr SessionProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionProperty(const SessionProperty& from);
  SessionProperty(SessionProperty&& from) noexcept
    : SessionProperty() {
    *this = ::std::move(from);
  }

  inline SessionProperty& operator=(const SessionProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionProperty& operator=(SessionProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionProperty* internal_default_instance() {
    return reinterpret_cast<const SessionProperty*>(
               &_SessionProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SessionProperty& a, SessionProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionProperty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionProperty* New() const final {
    return new SessionProperty();
  }

  SessionProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionProperty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.SessionProperty";
  }
  protected:
  explicit SessionProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 11,
    kValueFieldNumber = 12,
    kTypeFieldNumber = 10,
  };
  // string name = 11;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 12;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .indiemotionpb.payloads.SessionPropertyType type = 10;
  void clear_type();
  ::indiemotionpb::payloads::SessionPropertyType type() const;
  void set_type(::indiemotionpb::payloads::SessionPropertyType value);
  private:
  ::indiemotionpb::payloads::SessionPropertyType _internal_type() const;
  void _internal_set_type(::indiemotionpb::payloads::SessionPropertyType value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.SessionProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class GetSessionPropertyByName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.GetSessionPropertyByName) */ {
 public:
  inline GetSessionPropertyByName() : GetSessionPropertyByName(nullptr) {}
  ~GetSessionPropertyByName() override;
  explicit constexpr GetSessionPropertyByName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSessionPropertyByName(const GetSessionPropertyByName& from);
  GetSessionPropertyByName(GetSessionPropertyByName&& from) noexcept
    : GetSessionPropertyByName() {
    *this = ::std::move(from);
  }

  inline GetSessionPropertyByName& operator=(const GetSessionPropertyByName& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSessionPropertyByName& operator=(GetSessionPropertyByName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSessionPropertyByName& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSessionPropertyByName* internal_default_instance() {
    return reinterpret_cast<const GetSessionPropertyByName*>(
               &_GetSessionPropertyByName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSessionPropertyByName& a, GetSessionPropertyByName& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSessionPropertyByName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSessionPropertyByName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSessionPropertyByName* New() const final {
    return new GetSessionPropertyByName();
  }

  GetSessionPropertyByName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSessionPropertyByName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSessionPropertyByName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSessionPropertyByName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionPropertyByName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.GetSessionPropertyByName";
  }
  protected:
  explicit GetSessionPropertyByName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.GetSessionPropertyByName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class InputDeviceXForm_XFormData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.InputDeviceXForm.XFormData) */ {
 public:
  inline InputDeviceXForm_XFormData() : InputDeviceXForm_XFormData(nullptr) {}
  ~InputDeviceXForm_XFormData() override;
  explicit constexpr InputDeviceXForm_XFormData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputDeviceXForm_XFormData(const InputDeviceXForm_XFormData& from);
  InputDeviceXForm_XFormData(InputDeviceXForm_XFormData&& from) noexcept
    : InputDeviceXForm_XFormData() {
    *this = ::std::move(from);
  }

  inline InputDeviceXForm_XFormData& operator=(const InputDeviceXForm_XFormData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputDeviceXForm_XFormData& operator=(InputDeviceXForm_XFormData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputDeviceXForm_XFormData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputDeviceXForm_XFormData* internal_default_instance() {
    return reinterpret_cast<const InputDeviceXForm_XFormData*>(
               &_InputDeviceXForm_XFormData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InputDeviceXForm_XFormData& a, InputDeviceXForm_XFormData& b) {
    a.Swap(&b);
  }
  inline void Swap(InputDeviceXForm_XFormData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputDeviceXForm_XFormData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputDeviceXForm_XFormData* New() const final {
    return new InputDeviceXForm_XFormData();
  }

  InputDeviceXForm_XFormData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputDeviceXForm_XFormData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputDeviceXForm_XFormData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputDeviceXForm_XFormData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDeviceXForm_XFormData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.InputDeviceXForm.XFormData";
  }
  protected:
  explicit InputDeviceXForm_XFormData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.InputDeviceXForm.XFormData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class InputDeviceXForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.payloads.InputDeviceXForm) */ {
 public:
  inline InputDeviceXForm() : InputDeviceXForm(nullptr) {}
  ~InputDeviceXForm() override;
  explicit constexpr InputDeviceXForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputDeviceXForm(const InputDeviceXForm& from);
  InputDeviceXForm(InputDeviceXForm&& from) noexcept
    : InputDeviceXForm() {
    *this = ::std::move(from);
  }

  inline InputDeviceXForm& operator=(const InputDeviceXForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputDeviceXForm& operator=(InputDeviceXForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputDeviceXForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputDeviceXForm* internal_default_instance() {
    return reinterpret_cast<const InputDeviceXForm*>(
               &_InputDeviceXForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InputDeviceXForm& a, InputDeviceXForm& b) {
    a.Swap(&b);
  }
  inline void Swap(InputDeviceXForm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputDeviceXForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputDeviceXForm* New() const final {
    return new InputDeviceXForm();
  }

  InputDeviceXForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputDeviceXForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputDeviceXForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputDeviceXForm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDeviceXForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.payloads.InputDeviceXForm";
  }
  protected:
  explicit InputDeviceXForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InputDeviceXForm_XFormData XFormData;

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .indiemotionpb.payloads.InputDeviceXForm.XFormData translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& translation() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InputDeviceXForm_XFormData* release_translation();
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* mutable_translation();
  void set_allocated_translation(::indiemotionpb::payloads::InputDeviceXForm_XFormData* translation);
  private:
  const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& _internal_translation() const;
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::indiemotionpb::payloads::InputDeviceXForm_XFormData* translation);
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* unsafe_arena_release_translation();

  // .indiemotionpb.payloads.InputDeviceXForm.XFormData orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& orientation() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InputDeviceXForm_XFormData* release_orientation();
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* mutable_orientation();
  void set_allocated_orientation(::indiemotionpb::payloads::InputDeviceXForm_XFormData* orientation);
  private:
  const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& _internal_orientation() const;
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::indiemotionpb::payloads::InputDeviceXForm_XFormData* orientation);
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:indiemotionpb.payloads.InputDeviceXForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* translation_;
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payloads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Acknowledge

// -------------------------------------------------------------------

// Error

// .indiemotionpb.payloads.Error.Type type = 13;
inline void Error::clear_type() {
  type_ = 0;
}
inline ::indiemotionpb::payloads::Error_Type Error::_internal_type() const {
  return static_cast< ::indiemotionpb::payloads::Error_Type >(type_);
}
inline ::indiemotionpb::payloads::Error_Type Error::type() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Error.type)
  return _internal_type();
}
inline void Error::_internal_set_type(::indiemotionpb::payloads::Error_Type value) {
  
  type_ = value;
}
inline void Error::set_type(::indiemotionpb::payloads::Error_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Error.type)
}

// string description = 11;
inline void Error::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Error::description() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Error.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Error.description)
}
inline std::string* Error::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.Error.description)
  return _s;
}
inline const std::string& Error::_internal_description() const {
  return description_.Get();
}
inline void Error::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_description() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.Error.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.Error.description)
}

// bool is_fatal = 12;
inline void Error::clear_is_fatal() {
  is_fatal_ = false;
}
inline bool Error::_internal_is_fatal() const {
  return is_fatal_;
}
inline bool Error::is_fatal() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Error.is_fatal)
  return _internal_is_fatal();
}
inline void Error::_internal_set_is_fatal(bool value) {
  
  is_fatal_ = value;
}
inline void Error::set_is_fatal(bool value) {
  _internal_set_is_fatal(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Error.is_fatal)
}

// -------------------------------------------------------------------

// InputDeviceInfo

// string session_id = 10;
inline void InputDeviceInfo::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& InputDeviceInfo::session_id() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceInfo.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputDeviceInfo::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.InputDeviceInfo.session_id)
}
inline std::string* InputDeviceInfo::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.InputDeviceInfo.session_id)
  return _s;
}
inline const std::string& InputDeviceInfo::_internal_session_id() const {
  return session_id_.Get();
}
inline void InputDeviceInfo::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputDeviceInfo::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputDeviceInfo::release_session_id() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.InputDeviceInfo.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputDeviceInfo::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.InputDeviceInfo.session_id)
}

// string api_version = 20;
inline void InputDeviceInfo::clear_api_version() {
  api_version_.ClearToEmpty();
}
inline const std::string& InputDeviceInfo::api_version() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceInfo.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputDeviceInfo::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.InputDeviceInfo.api_version)
}
inline std::string* InputDeviceInfo::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.InputDeviceInfo.api_version)
  return _s;
}
inline const std::string& InputDeviceInfo::_internal_api_version() const {
  return api_version_.Get();
}
inline void InputDeviceInfo::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputDeviceInfo::_internal_mutable_api_version() {
  
  return api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputDeviceInfo::release_api_version() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.InputDeviceInfo.api_version)
  return api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputDeviceInfo::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.InputDeviceInfo.api_version)
}

// -------------------------------------------------------------------

// InitializeSession

// .indiemotionpb.payloads.InputDeviceInfo device_info = 10;
inline bool InitializeSession::_internal_has_device_info() const {
  return this != internal_default_instance() && device_info_ != nullptr;
}
inline bool InitializeSession::has_device_info() const {
  return _internal_has_device_info();
}
inline void InitializeSession::clear_device_info() {
  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
inline const ::indiemotionpb::payloads::InputDeviceInfo& InitializeSession::_internal_device_info() const {
  const ::indiemotionpb::payloads::InputDeviceInfo* p = device_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::InputDeviceInfo&>(
      ::indiemotionpb::payloads::_InputDeviceInfo_default_instance_);
}
inline const ::indiemotionpb::payloads::InputDeviceInfo& InitializeSession::device_info() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InitializeSession.device_info)
  return _internal_device_info();
}
inline void InitializeSession::unsafe_arena_set_allocated_device_info(
    ::indiemotionpb::payloads::InputDeviceInfo* device_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info_);
  }
  device_info_ = device_info;
  if (device_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.InitializeSession.device_info)
}
inline ::indiemotionpb::payloads::InputDeviceInfo* InitializeSession::release_device_info() {
  
  ::indiemotionpb::payloads::InputDeviceInfo* temp = device_info_;
  device_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::InputDeviceInfo* InitializeSession::unsafe_arena_release_device_info() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.InitializeSession.device_info)
  
  ::indiemotionpb::payloads::InputDeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::InputDeviceInfo* InitializeSession::_internal_mutable_device_info() {
  
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::InputDeviceInfo>(GetArenaForAllocation());
    device_info_ = p;
  }
  return device_info_;
}
inline ::indiemotionpb::payloads::InputDeviceInfo* InitializeSession::mutable_device_info() {
  ::indiemotionpb::payloads::InputDeviceInfo* _msg = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.InitializeSession.device_info)
  return _msg;
}
inline void InitializeSession::set_allocated_device_info(::indiemotionpb::payloads::InputDeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_info_;
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::InputDeviceInfo>::GetOwningArena(device_info);
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.InitializeSession.device_info)
}

// -------------------------------------------------------------------

// ShutdownSession

// -------------------------------------------------------------------

// Camera

// string id = 10;
inline void Camera::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Camera::id() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.Camera.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.Camera.id)
}
inline std::string* Camera::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.Camera.id)
  return _s;
}
inline const std::string& Camera::_internal_id() const {
  return id_.Get();
}
inline void Camera::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_id() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.Camera.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Camera::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.Camera.id)
}

// -------------------------------------------------------------------

// CameraList

// repeated .indiemotionpb.payloads.Camera cameras = 1;
inline int CameraList::_internal_cameras_size() const {
  return cameras_.size();
}
inline int CameraList::cameras_size() const {
  return _internal_cameras_size();
}
inline void CameraList::clear_cameras() {
  cameras_.Clear();
}
inline ::indiemotionpb::payloads::Camera* CameraList::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.CameraList.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >*
CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:indiemotionpb.payloads.CameraList.cameras)
  return &cameras_;
}
inline const ::indiemotionpb::payloads::Camera& CameraList::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::indiemotionpb::payloads::Camera& CameraList::cameras(int index) const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.CameraList.cameras)
  return _internal_cameras(index);
}
inline ::indiemotionpb::payloads::Camera* CameraList::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::indiemotionpb::payloads::Camera* CameraList::add_cameras() {
  ::indiemotionpb::payloads::Camera* _add = _internal_add_cameras();
  // @@protoc_insertion_point(field_add:indiemotionpb.payloads.CameraList.cameras)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::indiemotionpb::payloads::Camera >&
CameraList::cameras() const {
  // @@protoc_insertion_point(field_list:indiemotionpb.payloads.CameraList.cameras)
  return cameras_;
}

// -------------------------------------------------------------------

// GetCameraList

// -------------------------------------------------------------------

// SessionProperty

// .indiemotionpb.payloads.SessionPropertyType type = 10;
inline void SessionProperty::clear_type() {
  type_ = 0;
}
inline ::indiemotionpb::payloads::SessionPropertyType SessionProperty::_internal_type() const {
  return static_cast< ::indiemotionpb::payloads::SessionPropertyType >(type_);
}
inline ::indiemotionpb::payloads::SessionPropertyType SessionProperty::type() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SessionProperty.type)
  return _internal_type();
}
inline void SessionProperty::_internal_set_type(::indiemotionpb::payloads::SessionPropertyType value) {
  
  type_ = value;
}
inline void SessionProperty::set_type(::indiemotionpb::payloads::SessionPropertyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.SessionProperty.type)
}

// string name = 11;
inline void SessionProperty::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SessionProperty::name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SessionProperty.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionProperty::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.SessionProperty.name)
}
inline std::string* SessionProperty::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.SessionProperty.name)
  return _s;
}
inline const std::string& SessionProperty::_internal_name() const {
  return name_.Get();
}
inline void SessionProperty::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionProperty::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionProperty::release_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.SessionProperty.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionProperty::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.SessionProperty.name)
}

// optional string value = 12;
inline bool SessionProperty::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionProperty::has_value() const {
  return _internal_has_value();
}
inline void SessionProperty::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionProperty::value() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.SessionProperty.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionProperty::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.SessionProperty.value)
}
inline std::string* SessionProperty::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.SessionProperty.value)
  return _s;
}
inline const std::string& SessionProperty::_internal_value() const {
  return value_.Get();
}
inline void SessionProperty::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionProperty::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionProperty::release_value() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.SessionProperty.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionProperty::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.SessionProperty.value)
}

// -------------------------------------------------------------------

// GetSessionPropertyByName

// string name = 10;
inline void GetSessionPropertyByName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetSessionPropertyByName::name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.GetSessionPropertyByName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSessionPropertyByName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.GetSessionPropertyByName.name)
}
inline std::string* GetSessionPropertyByName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.GetSessionPropertyByName.name)
  return _s;
}
inline const std::string& GetSessionPropertyByName::_internal_name() const {
  return name_.Get();
}
inline void GetSessionPropertyByName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSessionPropertyByName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSessionPropertyByName::release_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.GetSessionPropertyByName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSessionPropertyByName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.GetSessionPropertyByName.name)
}

// -------------------------------------------------------------------

// InputDeviceXForm_XFormData

// double x = 1;
inline void InputDeviceXForm_XFormData::clear_x() {
  x_ = 0;
}
inline double InputDeviceXForm_XFormData::_internal_x() const {
  return x_;
}
inline double InputDeviceXForm_XFormData::x() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceXForm.XFormData.x)
  return _internal_x();
}
inline void InputDeviceXForm_XFormData::_internal_set_x(double value) {
  
  x_ = value;
}
inline void InputDeviceXForm_XFormData::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.InputDeviceXForm.XFormData.x)
}

// double y = 2;
inline void InputDeviceXForm_XFormData::clear_y() {
  y_ = 0;
}
inline double InputDeviceXForm_XFormData::_internal_y() const {
  return y_;
}
inline double InputDeviceXForm_XFormData::y() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceXForm.XFormData.y)
  return _internal_y();
}
inline void InputDeviceXForm_XFormData::_internal_set_y(double value) {
  
  y_ = value;
}
inline void InputDeviceXForm_XFormData::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.InputDeviceXForm.XFormData.y)
}

// double z = 3;
inline void InputDeviceXForm_XFormData::clear_z() {
  z_ = 0;
}
inline double InputDeviceXForm_XFormData::_internal_z() const {
  return z_;
}
inline double InputDeviceXForm_XFormData::z() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceXForm.XFormData.z)
  return _internal_z();
}
inline void InputDeviceXForm_XFormData::_internal_set_z(double value) {
  
  z_ = value;
}
inline void InputDeviceXForm_XFormData::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:indiemotionpb.payloads.InputDeviceXForm.XFormData.z)
}

// -------------------------------------------------------------------

// InputDeviceXForm

// .indiemotionpb.payloads.InputDeviceXForm.XFormData translation = 1;
inline bool InputDeviceXForm::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool InputDeviceXForm::has_translation() const {
  return _internal_has_translation();
}
inline void InputDeviceXForm::clear_translation() {
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& InputDeviceXForm::_internal_translation() const {
  const ::indiemotionpb::payloads::InputDeviceXForm_XFormData* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::InputDeviceXForm_XFormData&>(
      ::indiemotionpb::payloads::_InputDeviceXForm_XFormData_default_instance_);
}
inline const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& InputDeviceXForm::translation() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceXForm.translation)
  return _internal_translation();
}
inline void InputDeviceXForm::unsafe_arena_set_allocated_translation(
    ::indiemotionpb::payloads::InputDeviceXForm_XFormData* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.InputDeviceXForm.translation)
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::release_translation() {
  
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* temp = translation_;
  translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.InputDeviceXForm.translation)
  
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::InputDeviceXForm_XFormData>(GetArenaForAllocation());
    translation_ = p;
  }
  return translation_;
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::mutable_translation() {
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.InputDeviceXForm.translation)
  return _msg;
}
inline void InputDeviceXForm::set_allocated_translation(::indiemotionpb::payloads::InputDeviceXForm_XFormData* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::InputDeviceXForm_XFormData>::GetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.InputDeviceXForm.translation)
}

// .indiemotionpb.payloads.InputDeviceXForm.XFormData orientation = 2;
inline bool InputDeviceXForm::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool InputDeviceXForm::has_orientation() const {
  return _internal_has_orientation();
}
inline void InputDeviceXForm::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& InputDeviceXForm::_internal_orientation() const {
  const ::indiemotionpb::payloads::InputDeviceXForm_XFormData* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::payloads::InputDeviceXForm_XFormData&>(
      ::indiemotionpb::payloads::_InputDeviceXForm_XFormData_default_instance_);
}
inline const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& InputDeviceXForm::orientation() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.payloads.InputDeviceXForm.orientation)
  return _internal_orientation();
}
inline void InputDeviceXForm::unsafe_arena_set_allocated_orientation(
    ::indiemotionpb::payloads::InputDeviceXForm_XFormData* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.payloads.InputDeviceXForm.orientation)
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::release_orientation() {
  
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:indiemotionpb.payloads.InputDeviceXForm.orientation)
  
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::payloads::InputDeviceXForm_XFormData>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::indiemotionpb::payloads::InputDeviceXForm_XFormData* InputDeviceXForm::mutable_orientation() {
  ::indiemotionpb::payloads::InputDeviceXForm_XFormData* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.payloads.InputDeviceXForm.orientation)
  return _msg;
}
inline void InputDeviceXForm::set_allocated_orientation(::indiemotionpb::payloads::InputDeviceXForm_XFormData* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::payloads::InputDeviceXForm_XFormData>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.payloads.InputDeviceXForm.orientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace payloads
}  // namespace indiemotionpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::indiemotionpb::payloads::Error_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::indiemotionpb::payloads::Error_Type>() {
  return ::indiemotionpb::payloads::Error_Type_descriptor();
}
template <> struct is_proto_enum< ::indiemotionpb::payloads::SessionPropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::indiemotionpb::payloads::SessionPropertyType>() {
  return ::indiemotionpb::payloads::SessionPropertyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto
