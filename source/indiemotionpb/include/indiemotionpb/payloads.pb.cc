// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payloads.proto

#include "payloads.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace indiemotionpb {
namespace payloads {
constexpr Acknowledge::Acknowledge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AcknowledgeDefaultTypeInternal {
  constexpr AcknowledgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcknowledgeDefaultTypeInternal() {}
  union {
    Acknowledge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_fatal_(false)
  , type_(0)
{}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr InputDeviceInfo::InputDeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InputDeviceInfoDefaultTypeInternal {
  constexpr InputDeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputDeviceInfoDefaultTypeInternal() {}
  union {
    InputDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputDeviceInfoDefaultTypeInternal _InputDeviceInfo_default_instance_;
constexpr InitializeSession::InitializeSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_info_(nullptr){}
struct InitializeSessionDefaultTypeInternal {
  constexpr InitializeSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeSessionDefaultTypeInternal() {}
  union {
    InitializeSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeSessionDefaultTypeInternal _InitializeSession_default_instance_;
constexpr ShutdownSession::ShutdownSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ShutdownSessionDefaultTypeInternal {
  constexpr ShutdownSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownSessionDefaultTypeInternal() {}
  union {
    ShutdownSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownSessionDefaultTypeInternal _ShutdownSession_default_instance_;
constexpr Camera::Camera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CameraDefaultTypeInternal {
  constexpr CameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDefaultTypeInternal _Camera_default_instance_;
constexpr CameraList::CameraList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cameras_(){}
struct CameraListDefaultTypeInternal {
  constexpr CameraListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraListDefaultTypeInternal() {}
  union {
    CameraList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraListDefaultTypeInternal _CameraList_default_instance_;
constexpr GetCameraList::GetCameraList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetCameraListDefaultTypeInternal {
  constexpr GetCameraListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCameraListDefaultTypeInternal() {}
  union {
    GetCameraList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCameraListDefaultTypeInternal _GetCameraList_default_instance_;
constexpr SessionProperty::SessionProperty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct SessionPropertyDefaultTypeInternal {
  constexpr SessionPropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionPropertyDefaultTypeInternal() {}
  union {
    SessionProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionPropertyDefaultTypeInternal _SessionProperty_default_instance_;
constexpr GetSessionPropertyByName::GetSessionPropertyByName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSessionPropertyByNameDefaultTypeInternal {
  constexpr GetSessionPropertyByNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSessionPropertyByNameDefaultTypeInternal() {}
  union {
    GetSessionPropertyByName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSessionPropertyByNameDefaultTypeInternal _GetSessionPropertyByName_default_instance_;
constexpr InputDeviceXForm_XFormData::InputDeviceXForm_XFormData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct InputDeviceXForm_XFormDataDefaultTypeInternal {
  constexpr InputDeviceXForm_XFormDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputDeviceXForm_XFormDataDefaultTypeInternal() {}
  union {
    InputDeviceXForm_XFormData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputDeviceXForm_XFormDataDefaultTypeInternal _InputDeviceXForm_XFormData_default_instance_;
constexpr InputDeviceXForm::InputDeviceXForm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : translation_(nullptr)
  , orientation_(nullptr){}
struct InputDeviceXFormDefaultTypeInternal {
  constexpr InputDeviceXFormDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputDeviceXFormDefaultTypeInternal() {}
  union {
    InputDeviceXForm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputDeviceXFormDefaultTypeInternal _InputDeviceXForm_default_instance_;
}  // namespace payloads
}  // namespace indiemotionpb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_payloads_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_payloads_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_payloads_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_payloads_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Acknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Error, type_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Error, description_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Error, is_fatal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceInfo, session_id_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceInfo, api_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InitializeSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InitializeSession, device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::ShutdownSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::Camera, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::CameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::CameraList, cameras_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::GetCameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::SessionProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::SessionProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::SessionProperty, type_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::SessionProperty, name_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::SessionProperty, value_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::GetSessionPropertyByName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::GetSessionPropertyByName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm_XFormData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm_XFormData, x_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm_XFormData, y_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm_XFormData, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm, translation_),
  PROTOBUF_FIELD_OFFSET(::indiemotionpb::payloads::InputDeviceXForm, orientation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::indiemotionpb::payloads::Acknowledge)},
  { 5, -1, sizeof(::indiemotionpb::payloads::Error)},
  { 13, -1, sizeof(::indiemotionpb::payloads::InputDeviceInfo)},
  { 20, -1, sizeof(::indiemotionpb::payloads::InitializeSession)},
  { 26, -1, sizeof(::indiemotionpb::payloads::ShutdownSession)},
  { 31, -1, sizeof(::indiemotionpb::payloads::Camera)},
  { 37, -1, sizeof(::indiemotionpb::payloads::CameraList)},
  { 43, -1, sizeof(::indiemotionpb::payloads::GetCameraList)},
  { 48, 56, sizeof(::indiemotionpb::payloads::SessionProperty)},
  { 59, -1, sizeof(::indiemotionpb::payloads::GetSessionPropertyByName)},
  { 65, -1, sizeof(::indiemotionpb::payloads::InputDeviceXForm_XFormData)},
  { 73, -1, sizeof(::indiemotionpb::payloads::InputDeviceXForm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_Acknowledge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_InputDeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_InitializeSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_ShutdownSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_CameraList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_GetCameraList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_SessionProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_GetSessionPropertyByName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_InputDeviceXForm_XFormData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::indiemotionpb::payloads::_InputDeviceXForm_default_instance_),
};

const char descriptor_table_protodef_payloads_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016payloads.proto\022\026indiemotionpb.payloads"
  "\"\r\n\013Acknowledge\"\316\002\n\005Error\0220\n\004type\030\r \001(\0162"
  "\".indiemotionpb.payloads.Error.Type\022\023\n\013d"
  "escription\030\013 \001(\t\022\020\n\010is_fatal\030\014 \001(\010\"\353\001\n\004T"
  "ype\022\020\n\014UnknownError\020\000\022\024\n\020InputDeviceErro"
  "r\020\001\022\024\n\020ApplicationError\020\002\022\r\n\tUserError\020\003"
  "\022\023\n\017BadMessageError\020\004\022\037\n\033APIVersionNotSu"
  "pportedError\020\005\022\020\n\014SessionError\020\n\022\036\n\032Sess"
  "ionNotInitializedError\020\013\022\025\n\021CameraNotSet"
  "Error\020\024\022\027\n\023CameraNotFoundError\020\025\":\n\017Inpu"
  "tDeviceInfo\022\022\n\nsession_id\030\n \001(\t\022\023\n\013api_v"
  "ersion\030\024 \001(\t\"Q\n\021InitializeSession\022<\n\013dev"
  "ice_info\030\n \001(\0132\'.indiemotionpb.payloads."
  "InputDeviceInfo\"\021\n\017ShutdownSession\"\024\n\006Ca"
  "mera\022\n\n\002id\030\n \001(\t\"=\n\nCameraList\022/\n\007camera"
  "s\030\001 \003(\0132\036.indiemotionpb.payloads.Camera\""
  "\017\n\rGetCameraList\"x\n\017SessionProperty\0229\n\004t"
  "ype\030\n \001(\0162+.indiemotionpb.payloads.Sessi"
  "onPropertyType\022\014\n\004name\030\013 \001(\t\022\022\n\005value\030\014 "
  "\001(\tH\000\210\001\001B\010\n\006_value\"(\n\030GetSessionProperty"
  "ByName\022\014\n\004name\030\n \001(\t\"\322\001\n\020InputDeviceXFor"
  "m\022G\n\013translation\030\001 \001(\01322.indiemotionpb.p"
  "ayloads.InputDeviceXForm.XFormData\022G\n\013or"
  "ientation\030\002 \001(\01322.indiemotionpb.payloads"
  ".InputDeviceXForm.XFormData\032,\n\tXFormData"
  "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001*5\n\023Ses"
  "sionPropertyType\022\n\n\006String\020\000\022\007\n\003Int\020\001\022\t\n"
  "\005Float\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_payloads_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payloads_2eproto = {
  false, false, 1096, descriptor_table_protodef_payloads_2eproto, "payloads.proto", 
  &descriptor_table_payloads_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_payloads_2eproto::offsets,
  file_level_metadata_payloads_2eproto, file_level_enum_descriptors_payloads_2eproto, file_level_service_descriptors_payloads_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_payloads_2eproto_getter() {
  return &descriptor_table_payloads_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_payloads_2eproto(&descriptor_table_payloads_2eproto);
namespace indiemotionpb {
namespace payloads {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payloads_2eproto);
  return file_level_enum_descriptors_payloads_2eproto[0];
}
bool Error_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_Type Error::UnknownError;
constexpr Error_Type Error::InputDeviceError;
constexpr Error_Type Error::ApplicationError;
constexpr Error_Type Error::UserError;
constexpr Error_Type Error::BadMessageError;
constexpr Error_Type Error::APIVersionNotSupportedError;
constexpr Error_Type Error::SessionError;
constexpr Error_Type Error::SessionNotInitializedError;
constexpr Error_Type Error::CameraNotSetError;
constexpr Error_Type Error::CameraNotFoundError;
constexpr Error_Type Error::Type_MIN;
constexpr Error_Type Error::Type_MAX;
constexpr int Error::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionPropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payloads_2eproto);
  return file_level_enum_descriptors_payloads_2eproto[1];
}
bool SessionPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Acknowledge::_Internal {
 public:
};

Acknowledge::Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.Acknowledge)
}
Acknowledge::Acknowledge(const Acknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.Acknowledge)
}

inline void Acknowledge::SharedCtor() {
}

Acknowledge::~Acknowledge() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.Acknowledge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Acknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Acknowledge::ArenaDtor(void* object) {
  Acknowledge* _this = reinterpret_cast< Acknowledge* >(object);
  (void)_this;
}
void Acknowledge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Acknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Acknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acknowledge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.Acknowledge)
  return target;
}

size_t Acknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.Acknowledge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Acknowledge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Acknowledge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Acknowledge::GetClassData() const { return &_class_data_; }

void Acknowledge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Acknowledge *>(to)->MergeFrom(
      static_cast<const Acknowledge &>(from));
}


void Acknowledge::MergeFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.Acknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Acknowledge::CopyFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.Acknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledge::IsInitialized() const {
  return true;
}

void Acknowledge::InternalSwap(Acknowledge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[0]);
}

// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_fatal_, &from.is_fatal_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&is_fatal_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.Error)
}

inline void Error::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_fatal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&is_fatal_)) + sizeof(type_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  ::memset(&is_fatal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&is_fatal_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.Error.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_fatal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_fatal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.Error.Type type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::indiemotionpb::payloads::Error_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 11;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.Error.description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_description(), target);
  }

  // bool is_fatal = 12;
  if (this->_internal_is_fatal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_fatal(), target);
  }

  // .indiemotionpb.payloads.Error.Type type = 13;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 11;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool is_fatal = 12;
  if (this->_internal_is_fatal() != 0) {
    total_size += 1 + 1;
  }

  // .indiemotionpb.payloads.Error.Type type = 13;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.Error)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_is_fatal() != 0) {
    _internal_set_is_fatal(from._internal_is_fatal());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, type_)
      + sizeof(Error::type_)
      - PROTOBUF_FIELD_OFFSET(Error, is_fatal_)>(
          reinterpret_cast<char*>(&is_fatal_),
          reinterpret_cast<char*>(&other->is_fatal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[1]);
}

// ===================================================================

class InputDeviceInfo::_Internal {
 public:
};

InputDeviceInfo::InputDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.InputDeviceInfo)
}
InputDeviceInfo::InputDeviceInfo(const InputDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_version().empty()) {
    api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.InputDeviceInfo)
}

inline void InputDeviceInfo::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputDeviceInfo::~InputDeviceInfo() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.InputDeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputDeviceInfo::ArenaDtor(void* object) {
  InputDeviceInfo* _this = reinterpret_cast< InputDeviceInfo* >(object);
  (void)_this;
}
void InputDeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.InputDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  api_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputDeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.InputDeviceInfo.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_version = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.InputDeviceInfo.api_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputDeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.InputDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 10;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.InputDeviceInfo.session_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_session_id(), target);
  }

  // string api_version = 20;
  if (!this->_internal_api_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_version().data(), static_cast<int>(this->_internal_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.InputDeviceInfo.api_version");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_api_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.InputDeviceInfo)
  return target;
}

size_t InputDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.InputDeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 10;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string api_version = 20;
  if (!this->_internal_api_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputDeviceInfo::GetClassData() const { return &_class_data_; }

void InputDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputDeviceInfo *>(to)->MergeFrom(
      static_cast<const InputDeviceInfo &>(from));
}


void InputDeviceInfo::MergeFrom(const InputDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.InputDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_api_version().empty()) {
    _internal_set_api_version(from._internal_api_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputDeviceInfo::CopyFrom(const InputDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.InputDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDeviceInfo::IsInitialized() const {
  return true;
}

void InputDeviceInfo::InternalSwap(InputDeviceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, GetArenaForAllocation(),
      &other->session_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_version_, GetArenaForAllocation(),
      &other->api_version_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InputDeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[2]);
}

// ===================================================================

class InitializeSession::_Internal {
 public:
  static const ::indiemotionpb::payloads::InputDeviceInfo& device_info(const InitializeSession* msg);
};

const ::indiemotionpb::payloads::InputDeviceInfo&
InitializeSession::_Internal::device_info(const InitializeSession* msg) {
  return *msg->device_info_;
}
InitializeSession::InitializeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.InitializeSession)
}
InitializeSession::InitializeSession(const InitializeSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_info()) {
    device_info_ = new ::indiemotionpb::payloads::InputDeviceInfo(*from.device_info_);
  } else {
    device_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.InitializeSession)
}

inline void InitializeSession::SharedCtor() {
device_info_ = nullptr;
}

InitializeSession::~InitializeSession() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.InitializeSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_info_;
}

void InitializeSession::ArenaDtor(void* object) {
  InitializeSession* _this = reinterpret_cast< InitializeSession* >(object);
  (void)_this;
}
void InitializeSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeSession::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.InitializeSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotionpb.payloads.InputDeviceInfo device_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitializeSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.InitializeSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotionpb.payloads.InputDeviceInfo device_info = 10;
  if (this->_internal_has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::device_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.InitializeSession)
  return target;
}

size_t InitializeSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.InitializeSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotionpb.payloads.InputDeviceInfo device_info = 10;
  if (this->_internal_has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeSession::GetClassData() const { return &_class_data_; }

void InitializeSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InitializeSession *>(to)->MergeFrom(
      static_cast<const InitializeSession &>(from));
}


void InitializeSession::MergeFrom(const InitializeSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.InitializeSession)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_info()) {
    _internal_mutable_device_info()->::indiemotionpb::payloads::InputDeviceInfo::MergeFrom(from._internal_device_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeSession::CopyFrom(const InitializeSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.InitializeSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeSession::IsInitialized() const {
  return true;
}

void InitializeSession::InternalSwap(InitializeSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_info_, other->device_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[3]);
}

// ===================================================================

class ShutdownSession::_Internal {
 public:
};

ShutdownSession::ShutdownSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.ShutdownSession)
}
ShutdownSession::ShutdownSession(const ShutdownSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.ShutdownSession)
}

inline void ShutdownSession::SharedCtor() {
}

ShutdownSession::~ShutdownSession() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.ShutdownSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShutdownSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShutdownSession::ArenaDtor(void* object) {
  ShutdownSession* _this = reinterpret_cast< ShutdownSession* >(object);
  (void)_this;
}
void ShutdownSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShutdownSession::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.ShutdownSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.ShutdownSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.ShutdownSession)
  return target;
}

size_t ShutdownSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.ShutdownSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShutdownSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownSession::GetClassData() const { return &_class_data_; }

void ShutdownSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShutdownSession *>(to)->MergeFrom(
      static_cast<const ShutdownSession &>(from));
}


void ShutdownSession::MergeFrom(const ShutdownSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.ShutdownSession)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownSession::CopyFrom(const ShutdownSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.ShutdownSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownSession::IsInitialized() const {
  return true;
}

void ShutdownSession::InternalSwap(ShutdownSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[4]);
}

// ===================================================================

class Camera::_Internal {
 public:
};

Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.Camera)
}

inline void Camera::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.Camera)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.Camera.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 10;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.Camera.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 10;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Camera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Camera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Camera::GetClassData() const { return &_class_data_; }

void Camera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Camera *>(to)->MergeFrom(
      static_cast<const Camera &>(from));
}


void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[5]);
}

// ===================================================================

class CameraList::_Internal {
 public:
};

CameraList::CameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cameras_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.CameraList)
}
CameraList::CameraList(const CameraList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cameras_(from.cameras_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.CameraList)
}

inline void CameraList::SharedCtor() {
}

CameraList::~CameraList() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.CameraList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraList::ArenaDtor(void* object) {
  CameraList* _this = reinterpret_cast< CameraList* >(object);
  (void)_this;
}
void CameraList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.CameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameras_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .indiemotionpb.payloads.Camera cameras = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cameras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.CameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .indiemotionpb.payloads.Camera cameras = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cameras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cameras(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.CameraList)
  return target;
}

size_t CameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.CameraList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .indiemotionpb.payloads.Camera cameras = 1;
  total_size += 1UL * this->_internal_cameras_size();
  for (const auto& msg : this->cameras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraList::GetClassData() const { return &_class_data_; }

void CameraList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CameraList *>(to)->MergeFrom(
      static_cast<const CameraList &>(from));
}


void CameraList::MergeFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.CameraList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cameras_.MergeFrom(from.cameras_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraList::CopyFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.CameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraList::IsInitialized() const {
  return true;
}

void CameraList::InternalSwap(CameraList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cameras_.InternalSwap(&other->cameras_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[6]);
}

// ===================================================================

class GetCameraList::_Internal {
 public:
};

GetCameraList::GetCameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.GetCameraList)
}
GetCameraList::GetCameraList(const GetCameraList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.GetCameraList)
}

inline void GetCameraList::SharedCtor() {
}

GetCameraList::~GetCameraList() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.GetCameraList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCameraList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCameraList::ArenaDtor(void* object) {
  GetCameraList* _this = reinterpret_cast< GetCameraList* >(object);
  (void)_this;
}
void GetCameraList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCameraList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.GetCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCameraList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCameraList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.GetCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.GetCameraList)
  return target;
}

size_t GetCameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.GetCameraList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCameraList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCameraList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCameraList::GetClassData() const { return &_class_data_; }

void GetCameraList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetCameraList *>(to)->MergeFrom(
      static_cast<const GetCameraList &>(from));
}


void GetCameraList::MergeFrom(const GetCameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.GetCameraList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCameraList::CopyFrom(const GetCameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.GetCameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCameraList::IsInitialized() const {
  return true;
}

void GetCameraList::InternalSwap(GetCameraList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCameraList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[7]);
}

// ===================================================================

class SessionProperty::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionProperty>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SessionProperty::SessionProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.SessionProperty)
}
SessionProperty::SessionProperty(const SessionProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.SessionProperty)
}

inline void SessionProperty::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

SessionProperty::~SessionProperty() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.SessionProperty)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionProperty::ArenaDtor(void* object) {
  SessionProperty* _this = reinterpret_cast< SessionProperty* >(object);
  (void)_this;
}
void SessionProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.SessionProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotionpb.payloads.SessionPropertyType type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::indiemotionpb::payloads::SessionPropertyType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.SessionProperty.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.SessionProperty.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.SessionProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotionpb.payloads.SessionPropertyType type = 10;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // string name = 11;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.SessionProperty.name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_name(), target);
  }

  // optional string value = 12;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.SessionProperty.value");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.SessionProperty)
  return target;
}

size_t SessionProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.SessionProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 11;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional string value = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .indiemotionpb.payloads.SessionPropertyType type = 10;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionProperty::GetClassData() const { return &_class_data_; }

void SessionProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SessionProperty *>(to)->MergeFrom(
      static_cast<const SessionProperty &>(from));
}


void SessionProperty::MergeFrom(const SessionProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.SessionProperty)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionProperty::CopyFrom(const SessionProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.SessionProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionProperty::IsInitialized() const {
  return true;
}

void SessionProperty::InternalSwap(SessionProperty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionProperty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[8]);
}

// ===================================================================

class GetSessionPropertyByName::_Internal {
 public:
};

GetSessionPropertyByName::GetSessionPropertyByName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.GetSessionPropertyByName)
}
GetSessionPropertyByName::GetSessionPropertyByName(const GetSessionPropertyByName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.GetSessionPropertyByName)
}

inline void GetSessionPropertyByName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSessionPropertyByName::~GetSessionPropertyByName() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.GetSessionPropertyByName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSessionPropertyByName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSessionPropertyByName::ArenaDtor(void* object) {
  GetSessionPropertyByName* _this = reinterpret_cast< GetSessionPropertyByName* >(object);
  (void)_this;
}
void GetSessionPropertyByName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSessionPropertyByName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSessionPropertyByName::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.GetSessionPropertyByName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionPropertyByName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "indiemotionpb.payloads.GetSessionPropertyByName.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSessionPropertyByName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.GetSessionPropertyByName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 10;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "indiemotionpb.payloads.GetSessionPropertyByName.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.GetSessionPropertyByName)
  return target;
}

size_t GetSessionPropertyByName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.GetSessionPropertyByName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 10;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionPropertyByName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSessionPropertyByName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionPropertyByName::GetClassData() const { return &_class_data_; }

void GetSessionPropertyByName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetSessionPropertyByName *>(to)->MergeFrom(
      static_cast<const GetSessionPropertyByName &>(from));
}


void GetSessionPropertyByName::MergeFrom(const GetSessionPropertyByName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.GetSessionPropertyByName)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionPropertyByName::CopyFrom(const GetSessionPropertyByName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.GetSessionPropertyByName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionPropertyByName::IsInitialized() const {
  return true;
}

void GetSessionPropertyByName::InternalSwap(GetSessionPropertyByName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionPropertyByName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[9]);
}

// ===================================================================

class InputDeviceXForm_XFormData::_Internal {
 public:
};

InputDeviceXForm_XFormData::InputDeviceXForm_XFormData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.InputDeviceXForm.XFormData)
}
InputDeviceXForm_XFormData::InputDeviceXForm_XFormData(const InputDeviceXForm_XFormData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.InputDeviceXForm.XFormData)
}

inline void InputDeviceXForm_XFormData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

InputDeviceXForm_XFormData::~InputDeviceXForm_XFormData() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputDeviceXForm_XFormData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputDeviceXForm_XFormData::ArenaDtor(void* object) {
  InputDeviceXForm_XFormData* _this = reinterpret_cast< InputDeviceXForm_XFormData* >(object);
  (void)_this;
}
void InputDeviceXForm_XFormData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputDeviceXForm_XFormData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputDeviceXForm_XFormData::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputDeviceXForm_XFormData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputDeviceXForm_XFormData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  return target;
}

size_t InputDeviceXForm_XFormData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputDeviceXForm_XFormData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputDeviceXForm_XFormData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputDeviceXForm_XFormData::GetClassData() const { return &_class_data_; }

void InputDeviceXForm_XFormData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputDeviceXForm_XFormData *>(to)->MergeFrom(
      static_cast<const InputDeviceXForm_XFormData &>(from));
}


void InputDeviceXForm_XFormData::MergeFrom(const InputDeviceXForm_XFormData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputDeviceXForm_XFormData::CopyFrom(const InputDeviceXForm_XFormData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.InputDeviceXForm.XFormData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDeviceXForm_XFormData::IsInitialized() const {
  return true;
}

void InputDeviceXForm_XFormData::InternalSwap(InputDeviceXForm_XFormData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputDeviceXForm_XFormData, z_)
      + sizeof(InputDeviceXForm_XFormData::z_)
      - PROTOBUF_FIELD_OFFSET(InputDeviceXForm_XFormData, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputDeviceXForm_XFormData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[10]);
}

// ===================================================================

class InputDeviceXForm::_Internal {
 public:
  static const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& translation(const InputDeviceXForm* msg);
  static const ::indiemotionpb::payloads::InputDeviceXForm_XFormData& orientation(const InputDeviceXForm* msg);
};

const ::indiemotionpb::payloads::InputDeviceXForm_XFormData&
InputDeviceXForm::_Internal::translation(const InputDeviceXForm* msg) {
  return *msg->translation_;
}
const ::indiemotionpb::payloads::InputDeviceXForm_XFormData&
InputDeviceXForm::_Internal::orientation(const InputDeviceXForm* msg) {
  return *msg->orientation_;
}
InputDeviceXForm::InputDeviceXForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:indiemotionpb.payloads.InputDeviceXForm)
}
InputDeviceXForm::InputDeviceXForm(const InputDeviceXForm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::indiemotionpb::payloads::InputDeviceXForm_XFormData(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::indiemotionpb::payloads::InputDeviceXForm_XFormData(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:indiemotionpb.payloads.InputDeviceXForm)
}

inline void InputDeviceXForm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(orientation_));
}

InputDeviceXForm::~InputDeviceXForm() {
  // @@protoc_insertion_point(destructor:indiemotionpb.payloads.InputDeviceXForm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputDeviceXForm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete orientation_;
}

void InputDeviceXForm::ArenaDtor(void* object) {
  InputDeviceXForm* _this = reinterpret_cast< InputDeviceXForm* >(object);
  (void)_this;
}
void InputDeviceXForm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputDeviceXForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputDeviceXForm::Clear() {
// @@protoc_insertion_point(message_clear_start:indiemotionpb.payloads.InputDeviceXForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputDeviceXForm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .indiemotionpb.payloads.InputDeviceXForm.XFormData translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .indiemotionpb.payloads.InputDeviceXForm.XFormData orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputDeviceXForm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:indiemotionpb.payloads.InputDeviceXForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .indiemotionpb.payloads.InputDeviceXForm.XFormData translation = 1;
  if (this->_internal_has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translation(this), target, stream);
  }

  // .indiemotionpb.payloads.InputDeviceXForm.XFormData orientation = 2;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:indiemotionpb.payloads.InputDeviceXForm)
  return target;
}

size_t InputDeviceXForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:indiemotionpb.payloads.InputDeviceXForm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .indiemotionpb.payloads.InputDeviceXForm.XFormData translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .indiemotionpb.payloads.InputDeviceXForm.XFormData orientation = 2;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputDeviceXForm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputDeviceXForm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputDeviceXForm::GetClassData() const { return &_class_data_; }

void InputDeviceXForm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputDeviceXForm *>(to)->MergeFrom(
      static_cast<const InputDeviceXForm &>(from));
}


void InputDeviceXForm::MergeFrom(const InputDeviceXForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:indiemotionpb.payloads.InputDeviceXForm)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _internal_mutable_translation()->::indiemotionpb::payloads::InputDeviceXForm_XFormData::MergeFrom(from._internal_translation());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::indiemotionpb::payloads::InputDeviceXForm_XFormData::MergeFrom(from._internal_orientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputDeviceXForm::CopyFrom(const InputDeviceXForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:indiemotionpb.payloads.InputDeviceXForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDeviceXForm::IsInitialized() const {
  return true;
}

void InputDeviceXForm::InternalSwap(InputDeviceXForm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputDeviceXForm, orientation_)
      + sizeof(InputDeviceXForm::orientation_)
      - PROTOBUF_FIELD_OFFSET(InputDeviceXForm, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputDeviceXForm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payloads_2eproto_getter, &descriptor_table_payloads_2eproto_once,
      file_level_metadata_payloads_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace payloads
}  // namespace indiemotionpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::Acknowledge* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::Acknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::Acknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::Error* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::InputDeviceInfo* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::InputDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::InputDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::InitializeSession* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::InitializeSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::InitializeSession >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::ShutdownSession* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::ShutdownSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::ShutdownSession >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::Camera* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::CameraList* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::CameraList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::CameraList >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::GetCameraList* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::GetCameraList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::GetCameraList >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::SessionProperty* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::SessionProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::SessionProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::GetSessionPropertyByName* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::GetSessionPropertyByName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::GetSessionPropertyByName >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::InputDeviceXForm_XFormData* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::InputDeviceXForm_XFormData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::InputDeviceXForm_XFormData >(arena);
}
template<> PROTOBUF_NOINLINE ::indiemotionpb::payloads::InputDeviceXForm* Arena::CreateMaybeMessage< ::indiemotionpb::payloads::InputDeviceXForm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::indiemotionpb::payloads::InputDeviceXForm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
