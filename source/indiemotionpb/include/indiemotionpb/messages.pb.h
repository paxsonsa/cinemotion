// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "payloads.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace indiemotionpb {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace indiemotionpb
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotionpb::Header* Arena::CreateMaybeMessage<::indiemotionpb::Header>(Arena*);
template<> ::indiemotionpb::Message* Arena::CreateMaybeMessage<::indiemotionpb::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotionpb {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return new Header();
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 20,
    kResponseIdFieldNumber = 40,
  };
  // string id = 20;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string responseId = 40;
  bool has_responseid() const;
  private:
  bool _internal_has_responseid() const;
  public:
  void clear_responseid();
  const std::string& responseid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responseid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responseid();
  PROTOBUF_MUST_USE_RESULT std::string* release_responseid();
  void set_allocated_responseid(std::string* responseid);
  private:
  const std::string& _internal_responseid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responseid(const std::string& value);
  std::string* _internal_mutable_responseid();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responseid_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAcknowledge = 20,
    kError = 25,
    kInitializeSession = 31,
    kShutdownSession = 32,
    kCameraList = 40,
    kGetCameraList = 41,
    kSessionProperty = 50,
    kGetSessionPropertyByName = 51,
    kClearSessionPropertyByName = 52,
    kInputDeviceInfo = 60,
    kInputDeviceXform = 61,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAcknowledgeFieldNumber = 20,
    kErrorFieldNumber = 25,
    kInitializeSessionFieldNumber = 31,
    kShutdownSessionFieldNumber = 32,
    kCameraListFieldNumber = 40,
    kGetCameraListFieldNumber = 41,
    kSessionPropertyFieldNumber = 50,
    kGetSessionPropertyByNameFieldNumber = 51,
    kClearSessionPropertyByNameFieldNumber = 52,
    kInputDeviceInfoFieldNumber = 60,
    kInputDeviceXformFieldNumber = 61,
  };
  // .indiemotionpb.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::indiemotionpb::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::Header* release_header();
  ::indiemotionpb::Header* mutable_header();
  void set_allocated_header(::indiemotionpb::Header* header);
  private:
  const ::indiemotionpb::Header& _internal_header() const;
  ::indiemotionpb::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::indiemotionpb::Header* header);
  ::indiemotionpb::Header* unsafe_arena_release_header();

  // .indiemotionpb.payloads.Acknowledge acknowledge = 20;
  bool has_acknowledge() const;
  private:
  bool _internal_has_acknowledge() const;
  public:
  void clear_acknowledge();
  const ::indiemotionpb::payloads::Acknowledge& acknowledge() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::Acknowledge* release_acknowledge();
  ::indiemotionpb::payloads::Acknowledge* mutable_acknowledge();
  void set_allocated_acknowledge(::indiemotionpb::payloads::Acknowledge* acknowledge);
  private:
  const ::indiemotionpb::payloads::Acknowledge& _internal_acknowledge() const;
  ::indiemotionpb::payloads::Acknowledge* _internal_mutable_acknowledge();
  public:
  void unsafe_arena_set_allocated_acknowledge(
      ::indiemotionpb::payloads::Acknowledge* acknowledge);
  ::indiemotionpb::payloads::Acknowledge* unsafe_arena_release_acknowledge();

  // .indiemotionpb.payloads.Error error = 25;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::indiemotionpb::payloads::Error& error() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::Error* release_error();
  ::indiemotionpb::payloads::Error* mutable_error();
  void set_allocated_error(::indiemotionpb::payloads::Error* error);
  private:
  const ::indiemotionpb::payloads::Error& _internal_error() const;
  ::indiemotionpb::payloads::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::indiemotionpb::payloads::Error* error);
  ::indiemotionpb::payloads::Error* unsafe_arena_release_error();

  // .indiemotionpb.payloads.InitializeSession initialize_session = 31;
  bool has_initialize_session() const;
  private:
  bool _internal_has_initialize_session() const;
  public:
  void clear_initialize_session();
  const ::indiemotionpb::payloads::InitializeSession& initialize_session() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InitializeSession* release_initialize_session();
  ::indiemotionpb::payloads::InitializeSession* mutable_initialize_session();
  void set_allocated_initialize_session(::indiemotionpb::payloads::InitializeSession* initialize_session);
  private:
  const ::indiemotionpb::payloads::InitializeSession& _internal_initialize_session() const;
  ::indiemotionpb::payloads::InitializeSession* _internal_mutable_initialize_session();
  public:
  void unsafe_arena_set_allocated_initialize_session(
      ::indiemotionpb::payloads::InitializeSession* initialize_session);
  ::indiemotionpb::payloads::InitializeSession* unsafe_arena_release_initialize_session();

  // .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
  bool has_shutdown_session() const;
  private:
  bool _internal_has_shutdown_session() const;
  public:
  void clear_shutdown_session();
  const ::indiemotionpb::payloads::ShutdownSession& shutdown_session() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::ShutdownSession* release_shutdown_session();
  ::indiemotionpb::payloads::ShutdownSession* mutable_shutdown_session();
  void set_allocated_shutdown_session(::indiemotionpb::payloads::ShutdownSession* shutdown_session);
  private:
  const ::indiemotionpb::payloads::ShutdownSession& _internal_shutdown_session() const;
  ::indiemotionpb::payloads::ShutdownSession* _internal_mutable_shutdown_session();
  public:
  void unsafe_arena_set_allocated_shutdown_session(
      ::indiemotionpb::payloads::ShutdownSession* shutdown_session);
  ::indiemotionpb::payloads::ShutdownSession* unsafe_arena_release_shutdown_session();

  // .indiemotionpb.payloads.CameraList camera_list = 40;
  bool has_camera_list() const;
  private:
  bool _internal_has_camera_list() const;
  public:
  void clear_camera_list();
  const ::indiemotionpb::payloads::CameraList& camera_list() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::CameraList* release_camera_list();
  ::indiemotionpb::payloads::CameraList* mutable_camera_list();
  void set_allocated_camera_list(::indiemotionpb::payloads::CameraList* camera_list);
  private:
  const ::indiemotionpb::payloads::CameraList& _internal_camera_list() const;
  ::indiemotionpb::payloads::CameraList* _internal_mutable_camera_list();
  public:
  void unsafe_arena_set_allocated_camera_list(
      ::indiemotionpb::payloads::CameraList* camera_list);
  ::indiemotionpb::payloads::CameraList* unsafe_arena_release_camera_list();

  // .indiemotionpb.payloads.GetCameraList get_camera_list = 41;
  bool has_get_camera_list() const;
  private:
  bool _internal_has_get_camera_list() const;
  public:
  void clear_get_camera_list();
  const ::indiemotionpb::payloads::GetCameraList& get_camera_list() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::GetCameraList* release_get_camera_list();
  ::indiemotionpb::payloads::GetCameraList* mutable_get_camera_list();
  void set_allocated_get_camera_list(::indiemotionpb::payloads::GetCameraList* get_camera_list);
  private:
  const ::indiemotionpb::payloads::GetCameraList& _internal_get_camera_list() const;
  ::indiemotionpb::payloads::GetCameraList* _internal_mutable_get_camera_list();
  public:
  void unsafe_arena_set_allocated_get_camera_list(
      ::indiemotionpb::payloads::GetCameraList* get_camera_list);
  ::indiemotionpb::payloads::GetCameraList* unsafe_arena_release_get_camera_list();

  // .indiemotionpb.payloads.SessionProperty session_property = 50;
  bool has_session_property() const;
  private:
  bool _internal_has_session_property() const;
  public:
  void clear_session_property();
  const ::indiemotionpb::payloads::SessionProperty& session_property() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::SessionProperty* release_session_property();
  ::indiemotionpb::payloads::SessionProperty* mutable_session_property();
  void set_allocated_session_property(::indiemotionpb::payloads::SessionProperty* session_property);
  private:
  const ::indiemotionpb::payloads::SessionProperty& _internal_session_property() const;
  ::indiemotionpb::payloads::SessionProperty* _internal_mutable_session_property();
  public:
  void unsafe_arena_set_allocated_session_property(
      ::indiemotionpb::payloads::SessionProperty* session_property);
  ::indiemotionpb::payloads::SessionProperty* unsafe_arena_release_session_property();

  // .indiemotionpb.payloads.GetSessionPropertyByName get_session_property_by_name = 51;
  bool has_get_session_property_by_name() const;
  private:
  bool _internal_has_get_session_property_by_name() const;
  public:
  void clear_get_session_property_by_name();
  const ::indiemotionpb::payloads::GetSessionPropertyByName& get_session_property_by_name() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::GetSessionPropertyByName* release_get_session_property_by_name();
  ::indiemotionpb::payloads::GetSessionPropertyByName* mutable_get_session_property_by_name();
  void set_allocated_get_session_property_by_name(::indiemotionpb::payloads::GetSessionPropertyByName* get_session_property_by_name);
  private:
  const ::indiemotionpb::payloads::GetSessionPropertyByName& _internal_get_session_property_by_name() const;
  ::indiemotionpb::payloads::GetSessionPropertyByName* _internal_mutable_get_session_property_by_name();
  public:
  void unsafe_arena_set_allocated_get_session_property_by_name(
      ::indiemotionpb::payloads::GetSessionPropertyByName* get_session_property_by_name);
  ::indiemotionpb::payloads::GetSessionPropertyByName* unsafe_arena_release_get_session_property_by_name();

  // .indiemotionpb.payloads.ClearSessionPropertyByName clear_session_property_by_name = 52;
  bool has_clear_session_property_by_name() const;
  private:
  bool _internal_has_clear_session_property_by_name() const;
  public:
  void clear_clear_session_property_by_name();
  const ::indiemotionpb::payloads::ClearSessionPropertyByName& clear_session_property_by_name() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::ClearSessionPropertyByName* release_clear_session_property_by_name();
  ::indiemotionpb::payloads::ClearSessionPropertyByName* mutable_clear_session_property_by_name();
  void set_allocated_clear_session_property_by_name(::indiemotionpb::payloads::ClearSessionPropertyByName* clear_session_property_by_name);
  private:
  const ::indiemotionpb::payloads::ClearSessionPropertyByName& _internal_clear_session_property_by_name() const;
  ::indiemotionpb::payloads::ClearSessionPropertyByName* _internal_mutable_clear_session_property_by_name();
  public:
  void unsafe_arena_set_allocated_clear_session_property_by_name(
      ::indiemotionpb::payloads::ClearSessionPropertyByName* clear_session_property_by_name);
  ::indiemotionpb::payloads::ClearSessionPropertyByName* unsafe_arena_release_clear_session_property_by_name();

  // .indiemotionpb.payloads.InputDeviceInfo input_device_info = 60;
  bool has_input_device_info() const;
  private:
  bool _internal_has_input_device_info() const;
  public:
  void clear_input_device_info();
  const ::indiemotionpb::payloads::InputDeviceInfo& input_device_info() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InputDeviceInfo* release_input_device_info();
  ::indiemotionpb::payloads::InputDeviceInfo* mutable_input_device_info();
  void set_allocated_input_device_info(::indiemotionpb::payloads::InputDeviceInfo* input_device_info);
  private:
  const ::indiemotionpb::payloads::InputDeviceInfo& _internal_input_device_info() const;
  ::indiemotionpb::payloads::InputDeviceInfo* _internal_mutable_input_device_info();
  public:
  void unsafe_arena_set_allocated_input_device_info(
      ::indiemotionpb::payloads::InputDeviceInfo* input_device_info);
  ::indiemotionpb::payloads::InputDeviceInfo* unsafe_arena_release_input_device_info();

  // .indiemotionpb.payloads.InputDeviceXForm input_device_xform = 61;
  bool has_input_device_xform() const;
  private:
  bool _internal_has_input_device_xform() const;
  public:
  void clear_input_device_xform();
  const ::indiemotionpb::payloads::InputDeviceXForm& input_device_xform() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InputDeviceXForm* release_input_device_xform();
  ::indiemotionpb::payloads::InputDeviceXForm* mutable_input_device_xform();
  void set_allocated_input_device_xform(::indiemotionpb::payloads::InputDeviceXForm* input_device_xform);
  private:
  const ::indiemotionpb::payloads::InputDeviceXForm& _internal_input_device_xform() const;
  ::indiemotionpb::payloads::InputDeviceXForm* _internal_mutable_input_device_xform();
  public:
  void unsafe_arena_set_allocated_input_device_xform(
      ::indiemotionpb::payloads::InputDeviceXForm* input_device_xform);
  ::indiemotionpb::payloads::InputDeviceXForm* unsafe_arena_release_input_device_xform();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:indiemotionpb.Message)
 private:
  class _Internal;
  void set_has_acknowledge();
  void set_has_error();
  void set_has_initialize_session();
  void set_has_shutdown_session();
  void set_has_camera_list();
  void set_has_get_camera_list();
  void set_has_session_property();
  void set_has_get_session_property_by_name();
  void set_has_clear_session_property_by_name();
  void set_has_input_device_info();
  void set_has_input_device_xform();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::Header* header_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::indiemotionpb::payloads::Acknowledge* acknowledge_;
    ::indiemotionpb::payloads::Error* error_;
    ::indiemotionpb::payloads::InitializeSession* initialize_session_;
    ::indiemotionpb::payloads::ShutdownSession* shutdown_session_;
    ::indiemotionpb::payloads::CameraList* camera_list_;
    ::indiemotionpb::payloads::GetCameraList* get_camera_list_;
    ::indiemotionpb::payloads::SessionProperty* session_property_;
    ::indiemotionpb::payloads::GetSessionPropertyByName* get_session_property_by_name_;
    ::indiemotionpb::payloads::ClearSessionPropertyByName* clear_session_property_by_name_;
    ::indiemotionpb::payloads::InputDeviceInfo* input_device_info_;
    ::indiemotionpb::payloads::InputDeviceXForm* input_device_xform_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string id = 20;
inline void Header::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Header::id() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Header.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.Header.id)
}
inline std::string* Header::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Header.id)
  return _s;
}
inline const std::string& Header::_internal_id() const {
  return id_.Get();
}
inline void Header::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_id() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Header.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Header.id)
}

// optional string responseId = 40;
inline bool Header::_internal_has_responseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_responseid() const {
  return _internal_has_responseid();
}
inline void Header::clear_responseid() {
  responseid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::responseid() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Header.responseId)
  return _internal_responseid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_responseid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.Header.responseId)
}
inline std::string* Header::mutable_responseid() {
  std::string* _s = _internal_mutable_responseid();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Header.responseId)
  return _s;
}
inline const std::string& Header::_internal_responseid() const {
  return responseid_.Get();
}
inline void Header::_internal_set_responseid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_responseid() {
  _has_bits_[0] |= 0x00000001u;
  return responseid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_responseid() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Header.responseId)
  if (!_internal_has_responseid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return responseid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_responseid(std::string* responseid) {
  if (responseid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  responseid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responseid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Header.responseId)
}

// -------------------------------------------------------------------

// Message

// .indiemotionpb.Header header = 1;
inline bool Message::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message::has_header() const {
  return _internal_has_header();
}
inline void Message::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::indiemotionpb::Header& Message::_internal_header() const {
  const ::indiemotionpb::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::Header&>(
      ::indiemotionpb::_Header_default_instance_);
}
inline const ::indiemotionpb::Header& Message::header() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.header)
  return _internal_header();
}
inline void Message::unsafe_arena_set_allocated_header(
    ::indiemotionpb::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.header)
}
inline ::indiemotionpb::Header* Message::release_header() {
  
  ::indiemotionpb::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::Header* Message::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.header)
  
  ::indiemotionpb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::indiemotionpb::Header* Message::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::indiemotionpb::Header* Message::mutable_header() {
  ::indiemotionpb::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.header)
  return _msg;
}
inline void Message::set_allocated_header(::indiemotionpb::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.header)
}

// .indiemotionpb.payloads.Acknowledge acknowledge = 20;
inline bool Message::_internal_has_acknowledge() const {
  return payload_case() == kAcknowledge;
}
inline bool Message::has_acknowledge() const {
  return _internal_has_acknowledge();
}
inline void Message::set_has_acknowledge() {
  _oneof_case_[0] = kAcknowledge;
}
inline ::indiemotionpb::payloads::Acknowledge* Message::release_acknowledge() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
      ::indiemotionpb::payloads::Acknowledge* temp = payload_.acknowledge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::Acknowledge& Message::_internal_acknowledge() const {
  return _internal_has_acknowledge()
      ? *payload_.acknowledge_
      : reinterpret_cast< ::indiemotionpb::payloads::Acknowledge&>(::indiemotionpb::payloads::_Acknowledge_default_instance_);
}
inline const ::indiemotionpb::payloads::Acknowledge& Message::acknowledge() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.acknowledge)
  return _internal_acknowledge();
}
inline ::indiemotionpb::payloads::Acknowledge* Message::unsafe_arena_release_acknowledge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.acknowledge)
  if (_internal_has_acknowledge()) {
    clear_has_payload();
    ::indiemotionpb::payloads::Acknowledge* temp = payload_.acknowledge_;
    payload_.acknowledge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_acknowledge(::indiemotionpb::payloads::Acknowledge* acknowledge) {
  clear_payload();
  if (acknowledge) {
    set_has_acknowledge();
    payload_.acknowledge_ = acknowledge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.acknowledge)
}
inline ::indiemotionpb::payloads::Acknowledge* Message::_internal_mutable_acknowledge() {
  if (!_internal_has_acknowledge()) {
    clear_payload();
    set_has_acknowledge();
    payload_.acknowledge_ = CreateMaybeMessage< ::indiemotionpb::payloads::Acknowledge >(GetArenaForAllocation());
  }
  return payload_.acknowledge_;
}
inline ::indiemotionpb::payloads::Acknowledge* Message::mutable_acknowledge() {
  ::indiemotionpb::payloads::Acknowledge* _msg = _internal_mutable_acknowledge();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.acknowledge)
  return _msg;
}

// .indiemotionpb.payloads.Error error = 25;
inline bool Message::_internal_has_error() const {
  return payload_case() == kError;
}
inline bool Message::has_error() const {
  return _internal_has_error();
}
inline void Message::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::indiemotionpb::payloads::Error* Message::release_error() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.error)
  if (_internal_has_error()) {
    clear_has_payload();
      ::indiemotionpb::payloads::Error* temp = payload_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::Error& Message::_internal_error() const {
  return _internal_has_error()
      ? *payload_.error_
      : reinterpret_cast< ::indiemotionpb::payloads::Error&>(::indiemotionpb::payloads::_Error_default_instance_);
}
inline const ::indiemotionpb::payloads::Error& Message::error() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.error)
  return _internal_error();
}
inline ::indiemotionpb::payloads::Error* Message::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.error)
  if (_internal_has_error()) {
    clear_has_payload();
    ::indiemotionpb::payloads::Error* temp = payload_.error_;
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_error(::indiemotionpb::payloads::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.error)
}
inline ::indiemotionpb::payloads::Error* Message::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = CreateMaybeMessage< ::indiemotionpb::payloads::Error >(GetArenaForAllocation());
  }
  return payload_.error_;
}
inline ::indiemotionpb::payloads::Error* Message::mutable_error() {
  ::indiemotionpb::payloads::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.error)
  return _msg;
}

// .indiemotionpb.payloads.InitializeSession initialize_session = 31;
inline bool Message::_internal_has_initialize_session() const {
  return payload_case() == kInitializeSession;
}
inline bool Message::has_initialize_session() const {
  return _internal_has_initialize_session();
}
inline void Message::set_has_initialize_session() {
  _oneof_case_[0] = kInitializeSession;
}
inline ::indiemotionpb::payloads::InitializeSession* Message::release_initialize_session() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.initialize_session)
  if (_internal_has_initialize_session()) {
    clear_has_payload();
      ::indiemotionpb::payloads::InitializeSession* temp = payload_.initialize_session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.initialize_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::InitializeSession& Message::_internal_initialize_session() const {
  return _internal_has_initialize_session()
      ? *payload_.initialize_session_
      : reinterpret_cast< ::indiemotionpb::payloads::InitializeSession&>(::indiemotionpb::payloads::_InitializeSession_default_instance_);
}
inline const ::indiemotionpb::payloads::InitializeSession& Message::initialize_session() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.initialize_session)
  return _internal_initialize_session();
}
inline ::indiemotionpb::payloads::InitializeSession* Message::unsafe_arena_release_initialize_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.initialize_session)
  if (_internal_has_initialize_session()) {
    clear_has_payload();
    ::indiemotionpb::payloads::InitializeSession* temp = payload_.initialize_session_;
    payload_.initialize_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_initialize_session(::indiemotionpb::payloads::InitializeSession* initialize_session) {
  clear_payload();
  if (initialize_session) {
    set_has_initialize_session();
    payload_.initialize_session_ = initialize_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.initialize_session)
}
inline ::indiemotionpb::payloads::InitializeSession* Message::_internal_mutable_initialize_session() {
  if (!_internal_has_initialize_session()) {
    clear_payload();
    set_has_initialize_session();
    payload_.initialize_session_ = CreateMaybeMessage< ::indiemotionpb::payloads::InitializeSession >(GetArenaForAllocation());
  }
  return payload_.initialize_session_;
}
inline ::indiemotionpb::payloads::InitializeSession* Message::mutable_initialize_session() {
  ::indiemotionpb::payloads::InitializeSession* _msg = _internal_mutable_initialize_session();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.initialize_session)
  return _msg;
}

// .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
inline bool Message::_internal_has_shutdown_session() const {
  return payload_case() == kShutdownSession;
}
inline bool Message::has_shutdown_session() const {
  return _internal_has_shutdown_session();
}
inline void Message::set_has_shutdown_session() {
  _oneof_case_[0] = kShutdownSession;
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::release_shutdown_session() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.shutdown_session)
  if (_internal_has_shutdown_session()) {
    clear_has_payload();
      ::indiemotionpb::payloads::ShutdownSession* temp = payload_.shutdown_session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.shutdown_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::ShutdownSession& Message::_internal_shutdown_session() const {
  return _internal_has_shutdown_session()
      ? *payload_.shutdown_session_
      : reinterpret_cast< ::indiemotionpb::payloads::ShutdownSession&>(::indiemotionpb::payloads::_ShutdownSession_default_instance_);
}
inline const ::indiemotionpb::payloads::ShutdownSession& Message::shutdown_session() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.shutdown_session)
  return _internal_shutdown_session();
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::unsafe_arena_release_shutdown_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.shutdown_session)
  if (_internal_has_shutdown_session()) {
    clear_has_payload();
    ::indiemotionpb::payloads::ShutdownSession* temp = payload_.shutdown_session_;
    payload_.shutdown_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_shutdown_session(::indiemotionpb::payloads::ShutdownSession* shutdown_session) {
  clear_payload();
  if (shutdown_session) {
    set_has_shutdown_session();
    payload_.shutdown_session_ = shutdown_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.shutdown_session)
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::_internal_mutable_shutdown_session() {
  if (!_internal_has_shutdown_session()) {
    clear_payload();
    set_has_shutdown_session();
    payload_.shutdown_session_ = CreateMaybeMessage< ::indiemotionpb::payloads::ShutdownSession >(GetArenaForAllocation());
  }
  return payload_.shutdown_session_;
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::mutable_shutdown_session() {
  ::indiemotionpb::payloads::ShutdownSession* _msg = _internal_mutable_shutdown_session();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.shutdown_session)
  return _msg;
}

// .indiemotionpb.payloads.CameraList camera_list = 40;
inline bool Message::_internal_has_camera_list() const {
  return payload_case() == kCameraList;
}
inline bool Message::has_camera_list() const {
  return _internal_has_camera_list();
}
inline void Message::set_has_camera_list() {
  _oneof_case_[0] = kCameraList;
}
inline ::indiemotionpb::payloads::CameraList* Message::release_camera_list() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.camera_list)
  if (_internal_has_camera_list()) {
    clear_has_payload();
      ::indiemotionpb::payloads::CameraList* temp = payload_.camera_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::CameraList& Message::_internal_camera_list() const {
  return _internal_has_camera_list()
      ? *payload_.camera_list_
      : reinterpret_cast< ::indiemotionpb::payloads::CameraList&>(::indiemotionpb::payloads::_CameraList_default_instance_);
}
inline const ::indiemotionpb::payloads::CameraList& Message::camera_list() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.camera_list)
  return _internal_camera_list();
}
inline ::indiemotionpb::payloads::CameraList* Message::unsafe_arena_release_camera_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.camera_list)
  if (_internal_has_camera_list()) {
    clear_has_payload();
    ::indiemotionpb::payloads::CameraList* temp = payload_.camera_list_;
    payload_.camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_camera_list(::indiemotionpb::payloads::CameraList* camera_list) {
  clear_payload();
  if (camera_list) {
    set_has_camera_list();
    payload_.camera_list_ = camera_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.camera_list)
}
inline ::indiemotionpb::payloads::CameraList* Message::_internal_mutable_camera_list() {
  if (!_internal_has_camera_list()) {
    clear_payload();
    set_has_camera_list();
    payload_.camera_list_ = CreateMaybeMessage< ::indiemotionpb::payloads::CameraList >(GetArenaForAllocation());
  }
  return payload_.camera_list_;
}
inline ::indiemotionpb::payloads::CameraList* Message::mutable_camera_list() {
  ::indiemotionpb::payloads::CameraList* _msg = _internal_mutable_camera_list();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.camera_list)
  return _msg;
}

// .indiemotionpb.payloads.GetCameraList get_camera_list = 41;
inline bool Message::_internal_has_get_camera_list() const {
  return payload_case() == kGetCameraList;
}
inline bool Message::has_get_camera_list() const {
  return _internal_has_get_camera_list();
}
inline void Message::set_has_get_camera_list() {
  _oneof_case_[0] = kGetCameraList;
}
inline ::indiemotionpb::payloads::GetCameraList* Message::release_get_camera_list() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.get_camera_list)
  if (_internal_has_get_camera_list()) {
    clear_has_payload();
      ::indiemotionpb::payloads::GetCameraList* temp = payload_.get_camera_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.get_camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::GetCameraList& Message::_internal_get_camera_list() const {
  return _internal_has_get_camera_list()
      ? *payload_.get_camera_list_
      : reinterpret_cast< ::indiemotionpb::payloads::GetCameraList&>(::indiemotionpb::payloads::_GetCameraList_default_instance_);
}
inline const ::indiemotionpb::payloads::GetCameraList& Message::get_camera_list() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.get_camera_list)
  return _internal_get_camera_list();
}
inline ::indiemotionpb::payloads::GetCameraList* Message::unsafe_arena_release_get_camera_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.get_camera_list)
  if (_internal_has_get_camera_list()) {
    clear_has_payload();
    ::indiemotionpb::payloads::GetCameraList* temp = payload_.get_camera_list_;
    payload_.get_camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_get_camera_list(::indiemotionpb::payloads::GetCameraList* get_camera_list) {
  clear_payload();
  if (get_camera_list) {
    set_has_get_camera_list();
    payload_.get_camera_list_ = get_camera_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.get_camera_list)
}
inline ::indiemotionpb::payloads::GetCameraList* Message::_internal_mutable_get_camera_list() {
  if (!_internal_has_get_camera_list()) {
    clear_payload();
    set_has_get_camera_list();
    payload_.get_camera_list_ = CreateMaybeMessage< ::indiemotionpb::payloads::GetCameraList >(GetArenaForAllocation());
  }
  return payload_.get_camera_list_;
}
inline ::indiemotionpb::payloads::GetCameraList* Message::mutable_get_camera_list() {
  ::indiemotionpb::payloads::GetCameraList* _msg = _internal_mutable_get_camera_list();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.get_camera_list)
  return _msg;
}

// .indiemotionpb.payloads.SessionProperty session_property = 50;
inline bool Message::_internal_has_session_property() const {
  return payload_case() == kSessionProperty;
}
inline bool Message::has_session_property() const {
  return _internal_has_session_property();
}
inline void Message::set_has_session_property() {
  _oneof_case_[0] = kSessionProperty;
}
inline ::indiemotionpb::payloads::SessionProperty* Message::release_session_property() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.session_property)
  if (_internal_has_session_property()) {
    clear_has_payload();
      ::indiemotionpb::payloads::SessionProperty* temp = payload_.session_property_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.session_property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::SessionProperty& Message::_internal_session_property() const {
  return _internal_has_session_property()
      ? *payload_.session_property_
      : reinterpret_cast< ::indiemotionpb::payloads::SessionProperty&>(::indiemotionpb::payloads::_SessionProperty_default_instance_);
}
inline const ::indiemotionpb::payloads::SessionProperty& Message::session_property() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.session_property)
  return _internal_session_property();
}
inline ::indiemotionpb::payloads::SessionProperty* Message::unsafe_arena_release_session_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.session_property)
  if (_internal_has_session_property()) {
    clear_has_payload();
    ::indiemotionpb::payloads::SessionProperty* temp = payload_.session_property_;
    payload_.session_property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_session_property(::indiemotionpb::payloads::SessionProperty* session_property) {
  clear_payload();
  if (session_property) {
    set_has_session_property();
    payload_.session_property_ = session_property;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.session_property)
}
inline ::indiemotionpb::payloads::SessionProperty* Message::_internal_mutable_session_property() {
  if (!_internal_has_session_property()) {
    clear_payload();
    set_has_session_property();
    payload_.session_property_ = CreateMaybeMessage< ::indiemotionpb::payloads::SessionProperty >(GetArenaForAllocation());
  }
  return payload_.session_property_;
}
inline ::indiemotionpb::payloads::SessionProperty* Message::mutable_session_property() {
  ::indiemotionpb::payloads::SessionProperty* _msg = _internal_mutable_session_property();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.session_property)
  return _msg;
}

// .indiemotionpb.payloads.GetSessionPropertyByName get_session_property_by_name = 51;
inline bool Message::_internal_has_get_session_property_by_name() const {
  return payload_case() == kGetSessionPropertyByName;
}
inline bool Message::has_get_session_property_by_name() const {
  return _internal_has_get_session_property_by_name();
}
inline void Message::set_has_get_session_property_by_name() {
  _oneof_case_[0] = kGetSessionPropertyByName;
}
inline ::indiemotionpb::payloads::GetSessionPropertyByName* Message::release_get_session_property_by_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.get_session_property_by_name)
  if (_internal_has_get_session_property_by_name()) {
    clear_has_payload();
      ::indiemotionpb::payloads::GetSessionPropertyByName* temp = payload_.get_session_property_by_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.get_session_property_by_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::GetSessionPropertyByName& Message::_internal_get_session_property_by_name() const {
  return _internal_has_get_session_property_by_name()
      ? *payload_.get_session_property_by_name_
      : reinterpret_cast< ::indiemotionpb::payloads::GetSessionPropertyByName&>(::indiemotionpb::payloads::_GetSessionPropertyByName_default_instance_);
}
inline const ::indiemotionpb::payloads::GetSessionPropertyByName& Message::get_session_property_by_name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.get_session_property_by_name)
  return _internal_get_session_property_by_name();
}
inline ::indiemotionpb::payloads::GetSessionPropertyByName* Message::unsafe_arena_release_get_session_property_by_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.get_session_property_by_name)
  if (_internal_has_get_session_property_by_name()) {
    clear_has_payload();
    ::indiemotionpb::payloads::GetSessionPropertyByName* temp = payload_.get_session_property_by_name_;
    payload_.get_session_property_by_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_get_session_property_by_name(::indiemotionpb::payloads::GetSessionPropertyByName* get_session_property_by_name) {
  clear_payload();
  if (get_session_property_by_name) {
    set_has_get_session_property_by_name();
    payload_.get_session_property_by_name_ = get_session_property_by_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.get_session_property_by_name)
}
inline ::indiemotionpb::payloads::GetSessionPropertyByName* Message::_internal_mutable_get_session_property_by_name() {
  if (!_internal_has_get_session_property_by_name()) {
    clear_payload();
    set_has_get_session_property_by_name();
    payload_.get_session_property_by_name_ = CreateMaybeMessage< ::indiemotionpb::payloads::GetSessionPropertyByName >(GetArenaForAllocation());
  }
  return payload_.get_session_property_by_name_;
}
inline ::indiemotionpb::payloads::GetSessionPropertyByName* Message::mutable_get_session_property_by_name() {
  ::indiemotionpb::payloads::GetSessionPropertyByName* _msg = _internal_mutable_get_session_property_by_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.get_session_property_by_name)
  return _msg;
}

// .indiemotionpb.payloads.ClearSessionPropertyByName clear_session_property_by_name = 52;
inline bool Message::_internal_has_clear_session_property_by_name() const {
  return payload_case() == kClearSessionPropertyByName;
}
inline bool Message::has_clear_session_property_by_name() const {
  return _internal_has_clear_session_property_by_name();
}
inline void Message::set_has_clear_session_property_by_name() {
  _oneof_case_[0] = kClearSessionPropertyByName;
}
inline ::indiemotionpb::payloads::ClearSessionPropertyByName* Message::release_clear_session_property_by_name() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.clear_session_property_by_name)
  if (_internal_has_clear_session_property_by_name()) {
    clear_has_payload();
      ::indiemotionpb::payloads::ClearSessionPropertyByName* temp = payload_.clear_session_property_by_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.clear_session_property_by_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::ClearSessionPropertyByName& Message::_internal_clear_session_property_by_name() const {
  return _internal_has_clear_session_property_by_name()
      ? *payload_.clear_session_property_by_name_
      : reinterpret_cast< ::indiemotionpb::payloads::ClearSessionPropertyByName&>(::indiemotionpb::payloads::_ClearSessionPropertyByName_default_instance_);
}
inline const ::indiemotionpb::payloads::ClearSessionPropertyByName& Message::clear_session_property_by_name() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.clear_session_property_by_name)
  return _internal_clear_session_property_by_name();
}
inline ::indiemotionpb::payloads::ClearSessionPropertyByName* Message::unsafe_arena_release_clear_session_property_by_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.clear_session_property_by_name)
  if (_internal_has_clear_session_property_by_name()) {
    clear_has_payload();
    ::indiemotionpb::payloads::ClearSessionPropertyByName* temp = payload_.clear_session_property_by_name_;
    payload_.clear_session_property_by_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_clear_session_property_by_name(::indiemotionpb::payloads::ClearSessionPropertyByName* clear_session_property_by_name) {
  clear_payload();
  if (clear_session_property_by_name) {
    set_has_clear_session_property_by_name();
    payload_.clear_session_property_by_name_ = clear_session_property_by_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.clear_session_property_by_name)
}
inline ::indiemotionpb::payloads::ClearSessionPropertyByName* Message::_internal_mutable_clear_session_property_by_name() {
  if (!_internal_has_clear_session_property_by_name()) {
    clear_payload();
    set_has_clear_session_property_by_name();
    payload_.clear_session_property_by_name_ = CreateMaybeMessage< ::indiemotionpb::payloads::ClearSessionPropertyByName >(GetArenaForAllocation());
  }
  return payload_.clear_session_property_by_name_;
}
inline ::indiemotionpb::payloads::ClearSessionPropertyByName* Message::mutable_clear_session_property_by_name() {
  ::indiemotionpb::payloads::ClearSessionPropertyByName* _msg = _internal_mutable_clear_session_property_by_name();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.clear_session_property_by_name)
  return _msg;
}

// .indiemotionpb.payloads.InputDeviceInfo input_device_info = 60;
inline bool Message::_internal_has_input_device_info() const {
  return payload_case() == kInputDeviceInfo;
}
inline bool Message::has_input_device_info() const {
  return _internal_has_input_device_info();
}
inline void Message::set_has_input_device_info() {
  _oneof_case_[0] = kInputDeviceInfo;
}
inline ::indiemotionpb::payloads::InputDeviceInfo* Message::release_input_device_info() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.input_device_info)
  if (_internal_has_input_device_info()) {
    clear_has_payload();
      ::indiemotionpb::payloads::InputDeviceInfo* temp = payload_.input_device_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.input_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::InputDeviceInfo& Message::_internal_input_device_info() const {
  return _internal_has_input_device_info()
      ? *payload_.input_device_info_
      : reinterpret_cast< ::indiemotionpb::payloads::InputDeviceInfo&>(::indiemotionpb::payloads::_InputDeviceInfo_default_instance_);
}
inline const ::indiemotionpb::payloads::InputDeviceInfo& Message::input_device_info() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.input_device_info)
  return _internal_input_device_info();
}
inline ::indiemotionpb::payloads::InputDeviceInfo* Message::unsafe_arena_release_input_device_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.input_device_info)
  if (_internal_has_input_device_info()) {
    clear_has_payload();
    ::indiemotionpb::payloads::InputDeviceInfo* temp = payload_.input_device_info_;
    payload_.input_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_input_device_info(::indiemotionpb::payloads::InputDeviceInfo* input_device_info) {
  clear_payload();
  if (input_device_info) {
    set_has_input_device_info();
    payload_.input_device_info_ = input_device_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.input_device_info)
}
inline ::indiemotionpb::payloads::InputDeviceInfo* Message::_internal_mutable_input_device_info() {
  if (!_internal_has_input_device_info()) {
    clear_payload();
    set_has_input_device_info();
    payload_.input_device_info_ = CreateMaybeMessage< ::indiemotionpb::payloads::InputDeviceInfo >(GetArenaForAllocation());
  }
  return payload_.input_device_info_;
}
inline ::indiemotionpb::payloads::InputDeviceInfo* Message::mutable_input_device_info() {
  ::indiemotionpb::payloads::InputDeviceInfo* _msg = _internal_mutable_input_device_info();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.input_device_info)
  return _msg;
}

// .indiemotionpb.payloads.InputDeviceXForm input_device_xform = 61;
inline bool Message::_internal_has_input_device_xform() const {
  return payload_case() == kInputDeviceXform;
}
inline bool Message::has_input_device_xform() const {
  return _internal_has_input_device_xform();
}
inline void Message::set_has_input_device_xform() {
  _oneof_case_[0] = kInputDeviceXform;
}
inline ::indiemotionpb::payloads::InputDeviceXForm* Message::release_input_device_xform() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.input_device_xform)
  if (_internal_has_input_device_xform()) {
    clear_has_payload();
      ::indiemotionpb::payloads::InputDeviceXForm* temp = payload_.input_device_xform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.input_device_xform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::InputDeviceXForm& Message::_internal_input_device_xform() const {
  return _internal_has_input_device_xform()
      ? *payload_.input_device_xform_
      : reinterpret_cast< ::indiemotionpb::payloads::InputDeviceXForm&>(::indiemotionpb::payloads::_InputDeviceXForm_default_instance_);
}
inline const ::indiemotionpb::payloads::InputDeviceXForm& Message::input_device_xform() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.input_device_xform)
  return _internal_input_device_xform();
}
inline ::indiemotionpb::payloads::InputDeviceXForm* Message::unsafe_arena_release_input_device_xform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.input_device_xform)
  if (_internal_has_input_device_xform()) {
    clear_has_payload();
    ::indiemotionpb::payloads::InputDeviceXForm* temp = payload_.input_device_xform_;
    payload_.input_device_xform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_input_device_xform(::indiemotionpb::payloads::InputDeviceXForm* input_device_xform) {
  clear_payload();
  if (input_device_xform) {
    set_has_input_device_xform();
    payload_.input_device_xform_ = input_device_xform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.input_device_xform)
}
inline ::indiemotionpb::payloads::InputDeviceXForm* Message::_internal_mutable_input_device_xform() {
  if (!_internal_has_input_device_xform()) {
    clear_payload();
    set_has_input_device_xform();
    payload_.input_device_xform_ = CreateMaybeMessage< ::indiemotionpb::payloads::InputDeviceXForm >(GetArenaForAllocation());
  }
  return payload_.input_device_xform_;
}
inline ::indiemotionpb::payloads::InputDeviceXForm* Message::mutable_input_device_xform() {
  ::indiemotionpb::payloads::InputDeviceXForm* _msg = _internal_mutable_input_device_xform();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.input_device_xform)
  return _msg;
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace indiemotionpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
