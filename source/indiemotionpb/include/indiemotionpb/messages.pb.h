// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "payloads.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace indiemotionpb {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace indiemotionpb
PROTOBUF_NAMESPACE_OPEN
template<> ::indiemotionpb::Header* Arena::CreateMaybeMessage<::indiemotionpb::Header>(Arena*);
template<> ::indiemotionpb::Message* Arena::CreateMaybeMessage<::indiemotionpb::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indiemotionpb {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return new Header();
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 20,
    kResponseIdFieldNumber = 40,
  };
  // string id = 20;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string responseId = 40;
  bool has_responseid() const;
  private:
  bool _internal_has_responseid() const;
  public:
  void clear_responseid();
  const std::string& responseid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responseid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responseid();
  PROTOBUF_MUST_USE_RESULT std::string* release_responseid();
  void set_allocated_responseid(std::string* responseid);
  private:
  const std::string& _internal_responseid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responseid(const std::string& value);
  std::string* _internal_mutable_responseid();
  public:

  // @@protoc_insertion_point(class_scope:indiemotionpb.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responseid_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indiemotionpb.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kError = 25,
    kInitializeSession = 31,
    kShutdownSession = 32,
    kSessionInfo = 40,
    kSceneInfo = 50,
    kActiveCameraUpdated = 51,
    kMotionInfo = 60,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indiemotionpb.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kErrorFieldNumber = 25,
    kInitializeSessionFieldNumber = 31,
    kShutdownSessionFieldNumber = 32,
    kSessionInfoFieldNumber = 40,
    kSceneInfoFieldNumber = 50,
    kActiveCameraUpdatedFieldNumber = 51,
    kMotionInfoFieldNumber = 60,
  };
  // .indiemotionpb.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::indiemotionpb::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::Header* release_header();
  ::indiemotionpb::Header* mutable_header();
  void set_allocated_header(::indiemotionpb::Header* header);
  private:
  const ::indiemotionpb::Header& _internal_header() const;
  ::indiemotionpb::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::indiemotionpb::Header* header);
  ::indiemotionpb::Header* unsafe_arena_release_header();

  // .indiemotionpb.payloads.Error error = 25;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::indiemotionpb::payloads::Error& error() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::Error* release_error();
  ::indiemotionpb::payloads::Error* mutable_error();
  void set_allocated_error(::indiemotionpb::payloads::Error* error);
  private:
  const ::indiemotionpb::payloads::Error& _internal_error() const;
  ::indiemotionpb::payloads::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::indiemotionpb::payloads::Error* error);
  ::indiemotionpb::payloads::Error* unsafe_arena_release_error();

  // .indiemotionpb.payloads.InitializeSession initialize_session = 31;
  bool has_initialize_session() const;
  private:
  bool _internal_has_initialize_session() const;
  public:
  void clear_initialize_session();
  const ::indiemotionpb::payloads::InitializeSession& initialize_session() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::InitializeSession* release_initialize_session();
  ::indiemotionpb::payloads::InitializeSession* mutable_initialize_session();
  void set_allocated_initialize_session(::indiemotionpb::payloads::InitializeSession* initialize_session);
  private:
  const ::indiemotionpb::payloads::InitializeSession& _internal_initialize_session() const;
  ::indiemotionpb::payloads::InitializeSession* _internal_mutable_initialize_session();
  public:
  void unsafe_arena_set_allocated_initialize_session(
      ::indiemotionpb::payloads::InitializeSession* initialize_session);
  ::indiemotionpb::payloads::InitializeSession* unsafe_arena_release_initialize_session();

  // .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
  bool has_shutdown_session() const;
  private:
  bool _internal_has_shutdown_session() const;
  public:
  void clear_shutdown_session();
  const ::indiemotionpb::payloads::ShutdownSession& shutdown_session() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::ShutdownSession* release_shutdown_session();
  ::indiemotionpb::payloads::ShutdownSession* mutable_shutdown_session();
  void set_allocated_shutdown_session(::indiemotionpb::payloads::ShutdownSession* shutdown_session);
  private:
  const ::indiemotionpb::payloads::ShutdownSession& _internal_shutdown_session() const;
  ::indiemotionpb::payloads::ShutdownSession* _internal_mutable_shutdown_session();
  public:
  void unsafe_arena_set_allocated_shutdown_session(
      ::indiemotionpb::payloads::ShutdownSession* shutdown_session);
  ::indiemotionpb::payloads::ShutdownSession* unsafe_arena_release_shutdown_session();

  // .indiemotionpb.payloads.SessionInfo session_info = 40;
  bool has_session_info() const;
  private:
  bool _internal_has_session_info() const;
  public:
  void clear_session_info();
  const ::indiemotionpb::payloads::SessionInfo& session_info() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::SessionInfo* release_session_info();
  ::indiemotionpb::payloads::SessionInfo* mutable_session_info();
  void set_allocated_session_info(::indiemotionpb::payloads::SessionInfo* session_info);
  private:
  const ::indiemotionpb::payloads::SessionInfo& _internal_session_info() const;
  ::indiemotionpb::payloads::SessionInfo* _internal_mutable_session_info();
  public:
  void unsafe_arena_set_allocated_session_info(
      ::indiemotionpb::payloads::SessionInfo* session_info);
  ::indiemotionpb::payloads::SessionInfo* unsafe_arena_release_session_info();

  // .indiemotionpb.payloads.SceneInfo scene_info = 50;
  bool has_scene_info() const;
  private:
  bool _internal_has_scene_info() const;
  public:
  void clear_scene_info();
  const ::indiemotionpb::payloads::SceneInfo& scene_info() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::SceneInfo* release_scene_info();
  ::indiemotionpb::payloads::SceneInfo* mutable_scene_info();
  void set_allocated_scene_info(::indiemotionpb::payloads::SceneInfo* scene_info);
  private:
  const ::indiemotionpb::payloads::SceneInfo& _internal_scene_info() const;
  ::indiemotionpb::payloads::SceneInfo* _internal_mutable_scene_info();
  public:
  void unsafe_arena_set_allocated_scene_info(
      ::indiemotionpb::payloads::SceneInfo* scene_info);
  ::indiemotionpb::payloads::SceneInfo* unsafe_arena_release_scene_info();

  // .indiemotionpb.payloads.ActiveCamera active_camera_updated = 51;
  bool has_active_camera_updated() const;
  private:
  bool _internal_has_active_camera_updated() const;
  public:
  void clear_active_camera_updated();
  const ::indiemotionpb::payloads::ActiveCamera& active_camera_updated() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::ActiveCamera* release_active_camera_updated();
  ::indiemotionpb::payloads::ActiveCamera* mutable_active_camera_updated();
  void set_allocated_active_camera_updated(::indiemotionpb::payloads::ActiveCamera* active_camera_updated);
  private:
  const ::indiemotionpb::payloads::ActiveCamera& _internal_active_camera_updated() const;
  ::indiemotionpb::payloads::ActiveCamera* _internal_mutable_active_camera_updated();
  public:
  void unsafe_arena_set_allocated_active_camera_updated(
      ::indiemotionpb::payloads::ActiveCamera* active_camera_updated);
  ::indiemotionpb::payloads::ActiveCamera* unsafe_arena_release_active_camera_updated();

  // .indiemotionpb.payloads.MotionInfo motion_info = 60;
  bool has_motion_info() const;
  private:
  bool _internal_has_motion_info() const;
  public:
  void clear_motion_info();
  const ::indiemotionpb::payloads::MotionInfo& motion_info() const;
  PROTOBUF_MUST_USE_RESULT ::indiemotionpb::payloads::MotionInfo* release_motion_info();
  ::indiemotionpb::payloads::MotionInfo* mutable_motion_info();
  void set_allocated_motion_info(::indiemotionpb::payloads::MotionInfo* motion_info);
  private:
  const ::indiemotionpb::payloads::MotionInfo& _internal_motion_info() const;
  ::indiemotionpb::payloads::MotionInfo* _internal_mutable_motion_info();
  public:
  void unsafe_arena_set_allocated_motion_info(
      ::indiemotionpb::payloads::MotionInfo* motion_info);
  ::indiemotionpb::payloads::MotionInfo* unsafe_arena_release_motion_info();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:indiemotionpb.Message)
 private:
  class _Internal;
  void set_has_error();
  void set_has_initialize_session();
  void set_has_shutdown_session();
  void set_has_session_info();
  void set_has_scene_info();
  void set_has_active_camera_updated();
  void set_has_motion_info();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::indiemotionpb::Header* header_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::indiemotionpb::payloads::Error* error_;
    ::indiemotionpb::payloads::InitializeSession* initialize_session_;
    ::indiemotionpb::payloads::ShutdownSession* shutdown_session_;
    ::indiemotionpb::payloads::SessionInfo* session_info_;
    ::indiemotionpb::payloads::SceneInfo* scene_info_;
    ::indiemotionpb::payloads::ActiveCamera* active_camera_updated_;
    ::indiemotionpb::payloads::MotionInfo* motion_info_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string id = 20;
inline void Header::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Header::id() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Header.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.Header.id)
}
inline std::string* Header::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Header.id)
  return _s;
}
inline const std::string& Header::_internal_id() const {
  return id_.Get();
}
inline void Header::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_id() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Header.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Header.id)
}

// optional string responseId = 40;
inline bool Header::_internal_has_responseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_responseid() const {
  return _internal_has_responseid();
}
inline void Header::clear_responseid() {
  responseid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::responseid() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Header.responseId)
  return _internal_responseid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_responseid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:indiemotionpb.Header.responseId)
}
inline std::string* Header::mutable_responseid() {
  std::string* _s = _internal_mutable_responseid();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Header.responseId)
  return _s;
}
inline const std::string& Header::_internal_responseid() const {
  return responseid_.Get();
}
inline void Header::_internal_set_responseid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  responseid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_responseid() {
  _has_bits_[0] |= 0x00000001u;
  return responseid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_responseid() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Header.responseId)
  if (!_internal_has_responseid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return responseid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_responseid(std::string* responseid) {
  if (responseid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  responseid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responseid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Header.responseId)
}

// -------------------------------------------------------------------

// Message

// .indiemotionpb.Header header = 1;
inline bool Message::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message::has_header() const {
  return _internal_has_header();
}
inline void Message::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::indiemotionpb::Header& Message::_internal_header() const {
  const ::indiemotionpb::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::indiemotionpb::Header&>(
      ::indiemotionpb::_Header_default_instance_);
}
inline const ::indiemotionpb::Header& Message::header() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.header)
  return _internal_header();
}
inline void Message::unsafe_arena_set_allocated_header(
    ::indiemotionpb::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.header)
}
inline ::indiemotionpb::Header* Message::release_header() {
  
  ::indiemotionpb::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::indiemotionpb::Header* Message::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.header)
  
  ::indiemotionpb::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::indiemotionpb::Header* Message::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::indiemotionpb::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::indiemotionpb::Header* Message::mutable_header() {
  ::indiemotionpb::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.header)
  return _msg;
}
inline void Message::set_allocated_header(::indiemotionpb::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::indiemotionpb::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:indiemotionpb.Message.header)
}

// .indiemotionpb.payloads.Error error = 25;
inline bool Message::_internal_has_error() const {
  return payload_case() == kError;
}
inline bool Message::has_error() const {
  return _internal_has_error();
}
inline void Message::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::indiemotionpb::payloads::Error* Message::release_error() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.error)
  if (_internal_has_error()) {
    clear_has_payload();
      ::indiemotionpb::payloads::Error* temp = payload_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::Error& Message::_internal_error() const {
  return _internal_has_error()
      ? *payload_.error_
      : reinterpret_cast< ::indiemotionpb::payloads::Error&>(::indiemotionpb::payloads::_Error_default_instance_);
}
inline const ::indiemotionpb::payloads::Error& Message::error() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.error)
  return _internal_error();
}
inline ::indiemotionpb::payloads::Error* Message::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.error)
  if (_internal_has_error()) {
    clear_has_payload();
    ::indiemotionpb::payloads::Error* temp = payload_.error_;
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_error(::indiemotionpb::payloads::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.error)
}
inline ::indiemotionpb::payloads::Error* Message::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = CreateMaybeMessage< ::indiemotionpb::payloads::Error >(GetArenaForAllocation());
  }
  return payload_.error_;
}
inline ::indiemotionpb::payloads::Error* Message::mutable_error() {
  ::indiemotionpb::payloads::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.error)
  return _msg;
}

// .indiemotionpb.payloads.InitializeSession initialize_session = 31;
inline bool Message::_internal_has_initialize_session() const {
  return payload_case() == kInitializeSession;
}
inline bool Message::has_initialize_session() const {
  return _internal_has_initialize_session();
}
inline void Message::set_has_initialize_session() {
  _oneof_case_[0] = kInitializeSession;
}
inline ::indiemotionpb::payloads::InitializeSession* Message::release_initialize_session() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.initialize_session)
  if (_internal_has_initialize_session()) {
    clear_has_payload();
      ::indiemotionpb::payloads::InitializeSession* temp = payload_.initialize_session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.initialize_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::InitializeSession& Message::_internal_initialize_session() const {
  return _internal_has_initialize_session()
      ? *payload_.initialize_session_
      : reinterpret_cast< ::indiemotionpb::payloads::InitializeSession&>(::indiemotionpb::payloads::_InitializeSession_default_instance_);
}
inline const ::indiemotionpb::payloads::InitializeSession& Message::initialize_session() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.initialize_session)
  return _internal_initialize_session();
}
inline ::indiemotionpb::payloads::InitializeSession* Message::unsafe_arena_release_initialize_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.initialize_session)
  if (_internal_has_initialize_session()) {
    clear_has_payload();
    ::indiemotionpb::payloads::InitializeSession* temp = payload_.initialize_session_;
    payload_.initialize_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_initialize_session(::indiemotionpb::payloads::InitializeSession* initialize_session) {
  clear_payload();
  if (initialize_session) {
    set_has_initialize_session();
    payload_.initialize_session_ = initialize_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.initialize_session)
}
inline ::indiemotionpb::payloads::InitializeSession* Message::_internal_mutable_initialize_session() {
  if (!_internal_has_initialize_session()) {
    clear_payload();
    set_has_initialize_session();
    payload_.initialize_session_ = CreateMaybeMessage< ::indiemotionpb::payloads::InitializeSession >(GetArenaForAllocation());
  }
  return payload_.initialize_session_;
}
inline ::indiemotionpb::payloads::InitializeSession* Message::mutable_initialize_session() {
  ::indiemotionpb::payloads::InitializeSession* _msg = _internal_mutable_initialize_session();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.initialize_session)
  return _msg;
}

// .indiemotionpb.payloads.ShutdownSession shutdown_session = 32;
inline bool Message::_internal_has_shutdown_session() const {
  return payload_case() == kShutdownSession;
}
inline bool Message::has_shutdown_session() const {
  return _internal_has_shutdown_session();
}
inline void Message::set_has_shutdown_session() {
  _oneof_case_[0] = kShutdownSession;
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::release_shutdown_session() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.shutdown_session)
  if (_internal_has_shutdown_session()) {
    clear_has_payload();
      ::indiemotionpb::payloads::ShutdownSession* temp = payload_.shutdown_session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.shutdown_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::ShutdownSession& Message::_internal_shutdown_session() const {
  return _internal_has_shutdown_session()
      ? *payload_.shutdown_session_
      : reinterpret_cast< ::indiemotionpb::payloads::ShutdownSession&>(::indiemotionpb::payloads::_ShutdownSession_default_instance_);
}
inline const ::indiemotionpb::payloads::ShutdownSession& Message::shutdown_session() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.shutdown_session)
  return _internal_shutdown_session();
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::unsafe_arena_release_shutdown_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.shutdown_session)
  if (_internal_has_shutdown_session()) {
    clear_has_payload();
    ::indiemotionpb::payloads::ShutdownSession* temp = payload_.shutdown_session_;
    payload_.shutdown_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_shutdown_session(::indiemotionpb::payloads::ShutdownSession* shutdown_session) {
  clear_payload();
  if (shutdown_session) {
    set_has_shutdown_session();
    payload_.shutdown_session_ = shutdown_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.shutdown_session)
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::_internal_mutable_shutdown_session() {
  if (!_internal_has_shutdown_session()) {
    clear_payload();
    set_has_shutdown_session();
    payload_.shutdown_session_ = CreateMaybeMessage< ::indiemotionpb::payloads::ShutdownSession >(GetArenaForAllocation());
  }
  return payload_.shutdown_session_;
}
inline ::indiemotionpb::payloads::ShutdownSession* Message::mutable_shutdown_session() {
  ::indiemotionpb::payloads::ShutdownSession* _msg = _internal_mutable_shutdown_session();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.shutdown_session)
  return _msg;
}

// .indiemotionpb.payloads.SessionInfo session_info = 40;
inline bool Message::_internal_has_session_info() const {
  return payload_case() == kSessionInfo;
}
inline bool Message::has_session_info() const {
  return _internal_has_session_info();
}
inline void Message::set_has_session_info() {
  _oneof_case_[0] = kSessionInfo;
}
inline ::indiemotionpb::payloads::SessionInfo* Message::release_session_info() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.session_info)
  if (_internal_has_session_info()) {
    clear_has_payload();
      ::indiemotionpb::payloads::SessionInfo* temp = payload_.session_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::SessionInfo& Message::_internal_session_info() const {
  return _internal_has_session_info()
      ? *payload_.session_info_
      : reinterpret_cast< ::indiemotionpb::payloads::SessionInfo&>(::indiemotionpb::payloads::_SessionInfo_default_instance_);
}
inline const ::indiemotionpb::payloads::SessionInfo& Message::session_info() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.session_info)
  return _internal_session_info();
}
inline ::indiemotionpb::payloads::SessionInfo* Message::unsafe_arena_release_session_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.session_info)
  if (_internal_has_session_info()) {
    clear_has_payload();
    ::indiemotionpb::payloads::SessionInfo* temp = payload_.session_info_;
    payload_.session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_session_info(::indiemotionpb::payloads::SessionInfo* session_info) {
  clear_payload();
  if (session_info) {
    set_has_session_info();
    payload_.session_info_ = session_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.session_info)
}
inline ::indiemotionpb::payloads::SessionInfo* Message::_internal_mutable_session_info() {
  if (!_internal_has_session_info()) {
    clear_payload();
    set_has_session_info();
    payload_.session_info_ = CreateMaybeMessage< ::indiemotionpb::payloads::SessionInfo >(GetArenaForAllocation());
  }
  return payload_.session_info_;
}
inline ::indiemotionpb::payloads::SessionInfo* Message::mutable_session_info() {
  ::indiemotionpb::payloads::SessionInfo* _msg = _internal_mutable_session_info();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.session_info)
  return _msg;
}

// .indiemotionpb.payloads.SceneInfo scene_info = 50;
inline bool Message::_internal_has_scene_info() const {
  return payload_case() == kSceneInfo;
}
inline bool Message::has_scene_info() const {
  return _internal_has_scene_info();
}
inline void Message::set_has_scene_info() {
  _oneof_case_[0] = kSceneInfo;
}
inline ::indiemotionpb::payloads::SceneInfo* Message::release_scene_info() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.scene_info)
  if (_internal_has_scene_info()) {
    clear_has_payload();
      ::indiemotionpb::payloads::SceneInfo* temp = payload_.scene_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.scene_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::SceneInfo& Message::_internal_scene_info() const {
  return _internal_has_scene_info()
      ? *payload_.scene_info_
      : reinterpret_cast< ::indiemotionpb::payloads::SceneInfo&>(::indiemotionpb::payloads::_SceneInfo_default_instance_);
}
inline const ::indiemotionpb::payloads::SceneInfo& Message::scene_info() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.scene_info)
  return _internal_scene_info();
}
inline ::indiemotionpb::payloads::SceneInfo* Message::unsafe_arena_release_scene_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.scene_info)
  if (_internal_has_scene_info()) {
    clear_has_payload();
    ::indiemotionpb::payloads::SceneInfo* temp = payload_.scene_info_;
    payload_.scene_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_scene_info(::indiemotionpb::payloads::SceneInfo* scene_info) {
  clear_payload();
  if (scene_info) {
    set_has_scene_info();
    payload_.scene_info_ = scene_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.scene_info)
}
inline ::indiemotionpb::payloads::SceneInfo* Message::_internal_mutable_scene_info() {
  if (!_internal_has_scene_info()) {
    clear_payload();
    set_has_scene_info();
    payload_.scene_info_ = CreateMaybeMessage< ::indiemotionpb::payloads::SceneInfo >(GetArenaForAllocation());
  }
  return payload_.scene_info_;
}
inline ::indiemotionpb::payloads::SceneInfo* Message::mutable_scene_info() {
  ::indiemotionpb::payloads::SceneInfo* _msg = _internal_mutable_scene_info();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.scene_info)
  return _msg;
}

// .indiemotionpb.payloads.ActiveCamera active_camera_updated = 51;
inline bool Message::_internal_has_active_camera_updated() const {
  return payload_case() == kActiveCameraUpdated;
}
inline bool Message::has_active_camera_updated() const {
  return _internal_has_active_camera_updated();
}
inline void Message::set_has_active_camera_updated() {
  _oneof_case_[0] = kActiveCameraUpdated;
}
inline ::indiemotionpb::payloads::ActiveCamera* Message::release_active_camera_updated() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.active_camera_updated)
  if (_internal_has_active_camera_updated()) {
    clear_has_payload();
      ::indiemotionpb::payloads::ActiveCamera* temp = payload_.active_camera_updated_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.active_camera_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::ActiveCamera& Message::_internal_active_camera_updated() const {
  return _internal_has_active_camera_updated()
      ? *payload_.active_camera_updated_
      : reinterpret_cast< ::indiemotionpb::payloads::ActiveCamera&>(::indiemotionpb::payloads::_ActiveCamera_default_instance_);
}
inline const ::indiemotionpb::payloads::ActiveCamera& Message::active_camera_updated() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.active_camera_updated)
  return _internal_active_camera_updated();
}
inline ::indiemotionpb::payloads::ActiveCamera* Message::unsafe_arena_release_active_camera_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.active_camera_updated)
  if (_internal_has_active_camera_updated()) {
    clear_has_payload();
    ::indiemotionpb::payloads::ActiveCamera* temp = payload_.active_camera_updated_;
    payload_.active_camera_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_active_camera_updated(::indiemotionpb::payloads::ActiveCamera* active_camera_updated) {
  clear_payload();
  if (active_camera_updated) {
    set_has_active_camera_updated();
    payload_.active_camera_updated_ = active_camera_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.active_camera_updated)
}
inline ::indiemotionpb::payloads::ActiveCamera* Message::_internal_mutable_active_camera_updated() {
  if (!_internal_has_active_camera_updated()) {
    clear_payload();
    set_has_active_camera_updated();
    payload_.active_camera_updated_ = CreateMaybeMessage< ::indiemotionpb::payloads::ActiveCamera >(GetArenaForAllocation());
  }
  return payload_.active_camera_updated_;
}
inline ::indiemotionpb::payloads::ActiveCamera* Message::mutable_active_camera_updated() {
  ::indiemotionpb::payloads::ActiveCamera* _msg = _internal_mutable_active_camera_updated();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.active_camera_updated)
  return _msg;
}

// .indiemotionpb.payloads.MotionInfo motion_info = 60;
inline bool Message::_internal_has_motion_info() const {
  return payload_case() == kMotionInfo;
}
inline bool Message::has_motion_info() const {
  return _internal_has_motion_info();
}
inline void Message::set_has_motion_info() {
  _oneof_case_[0] = kMotionInfo;
}
inline ::indiemotionpb::payloads::MotionInfo* Message::release_motion_info() {
  // @@protoc_insertion_point(field_release:indiemotionpb.Message.motion_info)
  if (_internal_has_motion_info()) {
    clear_has_payload();
      ::indiemotionpb::payloads::MotionInfo* temp = payload_.motion_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.motion_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::indiemotionpb::payloads::MotionInfo& Message::_internal_motion_info() const {
  return _internal_has_motion_info()
      ? *payload_.motion_info_
      : reinterpret_cast< ::indiemotionpb::payloads::MotionInfo&>(::indiemotionpb::payloads::_MotionInfo_default_instance_);
}
inline const ::indiemotionpb::payloads::MotionInfo& Message::motion_info() const {
  // @@protoc_insertion_point(field_get:indiemotionpb.Message.motion_info)
  return _internal_motion_info();
}
inline ::indiemotionpb::payloads::MotionInfo* Message::unsafe_arena_release_motion_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:indiemotionpb.Message.motion_info)
  if (_internal_has_motion_info()) {
    clear_has_payload();
    ::indiemotionpb::payloads::MotionInfo* temp = payload_.motion_info_;
    payload_.motion_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_motion_info(::indiemotionpb::payloads::MotionInfo* motion_info) {
  clear_payload();
  if (motion_info) {
    set_has_motion_info();
    payload_.motion_info_ = motion_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:indiemotionpb.Message.motion_info)
}
inline ::indiemotionpb::payloads::MotionInfo* Message::_internal_mutable_motion_info() {
  if (!_internal_has_motion_info()) {
    clear_payload();
    set_has_motion_info();
    payload_.motion_info_ = CreateMaybeMessage< ::indiemotionpb::payloads::MotionInfo >(GetArenaForAllocation());
  }
  return payload_.motion_info_;
}
inline ::indiemotionpb::payloads::MotionInfo* Message::mutable_motion_info() {
  ::indiemotionpb::payloads::MotionInfo* _msg = _internal_mutable_motion_info();
  // @@protoc_insertion_point(field_mutable:indiemotionpb.Message.motion_info)
  return _msg;
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace indiemotionpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
